<?xml version="1.0" encoding="UTF-8"?>
<instructionals module="QtCore">
    <examples>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-bindableproperties-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/bindable_properties_example.png" name="Bindable Properties" projectPath="corelib/bindableproperties/CMakeLists.txt">
            <description><![CDATA[Demonstrates how the usage of bindable properties can simplify your C++ code.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/bindableproperties/bindablesubscription/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-tools-contiguouscache-example.html" imageUrl="qthelp://org.qt-project.qtdoc.670/qtdoc/images/qt-codesample.png" name="Contiguous Cache Example" projectPath="corelib/tools/contiguouscache/CMakeLists.txt">
            <description><![CDATA[The Contiguous Cache example shows how to use QContiguousCache to manage memory usage for very large models. In some environments memory is limited and, even when it isn't, users still dislike an application using excessive memory. Using QContiguousCache to manage a list, rather than loading the entire list into memory, allows the application to limit the amount of memory it uses, regardless of the size of the data set it accesses.]]></description>
            <tags>core,ios</tags>
            <fileToOpen mainFile="true">corelib/tools/contiguouscache/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-ipc-sharedmemory-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/sharedmemory-example_1.png" name="IPC: Shared Memory" projectPath="corelib/ipc/sharedmemory/CMakeLists.txt">
            <description><![CDATA[Demonstrates how to share image data between different processes using the Shared Memory IPC mechanism.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/ipc/sharedmemory/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-ipc-localfortuneclient-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/localfortuneclient-example.png" name="Local Fortune Client" projectPath="corelib/ipc/localfortuneclient/CMakeLists.txt">
            <description><![CDATA[Demonstrates using QLocalSocket for a simple local service client.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/ipc/localfortuneclient/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Connectivity</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-ipc-localfortuneserver-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/localfortuneserver-example.png" name="Local Fortune Server" projectPath="corelib/ipc/localfortuneserver/CMakeLists.txt">
            <description><![CDATA[Demonstrates using QLocalServer and QLocalSocket for serving a simple local service.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/ipc/localfortuneserver/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Connectivity</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-mimetypes-mimetypebrowser-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/mimetypebrowser.png" name="MIME Type Browser" projectPath="corelib/mimetypes/mimetypebrowser/CMakeLists.txt">
            <description><![CDATA[Shows the hierarchy of MIME types and can be used to determine the MIME type of a file.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/mimetypes/mimetypebrowser/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-threads-mandelbrot-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/mandelbrot-example.png" isHighlighted="true" name="Mandelbrot" projectPath="corelib/threads/mandelbrot/CMakeLists.txt">
            <description><![CDATA[The Mandelbrot example demonstrates multi-thread programming using Qt. It shows how to use a worker thread to perform heavy computations without blocking the main thread's event loop.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/threads/mandelbrot/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-serialization-cbordump-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/cbordump.png" name="Parsing and displaying CBOR data" projectPath="corelib/serialization/cbordump/CMakeLists.txt">
            <description><![CDATA[A demonstration of how to parse files in CBOR format.]]></description>
            <tags>core,network</tags>
            <fileToOpen mainFile="true">corelib/serialization/cbordump/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-threads-semaphores-example.html" imageUrl="qthelp://org.qt-project.qtdoc.670/qtdoc/images/qt-codesample.png" name="Producer and Consumer using Semaphores" projectPath="corelib/threads/semaphores/CMakeLists.txt">
            <description><![CDATA[The Producer and Consumer using Semaphores example shows how to use QSemaphore to control access to a circular buffer shared by a producer thread and a consumer thread.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/threads/semaphores/semaphores.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-threads-waitconditions-example.html" imageUrl="qthelp://org.qt-project.qtdoc.670/qtdoc/images/qt-codesample.png" name="Producer and Consumer using Wait Conditions" projectPath="corelib/threads/waitconditions/CMakeLists.txt">
            <description><![CDATA[The Producer and Consumer using Wait Conditions example shows how to use QWaitCondition and QMutex to control access to a circular buffer shared by a producer thread and a consumer thread.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/threads/waitconditions/waitconditions.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-serialization-streambookmarks-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/screenshot.png" isHighlighted="true" name="QXmlStream Bookmarks Example" projectPath="corelib/serialization/streambookmarks/CMakeLists.txt">
            <description><![CDATA[Demonstrates how to read and write XBEL files.]]></description>
            <tags>core,network</tags>
            <fileToOpen mainFile="true">corelib/serialization/streambookmarks/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-platform-androidnotifier-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/androidnotifier.png" name="Qt Android Notifier" projectPath="corelib/platform/androidnotifier/CMakeLists.txt">
            <description><![CDATA[Demonstrates calling Java code from Qt in an Android application.]]></description>
            <tags>android,core,notification,widgets</tags>
            <fileToOpen mainFile="true">corelib/platform/androidnotifier/main.cpp</fileToOpen>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-threads-queuedcustomtype-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/queuedcustomtype-example.png" name="Queued Custom Type" projectPath="corelib/threads/queuedcustomtype/CMakeLists.txt">
            <description><![CDATA[The Queued Custom Type example shows how to send custom types between threads with queued signals and slots.]]></description>
            <tags>core,ios</tags>
            <fileToOpen mainFile="true">corelib/threads/queuedcustomtype/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-serialization-savegame-example.html" imageUrl="qthelp://org.qt-project.qtdoc.670/qtdoc/images/qt-codesample.png" name="Saving and Loading a Game" projectPath="corelib/serialization/savegame/CMakeLists.txt">
            <description><![CDATA[How to save and load a game using Qt's JSON or CBOR classes.]]></description>
            <tags>core</tags>
            <fileToOpen mainFile="true">corelib/serialization/savegame/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtcore.670/qtcore/qtcore-serialization-convert-example.html" imageUrl="qthelp://org.qt-project.qtcore.670/qtcore/images/convert.png" isHighlighted="true" name="Serialization Converter" projectPath="corelib/serialization/convert/CMakeLists.txt">
            <description><![CDATA[How to convert between different serialization formats.]]></description>
            <tags>core,network</tags>
            <fileToOpen mainFile="true">corelib/serialization/convert/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Data Processing &amp; I/O</entry>
            </meta>
        </example>
    </examples>
</instructionals>
