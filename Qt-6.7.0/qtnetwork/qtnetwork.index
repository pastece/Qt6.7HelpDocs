<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE QDOCINDEX>
<INDEX url="https://doc.qt.io/qt" title="Qt Network Reference Documentation" version="6.7.0" project="QtNetwork" indexTitle="Qt Network">
    <namespace name="" status="active" access="public" module="qtnetwork">
        <function name="operator&lt;&lt;" href="qnetworkcachemetadata.html#operator-lt-lt" status="active" access="public" location="qabstractnetworkcache.h" documented="true" related="0" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QNetworkCacheMetaData &amp;metaData)">
            <parameter type="QDataStream &amp;" name="out" default=""/>
            <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
        </function>
        <function name="operator&lt;&lt;" href="qhostaddress.html#operator-lt-lt" status="active" access="public" location="qhostaddress.h" documented="true" related="1" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QHostAddress &amp;address)">
            <parameter type="QDataStream &amp;" name="out" default=""/>
            <parameter type="const QHostAddress &amp;" name="address" default=""/>
        </function>
        <function name="operator&lt;&lt;" href="qnetworkaddressentry.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="2" since="6.2" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkAddressEntry &amp;entry)">
            <parameter type="QDebug" name="debug" default=""/>
            <parameter type="const QNetworkAddressEntry &amp;" name="entry" default=""/>
        </function>
        <function name="operator&lt;&lt;" href="qnetworkinterface.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="3" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkInterface &amp;networkInterface)">
            <parameter type="QDebug" name="debug" default=""/>
            <parameter type="const QNetworkInterface &amp;" name="networkInterface" default=""/>
        </function>
        <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
            <parameter type="QDebug" name="debug" default=""/>
            <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
        </function>
        <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
            <parameter type="QDebug" name="debug" default=""/>
            <parameter type="QSslEllipticCurve" name="curve" default=""/>
        </function>
        <function name="operator&gt;&gt;" href="qnetworkcachemetadata.html#operator-gt-gt" status="active" access="public" location="qabstractnetworkcache.h" documented="true" related="6" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QNetworkCacheMetaData &amp;metaData)">
            <parameter type="QDataStream &amp;" name="in" default=""/>
            <parameter type="QNetworkCacheMetaData &amp;" name="metaData" default=""/>
        </function>
        <function name="operator&gt;&gt;" href="qhostaddress.html#operator-gt-gt" status="active" access="public" location="qhostaddress.h" documented="true" related="7" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QHostAddress &amp;address)">
            <parameter type="QDataStream &amp;" name="in" default=""/>
            <parameter type="QHostAddress &amp;" name="address" default=""/>
        </function>
        <function name="qHash" href="qhostaddress.html#qHash" status="active" access="public" location="qhostaddress.h" documented="true" related="8" meta="plain" noexcept="true" type="size_t" signature="size_t qHash(const QHostAddress &amp;key, size_t seed)">
            <parameter type="const QHostAddress &amp;" name="key" default=""/>
            <parameter type="size_t" name="seed" default="0"/>
        </function>
        <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-1" status="active" access="public" location="qocspresponse.h" documented="true" related="9" meta="plain" noexcept="true" overload="true" overload-number="1" type="size_t" signature="size_t qHash(const QOcspResponse &amp;response, size_t seed)">
            <parameter type="const QOcspResponse &amp;" name="response" default=""/>
            <parameter type="size_t" name="seed" default="0"/>
        </function>
        <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-2" status="active" access="public" location="qsslcertificate.h" documented="true" related="10" meta="plain" noexcept="true" overload="true" overload-number="2" type="size_t" signature="size_t qHash(const QSslCertificate &amp;key, size_t seed)">
            <parameter type="const QSslCertificate &amp;" name="key" default=""/>
            <parameter type="size_t" name="seed" default="0"/>
        </function>
        <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-3" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="11" meta="plain" constexpr="true" noexcept="true" overload="true" overload-number="3" type="size_t" signature="size_t qHash(QSslEllipticCurve curve, size_t seed)">
            <parameter type="QSslEllipticCurve" name="curve" default=""/>
            <parameter type="size_t" name="seed" default="0"/>
        </function>
        <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-4" status="active" access="public" location="qsslerror.h" documented="true" related="12" meta="plain" noexcept="true" overload="true" overload-number="4" type="size_t" signature="size_t qHash(const QSslError &amp;key, size_t seed)">
            <parameter type="const QSslError &amp;" name="key" default=""/>
            <parameter type="size_t" name="seed" default="0"/>
        </function>
        <page name="network-changes-qt6.html" href="network-changes-qt6.html" status="active" location="qt6-changes.qdoc" documented="true" groups="changes-qt-5-to-6" subtype="page" title="Changes to Qt Network" fulltitle="Changes to Qt Network" subtitle="" brief="Migrate Qt Network to Qt 6">
            <contents name="api-changes" title="API changes" level="1"/>
            <contents name="ambiguous-name-overloads" title="Ambiguous name overloads" level="2"/>
            <contents name="bearer-management-is-removed" title="Bearer management is removed" level="2"/>
            <contents name="deleted-enumerators" title="Deleted enumerators" level="2"/>
            <contents name="configuring-qsslsocket" title="Configuring QSslSocket" level="2"/>
            <contents name="changes-in-qnetworkaccessmanager-s-default-behavior" title="Changes in QNetworkAccessManager's default behavior" level="1"/>
            <contents name="redirect-policies" title="Redirect policies" level="2"/>
            <contents name="http-2-is-enabled-by-default" title="HTTP/2 is enabled by default" level="2"/>
            <contents name="qnetworkaccessmanager-now-guards-against-archive-bombs" title="QNetworkAccessManager now guards against archive bombs" level="2"/>
        </page>
        <page name="qtnetwork-programming.html" href="qtnetwork-programming.html" status="active" location="network-programming.qdoc" documented="true" subtype="page" title="Network Programming with Qt" fulltitle="Network Programming with Qt" subtitle="" brief="Programming applications with networking capabilities">
            <contents name="qt-s-classes-for-network-programming" title="Qt's Classes for Network Programming" level="1"/>
            <contents name="high-level-network-operations-for-http" title="High Level Network Operations for HTTP" level="1"/>
            <contents name="using-tcp-with-qtcpsocket-and-qtcpserver" title="Using TCP with QTcpSocket and QTcpServer" level="1"/>
            <contents name="using-udp-with-qudpsocket" title="Using UDP with QUdpSocket" level="1"/>
            <contents name="resolving-host-names-using-qhostinfo" title="Resolving Host Names Using QHostInfo" level="1"/>
            <contents name="support-for-network-proxies" title="Support for Network Proxies" level="1"/>
        </page>
        <class name="QAbstractNetworkCache" href="qabstractnetworkcache.html" status="active" access="public" location="qabstractnetworkcache.h" documented="true" bases="QObject" module="QtNetwork" brief="The interface for cache implementations">
            <function name="QAbstractNetworkCache" fullname="QAbstractNetworkCache::QAbstractNetworkCache" href="qabstractnetworkcache.html#QAbstractNetworkCache" status="active" access="protected" location="qabstractnetworkcache.h" documented="true" meta="constructor" explicit="true" signature="QAbstractNetworkCache(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="cacheSize" fullname="QAbstractNetworkCache::cacheSize" href="qabstractnetworkcache.html#cacheSize" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" const="true" type="qint64" signature="qint64 cacheSize() const = 0"/>
            <function name="clear" fullname="QAbstractNetworkCache::clear" href="qabstractnetworkcache.html#clear" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="slot" virtual="pure" type="void" signature="void clear() = 0"/>
            <function name="data" fullname="QAbstractNetworkCache::data" href="qabstractnetworkcache.html#data" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="QIODevice *" signature="QIODevice * data(const QUrl &amp;url) = 0">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="insert" fullname="QAbstractNetworkCache::insert" href="qabstractnetworkcache.html#insert" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="void" signature="void insert(QIODevice *device) = 0">
                <parameter type="QIODevice *" name="device" default=""/>
            </function>
            <function name="metaData" fullname="QAbstractNetworkCache::metaData" href="qabstractnetworkcache.html#metaData" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="QNetworkCacheMetaData" signature="QNetworkCacheMetaData metaData(const QUrl &amp;url) = 0">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="prepare" fullname="QAbstractNetworkCache::prepare" href="qabstractnetworkcache.html#prepare" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="QIODevice *" signature="QIODevice * prepare(const QNetworkCacheMetaData &amp;metaData) = 0">
                <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="remove" fullname="QAbstractNetworkCache::remove" href="qabstractnetworkcache.html#remove" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="bool" signature="bool remove(const QUrl &amp;url) = 0">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="updateMetaData" fullname="QAbstractNetworkCache::updateMetaData" href="qabstractnetworkcache.html#updateMetaData" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" virtual="pure" type="void" signature="void updateMetaData(const QNetworkCacheMetaData &amp;metaData) = 0">
                <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="~QAbstractNetworkCache" fullname="QAbstractNetworkCache::~QAbstractNetworkCache" href="qabstractnetworkcache.html#dtor.QAbstractNetworkCache" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QAbstractNetworkCache()"/>
        </class>
        <class threadsafety="reentrant" name="QAbstractSocket" href="qabstractsocket.html" status="active" access="public" location="qabstractsocket.h" documented="true" groups="network" bases="QIODevice" module="QtNetwork" brief="The base functionality common to all socket types">
            <function name="QAbstractSocket" fullname="QAbstractSocket::QAbstractSocket" href="qabstractsocket.html#QAbstractSocket" status="active" access="public" location="qabstractsocket.h" documented="true" meta="constructor" signature="QAbstractSocket(QAbstractSocket::SocketType socketType, QObject *parent)">
                <parameter type="QAbstractSocket::SocketType" name="socketType" default=""/>
                <parameter type="QObject *" name="parent" default=""/>
            </function>
            <function name="abort" fullname="QAbstractSocket::abort" href="qabstractsocket.html#abort" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void abort()"/>
            <function name="bind" fullname="QAbstractSocket::bind" href="qabstractsocket.html#bind" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool bind(const QHostAddress &amp;address, quint16 port, QAbstractSocket::BindMode mode)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default="0"/>
                <parameter type="QAbstractSocket::BindMode" name="mode" default="DefaultForPlatform"/>
            </function>
            <function name="bind" fullname="QAbstractSocket::bind" href="qabstractsocket.html#bind-1" status="active" access="public" location="qabstractsocket.h" documented="true" since="6.2" meta="plain" overload="true" overload-number="1" type="bool" signature="bool bind(QHostAddress::SpecialAddress addr, quint16 port, QAbstractSocket::BindMode mode)">
                <parameter type="QHostAddress::SpecialAddress" name="addr" default=""/>
                <parameter type="quint16" name="port" default="0"/>
                <parameter type="QAbstractSocket::BindMode" name="mode" default="DefaultForPlatform"/>
            </function>
            <function name="bind" fullname="QAbstractSocket::bind" href="qabstractsocket.html#bind-2" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" overload="true" overload-number="2" type="bool" signature="bool bind(quint16 port, QAbstractSocket::BindMode mode)">
                <parameter type="quint16" name="port" default="0"/>
                <parameter type="QAbstractSocket::BindMode" name="mode" default="DefaultForPlatform"/>
            </function>
            <function name="bytesAvailable" fullname="QAbstractSocket::bytesAvailable" href="qabstractsocket.html#bytesAvailable" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesAvailable() const override"/>
            <function name="bytesToWrite" fullname="QAbstractSocket::bytesToWrite" href="qabstractsocket.html#bytesToWrite" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesToWrite() const override"/>
            <function name="close" fullname="QAbstractSocket::close" href="qabstractsocket.html#close" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void close() override"/>
            <function name="connectToHost" fullname="QAbstractSocket::connectToHost" href="qabstractsocket.html#connectToHost" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void connectToHost(const QString &amp;hostName, quint16 port, QIODeviceBase::OpenMode openMode, QAbstractSocket::NetworkLayerProtocol protocol)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
                <parameter type="QAbstractSocket::NetworkLayerProtocol" name="protocol" default="AnyIPProtocol"/>
            </function>
            <function name="connectToHost" fullname="QAbstractSocket::connectToHost" href="qabstractsocket.html#connectToHost-1" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void connectToHost(const QHostAddress &amp;address, quint16 port, QIODeviceBase::OpenMode openMode)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="connected" fullname="QAbstractSocket::connected" href="qabstractsocket.html#connected" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void connected()"/>
            <function name="disconnectFromHost" fullname="QAbstractSocket::disconnectFromHost" href="qabstractsocket.html#disconnectFromHost" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void disconnectFromHost()"/>
            <function name="disconnected" fullname="QAbstractSocket::disconnected" href="qabstractsocket.html#disconnected" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void disconnected()"/>
            <function name="error" fullname="QAbstractSocket::error" href="qabstractsocket.html#error" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QAbstractSocket::SocketError" signature="QAbstractSocket::SocketError error() const"/>
            <function name="errorOccurred" fullname="QAbstractSocket::errorOccurred" href="qabstractsocket.html#errorOccurred" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void errorOccurred(QAbstractSocket::SocketError socketError)">
                <parameter type="QAbstractSocket::SocketError" name="socketError" default=""/>
            </function>
            <function name="flush" fullname="QAbstractSocket::flush" href="qabstractsocket.html#flush" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" type="bool" signature="bool flush()"/>
            <function name="hostFound" fullname="QAbstractSocket::hostFound" href="qabstractsocket.html#hostFound" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void hostFound()"/>
            <function name="isSequential" fullname="QAbstractSocket::isSequential" href="qabstractsocket.html#isSequential" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="bool" signature="bool isSequential() const override"/>
            <function name="isValid" fullname="QAbstractSocket::isValid" href="qabstractsocket.html#isValid" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="bool" signature="bool isValid() const"/>
            <function name="localAddress" fullname="QAbstractSocket::localAddress" href="qabstractsocket.html#localAddress" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress localAddress() const"/>
            <function name="localPort" fullname="QAbstractSocket::localPort" href="qabstractsocket.html#localPort" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 localPort() const"/>
            <function name="pauseMode" fullname="QAbstractSocket::pauseMode" href="qabstractsocket.html#pauseMode" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QAbstractSocket::PauseModes" signature="QAbstractSocket::PauseModes pauseMode() const"/>
            <function name="peerAddress" fullname="QAbstractSocket::peerAddress" href="qabstractsocket.html#peerAddress" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress peerAddress() const"/>
            <function name="peerName" fullname="QAbstractSocket::peerName" href="qabstractsocket.html#peerName" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QString" signature="QString peerName() const"/>
            <function name="peerPort" fullname="QAbstractSocket::peerPort" href="qabstractsocket.html#peerPort" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 peerPort() const"/>
            <function name="protocolTag" fullname="QAbstractSocket::protocolTag" href="qabstractsocket.html#protocolTag" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QString" signature="QString protocolTag() const"/>
            <function name="proxy" fullname="QAbstractSocket::proxy" href="qabstractsocket.html#proxy" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QNetworkProxy" signature="QNetworkProxy proxy() const"/>
            <function name="proxyAuthenticationRequired" fullname="QAbstractSocket::proxyAuthenticationRequired" href="qabstractsocket.html#proxyAuthenticationRequired" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void proxyAuthenticationRequired(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)">
                <parameter type="const QNetworkProxy &amp;" name="proxy" default=""/>
                <parameter type="QAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="readBufferSize" fullname="QAbstractSocket::readBufferSize" href="qabstractsocket.html#readBufferSize" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 readBufferSize() const"/>
            <function name="readData" fullname="QAbstractSocket::readData" href="qabstractsocket.html#readData" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readData(char *data, qint64 maxSize) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="readLineData" fullname="QAbstractSocket::readLineData" href="qabstractsocket.html#readLineData" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readLineData(char *data, qint64 maxlen) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxlen" default=""/>
            </function>
            <function name="resume" fullname="QAbstractSocket::resume" href="qabstractsocket.html#resume" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void resume()"/>
            <function name="setLocalAddress" fullname="QAbstractSocket::setLocalAddress" href="qabstractsocket.html#setLocalAddress" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setLocalAddress(const QHostAddress &amp;address)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="setLocalPort" fullname="QAbstractSocket::setLocalPort" href="qabstractsocket.html#setLocalPort" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setLocalPort(quint16 port)">
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setPauseMode" fullname="QAbstractSocket::setPauseMode" href="qabstractsocket.html#setPauseMode" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setPauseMode(QAbstractSocket::PauseModes pauseMode)">
                <parameter type="QAbstractSocket::PauseModes" name="pauseMode" default=""/>
            </function>
            <function name="setPeerAddress" fullname="QAbstractSocket::setPeerAddress" href="qabstractsocket.html#setPeerAddress" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setPeerAddress(const QHostAddress &amp;address)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="setPeerName" fullname="QAbstractSocket::setPeerName" href="qabstractsocket.html#setPeerName" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setPeerName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="setPeerPort" fullname="QAbstractSocket::setPeerPort" href="qabstractsocket.html#setPeerPort" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setPeerPort(quint16 port)">
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setProtocolTag" fullname="QAbstractSocket::setProtocolTag" href="qabstractsocket.html#setProtocolTag" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setProtocolTag(const QString &amp;tag)">
                <parameter type="const QString &amp;" name="tag" default=""/>
            </function>
            <function name="setProxy" fullname="QAbstractSocket::setProxy" href="qabstractsocket.html#setProxy" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setProxy(const QNetworkProxy &amp;networkProxy)">
                <parameter type="const QNetworkProxy &amp;" name="networkProxy" default=""/>
            </function>
            <function name="setReadBufferSize" fullname="QAbstractSocket::setReadBufferSize" href="qabstractsocket.html#setReadBufferSize" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void setReadBufferSize(qint64 size)">
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="setSocketDescriptor" fullname="QAbstractSocket::setSocketDescriptor" href="qabstractsocket.html#setSocketDescriptor" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState socketState, QIODeviceBase::OpenMode openMode)">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
                <parameter type="QAbstractSocket::SocketState" name="socketState" default="ConnectedState"/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="setSocketError" fullname="QAbstractSocket::setSocketError" href="qabstractsocket.html#setSocketError" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setSocketError(QAbstractSocket::SocketError socketError)">
                <parameter type="QAbstractSocket::SocketError" name="socketError" default=""/>
            </function>
            <function name="setSocketOption" fullname="QAbstractSocket::setSocketOption" href="qabstractsocket.html#setSocketOption" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &amp;value)">
                <parameter type="QAbstractSocket::SocketOption" name="option" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setSocketState" fullname="QAbstractSocket::setSocketState" href="qabstractsocket.html#setSocketState" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" type="void" signature="void setSocketState(QAbstractSocket::SocketState state)">
                <parameter type="QAbstractSocket::SocketState" name="state" default=""/>
            </function>
            <function name="skipData" fullname="QAbstractSocket::skipData" href="qabstractsocket.html#skipData" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 skipData(qint64 maxSize) override">
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="socketDescriptor" fullname="QAbstractSocket::socketDescriptor" href="qabstractsocket.html#socketDescriptor" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" const="true" type="qintptr" signature="qintptr socketDescriptor() const"/>
            <function name="socketOption" fullname="QAbstractSocket::socketOption" href="qabstractsocket.html#socketOption" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="QVariant" signature="QVariant socketOption(QAbstractSocket::SocketOption option)">
                <parameter type="QAbstractSocket::SocketOption" name="option" default=""/>
            </function>
            <function name="socketType" fullname="QAbstractSocket::socketType" href="qabstractsocket.html#socketType" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QAbstractSocket::SocketType" signature="QAbstractSocket::SocketType socketType() const"/>
            <function name="state" fullname="QAbstractSocket::state" href="qabstractsocket.html#state" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" const="true" type="QAbstractSocket::SocketState" signature="QAbstractSocket::SocketState state() const"/>
            <function name="stateChanged" fullname="QAbstractSocket::stateChanged" href="qabstractsocket.html#stateChanged" status="active" access="public" location="qabstractsocket.h" documented="true" meta="signal" type="void" signature="void stateChanged(QAbstractSocket::SocketState socketState)">
                <parameter type="QAbstractSocket::SocketState" name="socketState" default=""/>
            </function>
            <function name="waitForBytesWritten" fullname="QAbstractSocket::waitForBytesWritten" href="qabstractsocket.html#waitForBytesWritten" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForBytesWritten(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForConnected" fullname="QAbstractSocket::waitForConnected" href="qabstractsocket.html#waitForConnected" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool waitForConnected(int msecs)">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForDisconnected" fullname="QAbstractSocket::waitForDisconnected" href="qabstractsocket.html#waitForDisconnected" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool waitForDisconnected(int msecs)">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForReadyRead" fullname="QAbstractSocket::waitForReadyRead" href="qabstractsocket.html#waitForReadyRead" status="active" access="public" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForReadyRead(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="writeData" fullname="QAbstractSocket::writeData" href="qabstractsocket.html#writeData" status="active" access="protected" location="qabstractsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 writeData(const char *data, qint64 size) override">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="~QAbstractSocket" fullname="QAbstractSocket::~QAbstractSocket" href="qabstractsocket.html#dtor.QAbstractSocket" status="active" access="public" location="qabstractsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QAbstractSocket()"/>
            <enum name="BindFlag" fullname="QAbstractSocket::BindFlag" href="qabstractsocket.html#BindFlag-enum" status="active" access="public" location="qabstractsocket.h" documented="true" typedef="QAbstractSocket::BindMode">
                <value name="DefaultForPlatform" value="0x0"/>
                <value name="ShareAddress" value="0x1"/>
                <value name="DontShareAddress" value="0x2"/>
                <value name="ReuseAddressHint" value="0x4"/>
            </enum>
            <enum name="NetworkLayerProtocol" fullname="QAbstractSocket::NetworkLayerProtocol" href="qabstractsocket.html#NetworkLayerProtocol-enum" status="active" access="public" location="qabstractsocket.h" documented="true">
                <value name="IPv4Protocol" value="0"/>
                <value name="IPv6Protocol" value="1"/>
                <value name="AnyIPProtocol" value="2"/>
                <value name="UnknownNetworkLayerProtocol" value="-1"/>
            </enum>
            <enum name="PauseMode" fullname="QAbstractSocket::PauseMode" href="qabstractsocket.html#PauseMode-enum" status="active" access="public" location="qabstractsocket.h" documented="true" typedef="QAbstractSocket::PauseModes">
                <value name="PauseNever" value="0x0"/>
                <value name="PauseOnSslErrors" value="0x1"/>
            </enum>
            <enum name="SocketError" fullname="QAbstractSocket::SocketError" href="qabstractsocket.html#SocketError-enum" status="active" access="public" location="qabstractsocket.h" documented="true">
                <value name="ConnectionRefusedError" value="0"/>
                <value name="RemoteHostClosedError" value="1"/>
                <value name="HostNotFoundError" value="2"/>
                <value name="SocketAccessError" value="3"/>
                <value name="SocketResourceError" value="4"/>
                <value name="SocketTimeoutError" value="5"/>
                <value name="DatagramTooLargeError" value="6"/>
                <value name="NetworkError" value="7"/>
                <value name="AddressInUseError" value="8"/>
                <value name="SocketAddressNotAvailableError" value="9"/>
                <value name="UnsupportedSocketOperationError" value="10"/>
                <value name="UnfinishedSocketOperationError" value="11"/>
                <value name="ProxyAuthenticationRequiredError" value="12"/>
                <value name="SslHandshakeFailedError" value="13"/>
                <value name="ProxyConnectionRefusedError" value="14"/>
                <value name="ProxyConnectionClosedError" value="15"/>
                <value name="ProxyConnectionTimeoutError" value="16"/>
                <value name="ProxyNotFoundError" value="17"/>
                <value name="ProxyProtocolError" value="18"/>
                <value name="OperationError" value="19"/>
                <value name="SslInternalError" value="20"/>
                <value name="SslInvalidUserDataError" value="21"/>
                <value name="TemporaryError" value="22"/>
                <value name="UnknownSocketError" value="-1"/>
            </enum>
            <enum name="SocketOption" fullname="QAbstractSocket::SocketOption" href="qabstractsocket.html#SocketOption-enum" status="active" access="public" location="qabstractsocket.h" documented="true">
                <value name="LowDelayOption" value="0"/>
                <value name="KeepAliveOption" value="1"/>
                <value name="MulticastTtlOption" value="2"/>
                <value name="MulticastLoopbackOption" value="3"/>
                <value name="TypeOfServiceOption" value="4"/>
                <value name="SendBufferSizeSocketOption" value="5"/>
                <value name="ReceiveBufferSizeSocketOption" value="6"/>
                <value name="PathMtuSocketOption" value="7"/>
            </enum>
            <enum name="SocketState" fullname="QAbstractSocket::SocketState" href="qabstractsocket.html#SocketState-enum" status="active" access="public" location="qabstractsocket.h" documented="true">
                <value name="UnconnectedState" value="0"/>
                <value name="HostLookupState" value="1"/>
                <value name="ConnectingState" value="2"/>
                <value name="ConnectedState" value="3"/>
                <value name="BoundState" value="4"/>
                <value name="ListeningState" value="5"/>
                <value name="ClosingState" value="6"/>
            </enum>
            <enum name="SocketType" fullname="QAbstractSocket::SocketType" href="qabstractsocket.html#SocketType-enum" status="active" access="public" location="qabstractsocket.h" documented="true">
                <value name="TcpSocket" value="0"/>
                <value name="UdpSocket" value="1"/>
                <value name="SctpSocket" value="2"/>
                <value name="UnknownSocketType" value="-1"/>
            </enum>
            <typedef name="BindMode" fullname="QAbstractSocket::BindMode" href="qabstractsocket.html#BindFlag-enum" status="active" access="public" location="qabstractsocket.h" enum="QAbstractSocket::BindFlag"/>
            <typedef name="PauseModes" fullname="QAbstractSocket::PauseModes" href="qabstractsocket.html#PauseMode-enum" status="active" access="public" location="qabstractsocket.h" enum="QAbstractSocket::PauseMode"/>
        </class>
        <class threadsafety="reentrant" name="QAuthenticator" href="qauthenticator.html" status="active" access="public" location="qauthenticator.h" documented="true" groups="network" module="QtNetwork" brief="Authentication object">
            <target name="qauthenticator-options"/>
            <contents name="options" title="Options" level="1"/>
            <contents name="basic" title="Basic" level="2"/>
            <contents name="ntlm-version-2" title="NTLM version 2" level="2"/>
            <contents name="digest-md5" title="Digest-MD5" level="2"/>
            <contents name="spnego-negotiate" title="SPNEGO/Negotiate" level="2"/>
            <function name="QAuthenticator" fullname="QAuthenticator::QAuthenticator" href="qauthenticator.html#QAuthenticator" status="active" access="public" location="qauthenticator.h" documented="true" meta="constructor" signature="QAuthenticator()"/>
            <function name="QAuthenticator" fullname="QAuthenticator::QAuthenticator" href="qauthenticator.html#QAuthenticator-1" status="active" access="public" location="qauthenticator.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QAuthenticator(const QAuthenticator &amp;other)">
                <parameter type="const QAuthenticator &amp;" name="other" default=""/>
            </function>
            <function name="isNull" fullname="QAuthenticator::isNull" href="qauthenticator.html#isNull" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="operator!=" fullname="QAuthenticator::operator!=" href="qauthenticator.html#operator-not-eq" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QAuthenticator &amp;other) const">
                <parameter type="const QAuthenticator &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QAuthenticator::operator=" href="qauthenticator.html#operator-eq" status="active" access="public" location="qauthenticator.h" documented="true" meta="copy-assign" type="QAuthenticator &amp;" signature="QAuthenticator &amp; operator=(const QAuthenticator &amp;other)">
                <parameter type="const QAuthenticator &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QAuthenticator::operator==" href="qauthenticator.html#operator-eq-eq" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QAuthenticator &amp;other) const">
                <parameter type="const QAuthenticator &amp;" name="other" default=""/>
            </function>
            <function name="option" fullname="QAuthenticator::option" href="qauthenticator.html#option" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant option(const QString &amp;opt) const">
                <parameter type="const QString &amp;" name="opt" default=""/>
            </function>
            <function name="options" fullname="QAuthenticator::options" href="qauthenticator.html#options" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="QVariantHash" signature="QVariantHash options() const"/>
            <function name="password" fullname="QAuthenticator::password" href="qauthenticator.html#password" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="QString" signature="QString password() const"/>
            <function name="realm" fullname="QAuthenticator::realm" href="qauthenticator.html#realm" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="QString" signature="QString realm() const"/>
            <function name="setOption" fullname="QAuthenticator::setOption" href="qauthenticator.html#setOption" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" type="void" signature="void setOption(const QString &amp;opt, const QVariant &amp;value)">
                <parameter type="const QString &amp;" name="opt" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setPassword" fullname="QAuthenticator::setPassword" href="qauthenticator.html#setPassword" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" type="void" signature="void setPassword(const QString &amp;password)">
                <parameter type="const QString &amp;" name="password" default=""/>
            </function>
            <function name="setUser" fullname="QAuthenticator::setUser" href="qauthenticator.html#setUser" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" type="void" signature="void setUser(const QString &amp;user)">
                <parameter type="const QString &amp;" name="user" default=""/>
            </function>
            <function name="user" fullname="QAuthenticator::user" href="qauthenticator.html#user" status="active" access="public" location="qauthenticator.h" documented="true" meta="plain" const="true" type="QString" signature="QString user() const"/>
            <function name="~QAuthenticator" fullname="QAuthenticator::~QAuthenticator" href="qauthenticator.html#dtor.QAuthenticator" status="active" access="public" location="qauthenticator.h" documented="true" meta="destructor" noexcept="true" signature="~QAuthenticator()"/>
        </class>
        <class name="QDnsDomainNameRecord" href="qdnsdomainnamerecord.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores information about a domain name record">
            <function name="QDnsDomainNameRecord" fullname="QDnsDomainNameRecord::QDnsDomainNameRecord" href="qdnsdomainnamerecord.html#QDnsDomainNameRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" signature="QDnsDomainNameRecord()"/>
            <function name="QDnsDomainNameRecord" fullname="QDnsDomainNameRecord::QDnsDomainNameRecord" href="qdnsdomainnamerecord.html#QDnsDomainNameRecord-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QDnsDomainNameRecord(const QDnsDomainNameRecord &amp;other)">
                <parameter type="const QDnsDomainNameRecord &amp;" name="other" default=""/>
            </function>
            <function name="name" fullname="QDnsDomainNameRecord::name" href="qdnsdomainnamerecord.html#name" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator=" fullname="QDnsDomainNameRecord::operator=" href="qdnsdomainnamerecord.html#operator-eq-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QDnsDomainNameRecord &amp;" signature="QDnsDomainNameRecord &amp; operator=(const QDnsDomainNameRecord &amp;other)">
                <parameter type="const QDnsDomainNameRecord &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QDnsDomainNameRecord::swap" href="qdnsdomainnamerecord.html#swap" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QDnsDomainNameRecord &amp;other)">
                <parameter type="QDnsDomainNameRecord &amp;" name="other" default=""/>
            </function>
            <function name="timeToLive" fullname="QDnsDomainNameRecord::timeToLive" href="qdnsdomainnamerecord.html#timeToLive" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 timeToLive() const"/>
            <function name="value" fullname="QDnsDomainNameRecord::value" href="qdnsdomainnamerecord.html#value" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString value() const"/>
            <function name="~QDnsDomainNameRecord" fullname="QDnsDomainNameRecord::~QDnsDomainNameRecord" href="qdnsdomainnamerecord.html#dtor.QDnsDomainNameRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" noexcept="true" signature="~QDnsDomainNameRecord()"/>
        </class>
        <class name="QDnsHostAddressRecord" href="qdnshostaddressrecord.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores information about a host address record">
            <function name="QDnsHostAddressRecord" fullname="QDnsHostAddressRecord::QDnsHostAddressRecord" href="qdnshostaddressrecord.html#QDnsHostAddressRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" signature="QDnsHostAddressRecord()"/>
            <function name="QDnsHostAddressRecord" fullname="QDnsHostAddressRecord::QDnsHostAddressRecord" href="qdnshostaddressrecord.html#QDnsHostAddressRecord-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QDnsHostAddressRecord(const QDnsHostAddressRecord &amp;other)">
                <parameter type="const QDnsHostAddressRecord &amp;" name="other" default=""/>
            </function>
            <function name="name" fullname="QDnsHostAddressRecord::name" href="qdnshostaddressrecord.html#name" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator=" fullname="QDnsHostAddressRecord::operator=" href="qdnshostaddressrecord.html#operator-eq-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QDnsHostAddressRecord &amp;" signature="QDnsHostAddressRecord &amp; operator=(const QDnsHostAddressRecord &amp;other)">
                <parameter type="const QDnsHostAddressRecord &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QDnsHostAddressRecord::swap" href="qdnshostaddressrecord.html#swap" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QDnsHostAddressRecord &amp;other)">
                <parameter type="QDnsHostAddressRecord &amp;" name="other" default=""/>
            </function>
            <function name="timeToLive" fullname="QDnsHostAddressRecord::timeToLive" href="qdnshostaddressrecord.html#timeToLive" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 timeToLive() const"/>
            <function name="value" fullname="QDnsHostAddressRecord::value" href="qdnshostaddressrecord.html#value" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress value() const"/>
            <function name="~QDnsHostAddressRecord" fullname="QDnsHostAddressRecord::~QDnsHostAddressRecord" href="qdnshostaddressrecord.html#dtor.QDnsHostAddressRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" noexcept="true" signature="~QDnsHostAddressRecord()"/>
        </class>
        <class name="QDnsLookup" href="qdnslookup.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network" bases="QObject" module="QtNetwork" brief="Represents a DNS lookup">
            <function name="QDnsLookup" fullname="QDnsLookup::QDnsLookup" href="qdnslookup.html#QDnsLookup" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" explicit="true" signature="QDnsLookup(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="QDnsLookup" fullname="QDnsLookup::QDnsLookup" href="qdnslookup.html#QDnsLookup-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="QDnsLookup(QDnsLookup::Type type, const QString &amp;name, QObject *parent)">
                <parameter type="QDnsLookup::Type" name="type" default=""/>
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="QDnsLookup" fullname="QDnsLookup::QDnsLookup" href="qdnslookup.html#QDnsLookup-2" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" overload="true" overload-number="2" signature="QDnsLookup(QDnsLookup::Type type, const QString &amp;name, const QHostAddress &amp;nameserver, QObject *parent)">
                <parameter type="QDnsLookup::Type" name="type" default=""/>
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="const QHostAddress &amp;" name="nameserver" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="QDnsLookup" fullname="QDnsLookup::QDnsLookup" href="qdnslookup.html#QDnsLookup-3" status="active" access="public" location="qdnslookup.h" documented="true" since="6.6" meta="constructor" overload="true" overload-number="3" signature="QDnsLookup(QDnsLookup::Type type, const QString &amp;name, const QHostAddress &amp;nameserver, quint16 port, QObject *parent)">
                <parameter type="QDnsLookup::Type" name="type" default=""/>
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="const QHostAddress &amp;" name="nameserver" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="abort" fullname="QDnsLookup::abort" href="qdnslookup.html#abort" status="active" access="public" location="qdnslookup.h" documented="true" meta="slot" type="void" signature="void abort()"/>
            <function name="bindableName" fullname="QDnsLookup::bindableName" href="qdnslookup.html#name-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="name" type="QBindable&lt;QString&gt;" signature="QBindable&lt;QString&gt; bindableName()"/>
            <function name="bindableNameserver" fullname="QDnsLookup::bindableNameserver" href="qdnslookup.html#nameserver-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="nameserver" type="QBindable&lt;QHostAddress&gt;" signature="QBindable&lt;QHostAddress&gt; bindableNameserver()"/>
            <function name="bindableNameserverPort" fullname="QDnsLookup::bindableNameserverPort" href="qdnslookup.html#nameserverPort-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="nameserverPort" type="QBindable&lt;quint16&gt;" signature="QBindable&lt;quint16&gt; bindableNameserverPort()"/>
            <function name="bindableType" fullname="QDnsLookup::bindableType" href="qdnslookup.html#type-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="type" type="QBindable&lt;QDnsLookup::Type&gt;" signature="QBindable&lt;QDnsLookup::Type&gt; bindableType()"/>
            <function name="canonicalNameRecords" fullname="QDnsLookup::canonicalNameRecords" href="qdnslookup.html#canonicalNameRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsDomainNameRecord&gt;" signature="QList&lt;QDnsDomainNameRecord&gt; canonicalNameRecords() const"/>
            <function name="error" fullname="QDnsLookup::error" href="qdnslookup.html#error-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="error" type="QDnsLookup::Error" signature="QDnsLookup::Error error() const"/>
            <function name="errorString" fullname="QDnsLookup::errorString" href="qdnslookup.html#errorString-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="errorString" type="QString" signature="QString errorString() const"/>
            <function name="finished" fullname="QDnsLookup::finished" href="qdnslookup.html#finished" status="active" access="public" location="qdnslookup.h" documented="true" meta="signal" associated-property="error,errorString" type="void" signature="void finished()"/>
            <function name="hostAddressRecords" fullname="QDnsLookup::hostAddressRecords" href="qdnslookup.html#hostAddressRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsHostAddressRecord&gt;" signature="QList&lt;QDnsHostAddressRecord&gt; hostAddressRecords() const"/>
            <function name="isFinished" fullname="QDnsLookup::isFinished" href="qdnslookup.html#isFinished" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="bool" signature="bool isFinished() const"/>
            <function name="lookup" fullname="QDnsLookup::lookup" href="qdnslookup.html#lookup" status="active" access="public" location="qdnslookup.h" documented="true" meta="slot" type="void" signature="void lookup()"/>
            <function name="mailExchangeRecords" fullname="QDnsLookup::mailExchangeRecords" href="qdnslookup.html#mailExchangeRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsMailExchangeRecord&gt;" signature="QList&lt;QDnsMailExchangeRecord&gt; mailExchangeRecords() const"/>
            <function name="name" fullname="QDnsLookup::name" href="qdnslookup.html#name-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="name" type="QString" signature="QString name() const"/>
            <function name="nameChanged" fullname="QDnsLookup::nameChanged" href="qdnslookup.html#nameChanged" status="active" access="public" location="qdnslookup.h" documented="true" meta="signal" associated-property="name" type="void" signature="void nameChanged(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="nameServerRecords" fullname="QDnsLookup::nameServerRecords" href="qdnslookup.html#nameServerRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsDomainNameRecord&gt;" signature="QList&lt;QDnsDomainNameRecord&gt; nameServerRecords() const"/>
            <function name="nameserver" fullname="QDnsLookup::nameserver" href="qdnslookup.html#nameserver-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="nameserver" type="QHostAddress" signature="QHostAddress nameserver() const"/>
            <function name="nameserverChanged" fullname="QDnsLookup::nameserverChanged" href="qdnslookup.html#nameserver-prop" status="active" access="public" location="qdnslookup.h" meta="signal" associated-property="nameserver" type="void" signature="void nameserverChanged(const QHostAddress &amp;nameserver)">
                <parameter type="const QHostAddress &amp;" name="nameserver" default=""/>
            </function>
            <function name="nameserverPort" fullname="QDnsLookup::nameserverPort" href="qdnslookup.html#nameserverPort-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="nameserverPort" type="quint16" signature="quint16 nameserverPort() const"/>
            <function name="nameserverPortChanged" fullname="QDnsLookup::nameserverPortChanged" href="qdnslookup.html#nameserverPort-prop" status="active" access="public" location="qdnslookup.h" meta="signal" associated-property="nameserverPort" type="void" signature="void nameserverPortChanged(quint16 port)">
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="pointerRecords" fullname="QDnsLookup::pointerRecords" href="qdnslookup.html#pointerRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsDomainNameRecord&gt;" signature="QList&lt;QDnsDomainNameRecord&gt; pointerRecords() const"/>
            <function name="serviceRecords" fullname="QDnsLookup::serviceRecords" href="qdnslookup.html#serviceRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsServiceRecord&gt;" signature="QList&lt;QDnsServiceRecord&gt; serviceRecords() const"/>
            <function name="setName" fullname="QDnsLookup::setName" href="qdnslookup.html#name-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="name" type="void" signature="void setName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="setNameserver" fullname="QDnsLookup::setNameserver" href="qdnslookup.html#nameserver-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="nameserver" type="void" signature="void setNameserver(const QHostAddress &amp;nameserver)">
                <parameter type="const QHostAddress &amp;" name="nameserver" default=""/>
            </function>
            <function name="setNameserver" fullname="QDnsLookup::setNameserver" href="qdnslookup.html#setNameserver-1" status="active" access="public" location="qdnslookup.h" documented="true" since="6.6" meta="plain" overload="true" overload-number="1" associated-property="nameserver" type="void" signature="void setNameserver(const QHostAddress &amp;nameserver, quint16 port)">
                <parameter type="const QHostAddress &amp;" name="nameserver" default=""/>
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setNameserverPort" fullname="QDnsLookup::setNameserverPort" href="qdnslookup.html#nameserverPort-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="nameserverPort" type="void" signature="void setNameserverPort(quint16 port)">
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setType" fullname="QDnsLookup::setType" href="qdnslookup.html#type-prop" status="active" access="public" location="qdnslookup.h" meta="plain" associated-property="type" type="void" signature="void setType(QDnsLookup::Type)">
                <parameter type="QDnsLookup::Type" name="" default=""/>
            </function>
            <function name="textRecords" fullname="QDnsLookup::textRecords" href="qdnslookup.html#textRecords" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QDnsTextRecord&gt;" signature="QList&lt;QDnsTextRecord&gt; textRecords() const"/>
            <function name="type" fullname="QDnsLookup::type" href="qdnslookup.html#type-prop" status="active" access="public" location="qdnslookup.h" meta="plain" const="true" associated-property="type" type="QDnsLookup::Type" signature="QDnsLookup::Type type() const"/>
            <function name="typeChanged" fullname="QDnsLookup::typeChanged" href="qdnslookup.html#typeChanged" status="active" access="public" location="qdnslookup.h" documented="true" meta="signal" associated-property="type" type="void" signature="void typeChanged(QDnsLookup::Type type)">
                <parameter type="QDnsLookup::Type" name="type" default=""/>
            </function>
            <function name="~QDnsLookup" fullname="QDnsLookup::~QDnsLookup" href="qdnslookup.html#dtor.QDnsLookup" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QDnsLookup()"/>
            <enum name="Error" fullname="QDnsLookup::Error" href="qdnslookup.html#Error-enum" status="active" access="public" location="qdnslookup.h" documented="true">
                <value name="NoError" value="0"/>
                <value name="ResolverError" value="1"/>
                <value name="OperationCancelledError" value="2"/>
                <value name="InvalidRequestError" value="3"/>
                <value name="InvalidReplyError" value="4"/>
                <value name="ServerFailureError" value="5"/>
                <value name="ServerRefusedError" value="6"/>
                <value name="NotFoundError" value="7"/>
                <value name="TimeoutError" value="8"/>
            </enum>
            <enum name="Type" fullname="QDnsLookup::Type" href="qdnslookup.html#Type-enum" status="active" access="public" location="qdnslookup.h" documented="true">
                <value name="A" value="1"/>
                <value name="AAAA" value="28"/>
                <value name="ANY" value="255"/>
                <value name="CNAME" value="5"/>
                <value name="MX" value="15"/>
                <value name="NS" value="2"/>
                <value name="PTR" value="12"/>
                <value name="SRV" value="33"/>
                <value name="TXT" value="16"/>
            </enum>
            <property name="error" fullname="QDnsLookup::error" href="qdnslookup.html#error-prop" status="active" access="public" location="qdnslookup.h" documented="true" writable="false" brief="The type of error that occurred if the DNS lookup failed, or NoError">
                <getter name="error"/>
                <notifier name="finished"/>
            </property>
            <property name="errorString" fullname="QDnsLookup::errorString" href="qdnslookup.html#errorString-prop" status="active" access="public" location="qdnslookup.h" documented="true" writable="false" brief="Human-readable description of the error if the DNS lookup failed">
                <getter name="errorString"/>
                <notifier name="finished"/>
            </property>
            <property name="name" fullname="QDnsLookup::name" href="qdnslookup.html#name-prop" status="active" access="public" location="qdnslookup.h" documented="true" bindable="true" brief="The name to lookup">
                <getter name="name"/>
                <setter name="setName"/>
                <notifier name="nameChanged"/>
                <bindable name="bindableName"/>
            </property>
            <property name="nameserver" fullname="QDnsLookup::nameserver" href="qdnslookup.html#nameserver-prop" status="active" access="public" location="qdnslookup.h" documented="true" bindable="true" brief="The nameserver to use for DNS lookup">
                <getter name="nameserver"/>
                <setter name="setNameserver"/>
                <setter name="setNameserver"/>
                <notifier name="nameserverChanged"/>
                <bindable name="bindableNameserver"/>
            </property>
            <property name="nameserverPort" fullname="QDnsLookup::nameserverPort" href="qdnslookup.html#nameserverPort-prop" status="active" access="public" location="qdnslookup.h" since="6.6" documented="true" bindable="true" brief="The port number of nameserver to use for DNS lookup">
                <getter name="nameserverPort"/>
                <setter name="setNameserverPort"/>
                <notifier name="nameserverPortChanged"/>
                <bindable name="bindableNameserverPort"/>
            </property>
            <property name="type" fullname="QDnsLookup::type" href="qdnslookup.html#type-prop" status="active" access="public" location="qdnslookup.h" documented="true" bindable="true" brief="The type of DNS lookup">
                <getter name="type"/>
                <setter name="setType"/>
                <notifier name="typeChanged"/>
                <bindable name="bindableType"/>
            </property>
        </class>
        <class name="QDnsMailExchangeRecord" href="qdnsmailexchangerecord.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores information about a DNS MX record">
            <function name="QDnsMailExchangeRecord" fullname="QDnsMailExchangeRecord::QDnsMailExchangeRecord" href="qdnsmailexchangerecord.html#QDnsMailExchangeRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" signature="QDnsMailExchangeRecord()"/>
            <function name="QDnsMailExchangeRecord" fullname="QDnsMailExchangeRecord::QDnsMailExchangeRecord" href="qdnsmailexchangerecord.html#QDnsMailExchangeRecord-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QDnsMailExchangeRecord(const QDnsMailExchangeRecord &amp;other)">
                <parameter type="const QDnsMailExchangeRecord &amp;" name="other" default=""/>
            </function>
            <function name="exchange" fullname="QDnsMailExchangeRecord::exchange" href="qdnsmailexchangerecord.html#exchange" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString exchange() const"/>
            <function name="name" fullname="QDnsMailExchangeRecord::name" href="qdnsmailexchangerecord.html#name" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator=" fullname="QDnsMailExchangeRecord::operator=" href="qdnsmailexchangerecord.html#operator-eq-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QDnsMailExchangeRecord &amp;" signature="QDnsMailExchangeRecord &amp; operator=(const QDnsMailExchangeRecord &amp;other)">
                <parameter type="const QDnsMailExchangeRecord &amp;" name="other" default=""/>
            </function>
            <function name="preference" fullname="QDnsMailExchangeRecord::preference" href="qdnsmailexchangerecord.html#preference" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 preference() const"/>
            <function name="swap" fullname="QDnsMailExchangeRecord::swap" href="qdnsmailexchangerecord.html#swap" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QDnsMailExchangeRecord &amp;other)">
                <parameter type="QDnsMailExchangeRecord &amp;" name="other" default=""/>
            </function>
            <function name="timeToLive" fullname="QDnsMailExchangeRecord::timeToLive" href="qdnsmailexchangerecord.html#timeToLive" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 timeToLive() const"/>
            <function name="~QDnsMailExchangeRecord" fullname="QDnsMailExchangeRecord::~QDnsMailExchangeRecord" href="qdnsmailexchangerecord.html#dtor.QDnsMailExchangeRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" noexcept="true" signature="~QDnsMailExchangeRecord()"/>
        </class>
        <class name="QDnsServiceRecord" href="qdnsservicerecord.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores information about a DNS SRV record">
            <function name="QDnsServiceRecord" fullname="QDnsServiceRecord::QDnsServiceRecord" href="qdnsservicerecord.html#QDnsServiceRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" signature="QDnsServiceRecord()"/>
            <function name="QDnsServiceRecord" fullname="QDnsServiceRecord::QDnsServiceRecord" href="qdnsservicerecord.html#QDnsServiceRecord-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QDnsServiceRecord(const QDnsServiceRecord &amp;other)">
                <parameter type="const QDnsServiceRecord &amp;" name="other" default=""/>
            </function>
            <function name="name" fullname="QDnsServiceRecord::name" href="qdnsservicerecord.html#name" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator=" fullname="QDnsServiceRecord::operator=" href="qdnsservicerecord.html#operator-eq-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QDnsServiceRecord &amp;" signature="QDnsServiceRecord &amp; operator=(const QDnsServiceRecord &amp;other)">
                <parameter type="const QDnsServiceRecord &amp;" name="other" default=""/>
            </function>
            <function name="port" fullname="QDnsServiceRecord::port" href="qdnsservicerecord.html#port" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 port() const"/>
            <function name="priority" fullname="QDnsServiceRecord::priority" href="qdnsservicerecord.html#priority" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 priority() const"/>
            <function name="swap" fullname="QDnsServiceRecord::swap" href="qdnsservicerecord.html#swap" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QDnsServiceRecord &amp;other)">
                <parameter type="QDnsServiceRecord &amp;" name="other" default=""/>
            </function>
            <function name="target" fullname="QDnsServiceRecord::target" href="qdnsservicerecord.html#target" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString target() const"/>
            <function name="timeToLive" fullname="QDnsServiceRecord::timeToLive" href="qdnsservicerecord.html#timeToLive" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 timeToLive() const"/>
            <function name="weight" fullname="QDnsServiceRecord::weight" href="qdnsservicerecord.html#weight" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 weight() const"/>
            <function name="~QDnsServiceRecord" fullname="QDnsServiceRecord::~QDnsServiceRecord" href="qdnsservicerecord.html#dtor.QDnsServiceRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" noexcept="true" signature="~QDnsServiceRecord()"/>
        </class>
        <class name="QDnsTextRecord" href="qdnstextrecord.html" status="active" access="public" location="qdnslookup.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores information about a DNS TXT record">
            <function name="QDnsTextRecord" fullname="QDnsTextRecord::QDnsTextRecord" href="qdnstextrecord.html#QDnsTextRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="constructor" signature="QDnsTextRecord()"/>
            <function name="QDnsTextRecord" fullname="QDnsTextRecord::QDnsTextRecord" href="qdnstextrecord.html#QDnsTextRecord-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QDnsTextRecord(const QDnsTextRecord &amp;other)">
                <parameter type="const QDnsTextRecord &amp;" name="other" default=""/>
            </function>
            <function name="name" fullname="QDnsTextRecord::name" href="qdnstextrecord.html#name" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator=" fullname="QDnsTextRecord::operator=" href="qdnstextrecord.html#operator-eq-1" status="active" access="public" location="qdnslookup.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QDnsTextRecord &amp;" signature="QDnsTextRecord &amp; operator=(const QDnsTextRecord &amp;other)">
                <parameter type="const QDnsTextRecord &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QDnsTextRecord::swap" href="qdnstextrecord.html#swap" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QDnsTextRecord &amp;other)">
                <parameter type="QDnsTextRecord &amp;" name="other" default=""/>
            </function>
            <function name="timeToLive" fullname="QDnsTextRecord::timeToLive" href="qdnstextrecord.html#timeToLive" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 timeToLive() const"/>
            <function name="values" fullname="QDnsTextRecord::values" href="qdnstextrecord.html#values" status="active" access="public" location="qdnslookup.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; values() const"/>
            <function name="~QDnsTextRecord" fullname="QDnsTextRecord::~QDnsTextRecord" href="qdnstextrecord.html#dtor.QDnsTextRecord" status="active" access="public" location="qdnslookup.h" documented="true" meta="destructor" noexcept="true" signature="~QDnsTextRecord()"/>
        </class>
        <class name="QDtls" href="qdtls.html" status="active" access="public" location="qdtls.h" documented="true" groups="network,ssl" bases="QObject" module="QtNetwork" brief="This class provides encryption for UDP sockets">
            <function name="QDtls" fullname="QDtls::QDtls" href="qdtls.html#QDtls" status="active" access="public" location="qdtls.h" documented="true" meta="constructor" explicit="true" signature="QDtls(QSslSocket::SslMode mode, QObject *parent)">
                <parameter type="QSslSocket::SslMode" name="mode" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="abortHandshake" fullname="QDtls::abortHandshake" href="qdtls.html#abortHandshake" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool abortHandshake(QUdpSocket *socket)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
            </function>
            <function name="cookieGeneratorParameters" fullname="QDtls::cookieGeneratorParameters" href="qdtls.html#cookieGeneratorParameters" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QDtls::GeneratorParameters" signature="QDtls::GeneratorParameters cookieGeneratorParameters() const"/>
            <function name="decryptDatagram" fullname="QDtls::decryptDatagram" href="qdtls.html#decryptDatagram" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="QByteArray" signature="QByteArray decryptDatagram(QUdpSocket *socket, const QByteArray &amp;dgram)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
                <parameter type="const QByteArray &amp;" name="dgram" default=""/>
            </function>
            <function name="doHandshake" fullname="QDtls::doHandshake" href="qdtls.html#doHandshake" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool doHandshake(QUdpSocket *socket, const QByteArray &amp;dgram)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
                <parameter type="const QByteArray &amp;" name="dgram" default="{}"/>
            </function>
            <function name="dtlsConfiguration" fullname="QDtls::dtlsConfiguration" href="qdtls.html#dtlsConfiguration" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration dtlsConfiguration() const"/>
            <function name="dtlsError" fullname="QDtls::dtlsError" href="qdtls.html#dtlsError" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QDtlsError" signature="QDtlsError dtlsError() const"/>
            <function name="dtlsErrorString" fullname="QDtls::dtlsErrorString" href="qdtls.html#dtlsErrorString" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QString" signature="QString dtlsErrorString() const"/>
            <function name="handleTimeout" fullname="QDtls::handleTimeout" href="qdtls.html#handleTimeout" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool handleTimeout(QUdpSocket *socket)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
            </function>
            <function name="handshakeState" fullname="QDtls::handshakeState" href="qdtls.html#handshakeState" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QDtls::HandshakeState" signature="QDtls::HandshakeState handshakeState() const"/>
            <function name="handshakeTimeout" fullname="QDtls::handshakeTimeout" href="qdtls.html#handshakeTimeout" status="active" access="public" location="qdtls.h" documented="true" meta="signal" type="void" signature="void handshakeTimeout()"/>
            <function name="ignoreVerificationErrors" fullname="QDtls::ignoreVerificationErrors" href="qdtls.html#ignoreVerificationErrors" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="void" signature="void ignoreVerificationErrors(const QList&lt;QSslError&gt; &amp;errorsToIgnore)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errorsToIgnore" default=""/>
            </function>
            <function name="isConnectionEncrypted" fullname="QDtls::isConnectionEncrypted" href="qdtls.html#isConnectionEncrypted" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="bool" signature="bool isConnectionEncrypted() const"/>
            <function name="mtuHint" fullname="QDtls::mtuHint" href="qdtls.html#mtuHint" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 mtuHint() const"/>
            <function name="peerAddress" fullname="QDtls::peerAddress" href="qdtls.html#peerAddress" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress peerAddress() const"/>
            <function name="peerPort" fullname="QDtls::peerPort" href="qdtls.html#peerPort" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 peerPort() const"/>
            <function name="peerVerificationErrors" fullname="QDtls::peerVerificationErrors" href="qdtls.html#peerVerificationErrors" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QList&lt;QSslError&gt;" signature="QList&lt;QSslError&gt; peerVerificationErrors() const"/>
            <function name="peerVerificationName" fullname="QDtls::peerVerificationName" href="qdtls.html#peerVerificationName" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QString" signature="QString peerVerificationName() const"/>
            <function name="pskRequired" fullname="QDtls::pskRequired" href="qdtls.html#pskRequired" status="active" access="public" location="qdtls.h" documented="true" meta="signal" type="void" signature="void pskRequired(QSslPreSharedKeyAuthenticator *authenticator)">
                <parameter type="QSslPreSharedKeyAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="resumeHandshake" fullname="QDtls::resumeHandshake" href="qdtls.html#resumeHandshake" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool resumeHandshake(QUdpSocket *socket)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
            </function>
            <function name="sessionCipher" fullname="QDtls::sessionCipher" href="qdtls.html#sessionCipher" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QSslCipher" signature="QSslCipher sessionCipher() const"/>
            <function name="sessionProtocol" fullname="QDtls::sessionProtocol" href="qdtls.html#sessionProtocol" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol sessionProtocol() const"/>
            <function name="setCookieGeneratorParameters" fullname="QDtls::setCookieGeneratorParameters" href="qdtls.html#setCookieGeneratorParameters" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool setCookieGeneratorParameters(const QDtls::GeneratorParameters &amp;params)">
                <parameter type="const QDtls::GeneratorParameters &amp;" name="params" default=""/>
            </function>
            <function name="setDtlsConfiguration" fullname="QDtls::setDtlsConfiguration" href="qdtls.html#setDtlsConfiguration" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool setDtlsConfiguration(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="setMtuHint" fullname="QDtls::setMtuHint" href="qdtls.html#setMtuHint" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="void" signature="void setMtuHint(quint16 mtuHint)">
                <parameter type="quint16" name="mtuHint" default=""/>
            </function>
            <function name="setPeer" fullname="QDtls::setPeer" href="qdtls.html#setPeer" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool setPeer(const QHostAddress &amp;address, quint16 port, const QString &amp;verificationName)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="const QString &amp;" name="verificationName" default="{}"/>
            </function>
            <function name="setPeerVerificationName" fullname="QDtls::setPeerVerificationName" href="qdtls.html#setPeerVerificationName" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool setPeerVerificationName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="shutdown" fullname="QDtls::shutdown" href="qdtls.html#shutdown" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool shutdown(QUdpSocket *socket)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
            </function>
            <function name="sslMode" fullname="QDtls::sslMode" href="qdtls.html#sslMode" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QSslSocket::SslMode" signature="QSslSocket::SslMode sslMode() const"/>
            <function name="writeDatagramEncrypted" fullname="QDtls::writeDatagramEncrypted" href="qdtls.html#writeDatagramEncrypted" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="qint64" signature="qint64 writeDatagramEncrypted(QUdpSocket *socket, const QByteArray &amp;dgram)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
                <parameter type="const QByteArray &amp;" name="dgram" default=""/>
            </function>
            <function name="~QDtls" fullname="QDtls::~QDtls" href="qdtls.html#dtor.QDtls" status="active" access="public" location="qdtls.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QDtls()"/>
            <enum name="HandshakeState" fullname="QDtls::HandshakeState" href="qdtls.html#HandshakeState-enum" status="active" access="public" location="qdtls.h" documented="true" groups="network,ssl">
                <value name="HandshakeNotStarted" value="0"/>
                <value name="HandshakeInProgress" value="1"/>
                <value name="PeerVerificationFailed" value="2"/>
                <value name="HandshakeComplete" value="3"/>
            </enum>
            <enum name="QDtlsError" href="qdtls.html#QDtlsError-enum" status="active" access="public" location="qdtls.h" related="13" documented="true" groups="network,ssl" scoped="true">
                <value name="NoError" value="0"/>
                <value name="InvalidInputParameters" value="1"/>
                <value name="InvalidOperation" value="2"/>
                <value name="UnderlyingSocketError" value="3"/>
                <value name="RemoteClosedConnectionError" value="4"/>
                <value name="PeerVerificationError" value="5"/>
                <value name="TlsInitializationError" value="6"/>
                <value name="TlsFatalError" value="7"/>
                <value name="TlsNonFatalError" value="8"/>
            </enum>
            <typedef name="GeneratorParameters" fullname="QDtls::GeneratorParameters" href="qdtls.html#GeneratorParameters-typedef" status="active" access="public" location="qdtls.h" documented="true" aliasedtype="QDtlsClientVerifier::GeneratorParameters"/>
        </class>
        <class name="QDtlsClientVerifier" href="qdtlsclientverifier.html" status="active" access="public" location="qdtls.h" documented="true" groups="network,ssl" bases="QObject" module="QtNetwork" brief="This class implements server-side DTLS cookie generation and verification">
            <function name="QDtlsClientVerifier" fullname="QDtlsClientVerifier::QDtlsClientVerifier" href="qdtlsclientverifier.html#QDtlsClientVerifier" status="active" access="public" location="qdtls.h" documented="true" meta="constructor" explicit="true" signature="QDtlsClientVerifier(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="cookieGeneratorParameters" fullname="QDtlsClientVerifier::cookieGeneratorParameters" href="qdtlsclientverifier.html#cookieGeneratorParameters" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QDtlsClientVerifier::GeneratorParameters" signature="QDtlsClientVerifier::GeneratorParameters cookieGeneratorParameters() const"/>
            <function name="dtlsError" fullname="QDtlsClientVerifier::dtlsError" href="qdtlsclientverifier.html#dtlsError" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QDtlsError" signature="QDtlsError dtlsError() const"/>
            <function name="dtlsErrorString" fullname="QDtlsClientVerifier::dtlsErrorString" href="qdtlsclientverifier.html#dtlsErrorString" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QString" signature="QString dtlsErrorString() const"/>
            <function name="setCookieGeneratorParameters" fullname="QDtlsClientVerifier::setCookieGeneratorParameters" href="qdtlsclientverifier.html#setCookieGeneratorParameters" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool setCookieGeneratorParameters(const QDtlsClientVerifier::GeneratorParameters &amp;params)">
                <parameter type="const QDtlsClientVerifier::GeneratorParameters &amp;" name="params" default=""/>
            </function>
            <function name="verifiedHello" fullname="QDtlsClientVerifier::verifiedHello" href="qdtlsclientverifier.html#verifiedHello" status="active" access="public" location="qdtls.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray verifiedHello() const"/>
            <function name="verifyClient" fullname="QDtlsClientVerifier::verifyClient" href="qdtlsclientverifier.html#verifyClient" status="active" access="public" location="qdtls.h" documented="true" meta="plain" type="bool" signature="bool verifyClient(QUdpSocket *socket, const QByteArray &amp;dgram, const QHostAddress &amp;address, quint16 port)">
                <parameter type="QUdpSocket *" name="socket" default=""/>
                <parameter type="const QByteArray &amp;" name="dgram" default=""/>
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="~QDtlsClientVerifier" fullname="QDtlsClientVerifier::~QDtlsClientVerifier" href="qdtlsclientverifier.html#dtor.QDtlsClientVerifier" status="active" access="public" location="qdtls.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QDtlsClientVerifier()"/>
            <struct name="GeneratorParameters" fullname="QDtlsClientVerifier::GeneratorParameters" href="qdtlsclientverifier-generatorparameters.html" status="active" access="public" location="qdtls.h" documented="true" groups="network,ssl" module="QtNetwork" brief="This class defines parameters for DTLS cookie generator">
                <function name="GeneratorParameters" fullname="QDtlsClientVerifier::GeneratorParameters::GeneratorParameters" href="qdtlsclientverifier-generatorparameters.html#GeneratorParameters" status="active" access="public" location="qdtls.h" documented="true" meta="constructor" signature="GeneratorParameters()"/>
                <function name="GeneratorParameters" fullname="QDtlsClientVerifier::GeneratorParameters::GeneratorParameters" href="qdtlsclientverifier-generatorparameters.html#GeneratorParameters-1" status="active" access="public" location="qdtls.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="GeneratorParameters(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;secret)">
                    <parameter type="QCryptographicHash::Algorithm" name="algorithm" default=""/>
                    <parameter type="const QByteArray &amp;" name="secret" default=""/>
                </function>
            </struct>
        </class>
        <class name="QHostAddress" href="qhostaddress.html" status="active" access="public" location="qhostaddress.h" documented="true" groups="network,shared" module="QtNetwork" brief="IP address">
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" signature="QHostAddress()"/>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QHostAddress(quint32 ip4Addr)">
                <parameter type="quint32" name="ip4Addr" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-2" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="2" signature="QHostAddress(const quint8 *ip6Addr)">
                <parameter type="const quint8 *" name="ip6Addr" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-3" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="3" signature="QHostAddress(const Q_IPV6ADDR &amp;ip6Addr)">
                <parameter type="const Q_IPV6ADDR &amp;" name="ip6Addr" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-4" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="4" signature="QHostAddress(const sockaddr *sockaddr)">
                <parameter type="const sockaddr *" name="sockaddr" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-5" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="5" signature="QHostAddress(const QString &amp;address)">
                <parameter type="const QString &amp;" name="address" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-6" status="active" access="public" location="qhostaddress.h" documented="true" meta="copy-constructor" overload="true" overload-number="6" signature="QHostAddress(const QHostAddress &amp;address)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="QHostAddress" fullname="QHostAddress::QHostAddress" href="qhostaddress.html#QHostAddress-7" status="active" access="public" location="qhostaddress.h" documented="true" meta="constructor" overload="true" overload-number="7" signature="QHostAddress(QHostAddress::SpecialAddress address)">
                <parameter type="QHostAddress::SpecialAddress" name="address" default=""/>
            </function>
            <function name="clear" fullname="QHostAddress::clear" href="qhostaddress.html#clear" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" type="void" signature="void clear()"/>
            <function name="isBroadcast" fullname="QHostAddress::isBroadcast" href="qhostaddress.html#isBroadcast" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isBroadcast() const"/>
            <function name="isEqual" fullname="QHostAddress::isEqual" href="qhostaddress.html#isEqual" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isEqual(const QHostAddress &amp;other, QHostAddress::ConversionMode mode) const">
                <parameter type="const QHostAddress &amp;" name="other" default=""/>
                <parameter type="QHostAddress::ConversionMode" name="mode" default="TolerantConversion"/>
            </function>
            <function name="isGlobal" fullname="QHostAddress::isGlobal" href="qhostaddress.html#isGlobal" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isGlobal() const"/>
            <function name="isInSubnet" fullname="QHostAddress::isInSubnet" href="qhostaddress.html#isInSubnet" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isInSubnet(const QHostAddress &amp;subnet, int netmask) const">
                <parameter type="const QHostAddress &amp;" name="subnet" default=""/>
                <parameter type="int" name="netmask" default=""/>
            </function>
            <function name="isInSubnet" fullname="QHostAddress::isInSubnet" href="qhostaddress.html#isInSubnet-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="bool" signature="bool isInSubnet(const QPair&lt;QHostAddress, int&gt; &amp;subnet) const">
                <parameter type="const QPair&lt;QHostAddress, int&gt; &amp;" name="subnet" default=""/>
            </function>
            <function name="isLinkLocal" fullname="QHostAddress::isLinkLocal" href="qhostaddress.html#isLinkLocal" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isLinkLocal() const"/>
            <function name="isLoopback" fullname="QHostAddress::isLoopback" href="qhostaddress.html#isLoopback" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isLoopback() const"/>
            <function name="isMulticast" fullname="QHostAddress::isMulticast" href="qhostaddress.html#isMulticast" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isMulticast() const"/>
            <function name="isNull" fullname="QHostAddress::isNull" href="qhostaddress.html#isNull" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="isPrivateUse" fullname="QHostAddress::isPrivateUse" href="qhostaddress.html#isPrivateUse" status="active" access="public" location="qhostaddress.h" documented="true" since="6.6" meta="plain" const="true" type="bool" signature="bool isPrivateUse() const"/>
            <function name="isSiteLocal" fullname="QHostAddress::isSiteLocal" href="qhostaddress.html#isSiteLocal" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSiteLocal() const"/>
            <function name="isUniqueLocalUnicast" fullname="QHostAddress::isUniqueLocalUnicast" href="qhostaddress.html#isUniqueLocalUnicast" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool isUniqueLocalUnicast() const"/>
            <function name="operator!=" fullname="QHostAddress::operator!=" href="qhostaddress.html#operator-not-eq" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QHostAddress &amp;other) const">
                <parameter type="const QHostAddress &amp;" name="other" default=""/>
            </function>
            <function name="operator!=" fullname="QHostAddress::operator!=" href="qhostaddress.html#operator-not-eq-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="bool" signature="bool operator!=(QHostAddress::SpecialAddress other) const">
                <parameter type="QHostAddress::SpecialAddress" name="other" default=""/>
            </function>
            <function name="operator!=" href="qhostaddress.html#operator-not-eq-2" status="active" access="public" location="qhostaddress.h" documented="true" related="14" meta="plain" overload="true" overload-number="2" type="bool" signature="bool operator!=(QHostAddress::SpecialAddress lhs, const QHostAddress &amp;rhs)">
                <parameter type="QHostAddress::SpecialAddress" name="lhs" default=""/>
                <parameter type="const QHostAddress &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qhostaddress.html#operator-lt-lt" status="active" access="public" location="qhostaddress.h" documented="true" related="1" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QHostAddress &amp;address)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkaddressentry.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="2" since="6.2" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkAddressEntry &amp;entry)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkAddressEntry &amp;" name="entry" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkinterface.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="3" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkInterface &amp;networkInterface)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="networkInterface" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator=" fullname="QHostAddress::operator=" href="qhostaddress.html#operator-eq-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QHostAddress &amp;" signature="QHostAddress &amp; operator=(const QHostAddress &amp;address)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="operator=" fullname="QHostAddress::operator=" href="qhostaddress.html#operator-eq-2" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="2" type="QHostAddress &amp;" signature="QHostAddress &amp; operator=(QHostAddress::SpecialAddress address)">
                <parameter type="QHostAddress::SpecialAddress" name="address" default=""/>
            </function>
            <function name="operator==" fullname="QHostAddress::operator==" href="qhostaddress.html#operator-eq-eq" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QHostAddress &amp;other) const">
                <parameter type="const QHostAddress &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QHostAddress::operator==" href="qhostaddress.html#operator-eq-eq-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="bool" signature="bool operator==(QHostAddress::SpecialAddress other) const">
                <parameter type="QHostAddress::SpecialAddress" name="other" default=""/>
            </function>
            <function name="operator==" href="qhostaddress.html#operator-eq-eq-2" status="active" access="public" location="qhostaddress.h" documented="true" related="15" meta="plain" overload="true" overload-number="2" type="bool" signature="bool operator==(QHostAddress::SpecialAddress lhs, const QHostAddress &amp;rhs)">
                <parameter type="QHostAddress::SpecialAddress" name="lhs" default=""/>
                <parameter type="const QHostAddress &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&gt;&gt;" href="qhostaddress.html#operator-gt-gt" status="active" access="public" location="qhostaddress.h" documented="true" related="7" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QHostAddress &amp;address)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="parseSubnet" fullname="QHostAddress::parseSubnet" href="qhostaddress.html#parseSubnet" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" static="true" type="QPair&lt;QHostAddress, int&gt;" signature="QPair&lt;QHostAddress, int&gt; parseSubnet(const QString &amp;subnet)">
                <parameter type="const QString &amp;" name="subnet" default=""/>
            </function>
            <function name="protocol" fullname="QHostAddress::protocol" href="qhostaddress.html#protocol" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="int" signature="int protocol() const"/>
            <function name="qHash" href="qhostaddress.html#qHash" status="active" access="public" location="qhostaddress.h" documented="true" related="8" meta="plain" noexcept="true" type="size_t" signature="size_t qHash(const QHostAddress &amp;key, size_t seed)">
                <parameter type="const QHostAddress &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-1" status="active" access="public" location="qocspresponse.h" documented="true" related="9" meta="plain" noexcept="true" overload="true" overload-number="1" type="size_t" signature="size_t qHash(const QOcspResponse &amp;response, size_t seed)">
                <parameter type="const QOcspResponse &amp;" name="response" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-2" status="active" access="public" location="qsslcertificate.h" documented="true" related="10" meta="plain" noexcept="true" overload="true" overload-number="2" type="size_t" signature="size_t qHash(const QSslCertificate &amp;key, size_t seed)">
                <parameter type="const QSslCertificate &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-3" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="11" meta="plain" constexpr="true" noexcept="true" overload="true" overload-number="3" type="size_t" signature="size_t qHash(QSslEllipticCurve curve, size_t seed)">
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-4" status="active" access="public" location="qsslerror.h" documented="true" related="12" meta="plain" noexcept="true" overload="true" overload-number="4" type="size_t" signature="size_t qHash(const QSslError &amp;key, size_t seed)">
                <parameter type="const QSslError &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="scopeId" fullname="QHostAddress::scopeId" href="qhostaddress.html#scopeId" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="QString" signature="QString scopeId() const"/>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" type="void" signature="void setAddress(quint32 ip4Addr)">
                <parameter type="quint32" name="ip4Addr" default=""/>
            </function>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress-1" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void setAddress(const quint8 *ip6Addr)">
                <parameter type="const quint8 *" name="ip6Addr" default=""/>
            </function>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress-2" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="2" type="void" signature="void setAddress(const Q_IPV6ADDR &amp;ip6Addr)">
                <parameter type="const Q_IPV6ADDR &amp;" name="ip6Addr" default=""/>
            </function>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress-3" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="3" type="void" signature="void setAddress(const sockaddr *sockaddr)">
                <parameter type="const sockaddr *" name="sockaddr" default=""/>
            </function>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress-4" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="4" type="bool" signature="bool setAddress(const QString &amp;address)">
                <parameter type="const QString &amp;" name="address" default=""/>
            </function>
            <function name="setAddress" fullname="QHostAddress::setAddress" href="qhostaddress.html#setAddress-5" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" overload="true" overload-number="5" type="void" signature="void setAddress(QHostAddress::SpecialAddress address)">
                <parameter type="QHostAddress::SpecialAddress" name="address" default=""/>
            </function>
            <function name="setScopeId" fullname="QHostAddress::setScopeId" href="qhostaddress.html#setScopeId" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" type="void" signature="void setScopeId(const QString &amp;id)">
                <parameter type="const QString &amp;" name="id" default=""/>
            </function>
            <function name="swap" fullname="QHostAddress::swap" href="qhostaddress.html#swap" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHostAddress &amp;other)">
                <parameter type="QHostAddress &amp;" name="other" default=""/>
            </function>
            <function name="toIPv4Address" fullname="QHostAddress::toIPv4Address" href="qhostaddress.html#toIPv4Address" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="quint32" signature="quint32 toIPv4Address(bool *ok) const">
                <parameter type="bool *" name="ok" default="nullptr"/>
            </function>
            <function name="toIPv6Address" fullname="QHostAddress::toIPv6Address" href="qhostaddress.html#toIPv6Address" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="Q_IPV6ADDR" signature="Q_IPV6ADDR toIPv6Address() const"/>
            <function name="toString" fullname="QHostAddress::toString" href="qhostaddress.html#toString" status="active" access="public" location="qhostaddress.h" documented="true" meta="plain" const="true" type="QString" signature="QString toString() const"/>
            <function name="~QHostAddress" fullname="QHostAddress::~QHostAddress" href="qhostaddress.html#dtor.QHostAddress" status="active" access="public" location="qhostaddress.h" documented="true" meta="destructor" noexcept="true" signature="~QHostAddress()"/>
            <enum name="ConversionModeFlag" fullname="QHostAddress::ConversionModeFlag" href="qhostaddress.html#ConversionModeFlag-enum" status="active" access="public" location="qhostaddress.h" documented="true" typedef="QHostAddress::ConversionMode">
                <value name="ConvertV4MappedToIPv4" value="1"/>
                <value name="ConvertV4CompatToIPv4" value="2"/>
                <value name="ConvertUnspecifiedAddress" value="4"/>
                <value name="ConvertLocalHost" value="8"/>
                <value name="TolerantConversion" value="0xff"/>
                <value name="StrictConversion" value="0"/>
            </enum>
            <enum name="SpecialAddress" fullname="QHostAddress::SpecialAddress" href="qhostaddress.html#SpecialAddress-enum" status="active" access="public" location="qhostaddress.h" documented="true">
                <value name="Null" value="0"/>
                <value name="Broadcast" value="1"/>
                <value name="LocalHost" value="2"/>
                <value name="LocalHostIPv6" value="3"/>
                <value name="Any" value="4"/>
                <value name="AnyIPv6" value="5"/>
                <value name="AnyIPv4" value="6"/>
            </enum>
            <typedef name="ConversionMode" fullname="QHostAddress::ConversionMode" href="qhostaddress.html#ConversionModeFlag-enum" status="active" access="public" location="qhostaddress.h" enum="QHostAddress::ConversionModeFlag"/>
        </class>
        <class threadsafety="reentrant" name="QHostInfo" href="qhostinfo.html" status="active" access="public" location="qhostinfo.h" documented="true" groups="network" module="QtNetwork" brief="Static functions for host name lookups">
            <function name="QHostInfo" fullname="QHostInfo::QHostInfo" href="qhostinfo.html#QHostInfo" status="active" access="public" location="qhostinfo.h" documented="true" meta="constructor" explicit="true" signature="QHostInfo(int id)">
                <parameter type="int" name="id" default="-1"/>
            </function>
            <function name="QHostInfo" fullname="QHostInfo::QHostInfo" href="qhostinfo.html#QHostInfo-1" status="active" access="public" location="qhostinfo.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QHostInfo(const QHostInfo &amp;other)">
                <parameter type="const QHostInfo &amp;" name="other" default=""/>
            </function>
            <function name="QHostInfo" fullname="QHostInfo::QHostInfo" href="qhostinfo.html#QHostInfo-2" status="active" access="public" location="qhostinfo.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QHostInfo(QHostInfo &amp;&amp;other)">
                <parameter type="QHostInfo &amp;&amp;" name="other" default=""/>
            </function>
            <function name="abortHostLookup" fullname="QHostInfo::abortHostLookup" href="qhostinfo.html#abortHostLookup" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" type="void" signature="void abortHostLookup(int id)">
                <parameter type="int" name="id" default=""/>
            </function>
            <function name="addresses" fullname="QHostInfo::addresses" href="qhostinfo.html#addresses" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" const="true" type="QList&lt;QHostAddress&gt;" signature="QList&lt;QHostAddress&gt; addresses() const"/>
            <function name="error" fullname="QHostInfo::error" href="qhostinfo.html#error" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" const="true" type="QHostInfo::HostInfoError" signature="QHostInfo::HostInfoError error() const"/>
            <function name="errorString" fullname="QHostInfo::errorString" href="qhostinfo.html#errorString" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" const="true" type="QString" signature="QString errorString() const"/>
            <function name="fromName" fullname="QHostInfo::fromName" href="qhostinfo.html#fromName" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" type="QHostInfo" signature="QHostInfo fromName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="hostName" fullname="QHostInfo::hostName" href="qhostinfo.html#hostName" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" const="true" type="QString" signature="QString hostName() const"/>
            <function name="localDomainName" fullname="QHostInfo::localDomainName" href="qhostinfo.html#localDomainName" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" type="QString" signature="QString localDomainName()"/>
            <function name="localHostName" fullname="QHostInfo::localHostName" href="qhostinfo.html#localHostName" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" type="QString" signature="QString localHostName()"/>
            <function name="lookupHost" fullname="QHostInfo::lookupHost" href="qhostinfo.html#lookupHost" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" type="int" signature="int lookupHost(const QString &amp;name, const QObject *receiver, const char *member)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="const QObject *" name="receiver" default=""/>
                <parameter type="const char *" name="member" default=""/>
            </function>
            <function name="lookupHost" fullname="QHostInfo::lookupHost" href="qhostinfo.html#lookupHost-1" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" overload="true" overload-number="1" type="int" signature="int lookupHost(const QString &amp;name, const QObject *context, Functor functor)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="const QObject *" name="context" default=""/>
                <parameter type="Functor" name="functor" default=""/>
            </function>
            <function name="lookupHost" fullname="QHostInfo::lookupHost" href="qhostinfo.html#lookupHost-2" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" static="true" overload="true" overload-number="2" type="int" signature="int lookupHost(const QString &amp;name, Functor &amp;&amp;functor)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="Functor &amp;&amp;" name="functor" default=""/>
            </function>
            <function name="lookupId" fullname="QHostInfo::lookupId" href="qhostinfo.html#lookupId" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" const="true" type="int" signature="int lookupId() const"/>
            <function name="operator=" fullname="QHostInfo::operator=" href="qhostinfo.html#operator-eq" status="active" access="public" location="qhostinfo.h" documented="true" meta="copy-assign" type="QHostInfo &amp;" signature="QHostInfo &amp; operator=(const QHostInfo &amp;other)">
                <parameter type="const QHostInfo &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QHostInfo::operator=" href="qhostinfo.html#operator-eq-1" status="active" access="public" location="qhostinfo.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QHostInfo &amp;" signature="QHostInfo &amp; operator=(QHostInfo &amp;&amp;other)">
                <parameter type="QHostInfo &amp;&amp;" name="other" default=""/>
            </function>
            <function name="setAddresses" fullname="QHostInfo::setAddresses" href="qhostinfo.html#setAddresses" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" type="void" signature="void setAddresses(const QList&lt;QHostAddress&gt; &amp;addresses)">
                <parameter type="const QList&lt;QHostAddress&gt; &amp;" name="addresses" default=""/>
            </function>
            <function name="setError" fullname="QHostInfo::setError" href="qhostinfo.html#setError" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" type="void" signature="void setError(QHostInfo::HostInfoError error)">
                <parameter type="QHostInfo::HostInfoError" name="error" default=""/>
            </function>
            <function name="setErrorString" fullname="QHostInfo::setErrorString" href="qhostinfo.html#setErrorString" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" type="void" signature="void setErrorString(const QString &amp;str)">
                <parameter type="const QString &amp;" name="str" default=""/>
            </function>
            <function name="setHostName" fullname="QHostInfo::setHostName" href="qhostinfo.html#setHostName" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" type="void" signature="void setHostName(const QString &amp;hostName)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
            </function>
            <function name="setLookupId" fullname="QHostInfo::setLookupId" href="qhostinfo.html#setLookupId" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" type="void" signature="void setLookupId(int id)">
                <parameter type="int" name="id" default=""/>
            </function>
            <function name="swap" fullname="QHostInfo::swap" href="qhostinfo.html#swap" status="active" access="public" location="qhostinfo.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHostInfo &amp;other)">
                <parameter type="QHostInfo &amp;" name="other" default=""/>
            </function>
            <function name="~QHostInfo" fullname="QHostInfo::~QHostInfo" href="qhostinfo.html#dtor.QHostInfo" status="active" access="public" location="qhostinfo.h" documented="true" meta="destructor" noexcept="true" signature="~QHostInfo()"/>
            <enum name="HostInfoError" fullname="QHostInfo::HostInfoError" href="qhostinfo.html#HostInfoError-enum" status="active" access="public" location="qhostinfo.h" documented="true">
                <value name="NoError" value="0"/>
                <value name="HostNotFound" value="1"/>
                <value name="UnknownError" value="2"/>
            </enum>
        </class>
        <class name="QHstsPolicy" href="qhstspolicy.html" status="active" access="public" location="qhstspolicy.h" documented="true" groups="network" module="QtNetwork" brief="Specifies that a host supports HTTP Strict Transport Security policy (HSTS)">
            <function name="QHstsPolicy" fullname="QHstsPolicy::QHstsPolicy" href="qhstspolicy.html#QHstsPolicy" status="active" access="public" location="qhstspolicy.h" documented="true" meta="constructor" signature="QHstsPolicy()"/>
            <function name="QHstsPolicy" fullname="QHstsPolicy::QHstsPolicy" href="qhstspolicy.html#QHstsPolicy-1" status="active" access="public" location="qhstspolicy.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="QHstsPolicy(const QDateTime &amp;expiry, QHstsPolicy::PolicyFlags flags, const QString &amp;host, QUrl::ParsingMode mode)">
                <parameter type="const QDateTime &amp;" name="expiry" default=""/>
                <parameter type="QHstsPolicy::PolicyFlags" name="flags" default=""/>
                <parameter type="const QString &amp;" name="host" default=""/>
                <parameter type="QUrl::ParsingMode" name="mode" default="QUrl::DecodedMode"/>
            </function>
            <function name="QHstsPolicy" fullname="QHstsPolicy::QHstsPolicy" href="qhstspolicy.html#QHstsPolicy-2" status="active" access="public" location="qhstspolicy.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QHstsPolicy(const QHstsPolicy &amp;other)">
                <parameter type="const QHstsPolicy &amp;" name="other" default=""/>
            </function>
            <function name="expiry" fullname="QHstsPolicy::expiry" href="qhstspolicy.html#expiry" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime expiry() const"/>
            <function name="host" fullname="QHstsPolicy::host" href="qhstspolicy.html#host" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" const="true" type="QString" signature="QString host(QUrl::ComponentFormattingOptions options) const">
                <parameter type="QUrl::ComponentFormattingOptions" name="options" default="QUrl::FullyDecoded"/>
            </function>
            <function name="includesSubDomains" fullname="QHstsPolicy::includesSubDomains" href="qhstspolicy.html#includesSubDomains" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" const="true" type="bool" signature="bool includesSubDomains() const"/>
            <function name="isExpired" fullname="QHstsPolicy::isExpired" href="qhstspolicy.html#isExpired" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" const="true" type="bool" signature="bool isExpired() const"/>
            <function name="operator!=" href="qhstspolicy.html#operator-not-eq" status="active" access="public" location="qhstspolicy.h" documented="true" related="16" meta="plain" type="bool" signature="bool operator!=(const QHstsPolicy &amp;lhs, const QHstsPolicy &amp;rhs)">
                <parameter type="const QHstsPolicy &amp;" name="lhs" default=""/>
                <parameter type="const QHstsPolicy &amp;" name="rhs" default=""/>
            </function>
            <function name="operator=" fullname="QHstsPolicy::operator=" href="qhstspolicy.html#operator-eq" status="active" access="public" location="qhstspolicy.h" documented="true" meta="copy-assign" type="QHstsPolicy &amp;" signature="QHstsPolicy &amp; operator=(const QHstsPolicy &amp;other)">
                <parameter type="const QHstsPolicy &amp;" name="other" default=""/>
            </function>
            <function name="operator==" href="qhstspolicy.html#operator-eq-eq" status="active" access="public" location="qhstspolicy.h" documented="true" related="17" meta="plain" type="bool" signature="bool operator==(const QHstsPolicy &amp;lhs, const QHstsPolicy &amp;rhs)">
                <parameter type="const QHstsPolicy &amp;" name="lhs" default=""/>
                <parameter type="const QHstsPolicy &amp;" name="rhs" default=""/>
            </function>
            <function name="setExpiry" fullname="QHstsPolicy::setExpiry" href="qhstspolicy.html#setExpiry" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" type="void" signature="void setExpiry(const QDateTime &amp;expiry)">
                <parameter type="const QDateTime &amp;" name="expiry" default=""/>
            </function>
            <function name="setHost" fullname="QHstsPolicy::setHost" href="qhstspolicy.html#setHost" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" type="void" signature="void setHost(const QString &amp;host, QUrl::ParsingMode mode)">
                <parameter type="const QString &amp;" name="host" default=""/>
                <parameter type="QUrl::ParsingMode" name="mode" default="QUrl::DecodedMode"/>
            </function>
            <function name="setIncludesSubDomains" fullname="QHstsPolicy::setIncludesSubDomains" href="qhstspolicy.html#setIncludesSubDomains" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" type="void" signature="void setIncludesSubDomains(bool include)">
                <parameter type="bool" name="include" default=""/>
            </function>
            <function name="swap" fullname="QHstsPolicy::swap" href="qhstspolicy.html#swap" status="active" access="public" location="qhstspolicy.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHstsPolicy &amp;other)">
                <parameter type="QHstsPolicy &amp;" name="other" default=""/>
            </function>
            <function name="~QHstsPolicy" fullname="QHstsPolicy::~QHstsPolicy" href="qhstspolicy.html#dtor.QHstsPolicy" status="active" access="public" location="qhstspolicy.h" documented="true" meta="destructor" noexcept="true" signature="~QHstsPolicy()"/>
            <enum name="PolicyFlag" fullname="QHstsPolicy::PolicyFlag" href="qhstspolicy.html#PolicyFlag-enum" status="active" access="public" location="qhstspolicy.h" documented="true" typedef="QHstsPolicy::PolicyFlags">
                <value name="IncludeSubDomains" value="1"/>
            </enum>
            <typedef name="PolicyFlags" fullname="QHstsPolicy::PolicyFlags" href="qhstspolicy.html#PolicyFlag-enum" status="active" access="public" location="qhstspolicy.h" enum="QHstsPolicy::PolicyFlag"/>
        </class>
        <class threadsafety="reentrant" name="QHttp1Configuration" href="qhttp1configuration.html" status="active" access="public" location="qhttp1configuration.h" since="6.5" documented="true" groups="network,shared" module="QtNetwork" brief="Controls HTTP/1 parameters and settings">
            <function name="QHttp1Configuration" fullname="QHttp1Configuration::QHttp1Configuration" href="qhttp1configuration.html#QHttp1Configuration" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="constructor" signature="QHttp1Configuration()"/>
            <function name="QHttp1Configuration" fullname="QHttp1Configuration::QHttp1Configuration" href="qhttp1configuration.html#QHttp1Configuration-1" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QHttp1Configuration(const QHttp1Configuration &amp;other)">
                <parameter type="const QHttp1Configuration &amp;" name="other" default=""/>
            </function>
            <function name="QHttp1Configuration" fullname="QHttp1Configuration::QHttp1Configuration" href="qhttp1configuration.html#QHttp1Configuration-2" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QHttp1Configuration(QHttp1Configuration &amp;&amp;other)">
                <parameter type="QHttp1Configuration &amp;&amp;" name="other" default=""/>
            </function>
            <function name="numberOfConnectionsPerHost" fullname="QHttp1Configuration::numberOfConnectionsPerHost" href="qhttp1configuration.html#numberOfConnectionsPerHost" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="plain" const="true" type="qsizetype" signature="qsizetype numberOfConnectionsPerHost() const"/>
            <function name="operator!=" href="qhttp1configuration.html#operator-not-eq" status="active" access="public" location="qhttp1configuration.h" documented="true" related="18" since="6.5" meta="plain" noexcept="true" type="bool" signature="bool operator!=(const QHttp1Configuration &amp;lhs, const QHttp1Configuration &amp;rhs)">
                <parameter type="const QHttp1Configuration &amp;" name="lhs" default=""/>
                <parameter type="const QHttp1Configuration &amp;" name="rhs" default=""/>
            </function>
            <function name="operator=" fullname="QHttp1Configuration::operator=" href="qhttp1configuration.html#operator-eq" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="copy-assign" type="QHttp1Configuration &amp;" signature="QHttp1Configuration &amp; operator=(const QHttp1Configuration &amp;other)">
                <parameter type="const QHttp1Configuration &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QHttp1Configuration::operator=" href="qhttp1configuration.html#operator-eq-1" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QHttp1Configuration &amp;" signature="QHttp1Configuration &amp; operator=(QHttp1Configuration &amp;&amp;other)">
                <parameter type="QHttp1Configuration &amp;&amp;" name="other" default=""/>
            </function>
            <function name="operator==" href="qhttp1configuration.html#operator-eq-eq" status="active" access="public" location="qhttp1configuration.h" documented="true" related="19" since="6.5" meta="plain" noexcept="true" type="bool" signature="bool operator==(const QHttp1Configuration &amp;lhs, const QHttp1Configuration &amp;rhs)">
                <parameter type="const QHttp1Configuration &amp;" name="lhs" default=""/>
                <parameter type="const QHttp1Configuration &amp;" name="rhs" default=""/>
            </function>
            <function name="qHash" href="qhttp1configuration.html#qHash" status="active" access="public" location="qhttp1configuration.h" documented="true" related="20" since="6.5" meta="plain" noexcept="true" type="size_t" signature="size_t qHash(const QHttp1Configuration &amp;key, size_t seed)">
                <parameter type="const QHttp1Configuration &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="setNumberOfConnectionsPerHost" fullname="QHttp1Configuration::setNumberOfConnectionsPerHost" href="qhttp1configuration.html#setNumberOfConnectionsPerHost" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="plain" type="void" signature="void setNumberOfConnectionsPerHost(qsizetype number)">
                <parameter type="qsizetype" name="number" default=""/>
            </function>
            <function name="swap" fullname="QHttp1Configuration::swap" href="qhttp1configuration.html#swap" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHttp1Configuration &amp;other)">
                <parameter type="QHttp1Configuration &amp;" name="other" default=""/>
            </function>
            <function name="~QHttp1Configuration" fullname="QHttp1Configuration::~QHttp1Configuration" href="qhttp1configuration.html#dtor.QHttp1Configuration" status="active" access="public" location="qhttp1configuration.h" documented="true" meta="destructor" noexcept="true" signature="~QHttp1Configuration()"/>
        </class>
        <class threadsafety="reentrant" name="QHttp2Configuration" href="qhttp2configuration.html" status="active" access="public" location="qhttp2configuration.h" documented="true" groups="network,shared" module="QtNetwork" brief="Controls HTTP/2 parameters and settings">
            <function name="QHttp2Configuration" fullname="QHttp2Configuration::QHttp2Configuration" href="qhttp2configuration.html#QHttp2Configuration" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="constructor" signature="QHttp2Configuration()"/>
            <function name="QHttp2Configuration" fullname="QHttp2Configuration::QHttp2Configuration" href="qhttp2configuration.html#QHttp2Configuration-1" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QHttp2Configuration(const QHttp2Configuration &amp;other)">
                <parameter type="const QHttp2Configuration &amp;" name="other" default=""/>
            </function>
            <function name="QHttp2Configuration" fullname="QHttp2Configuration::QHttp2Configuration" href="qhttp2configuration.html#QHttp2Configuration-2" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QHttp2Configuration(QHttp2Configuration &amp;&amp;other)">
                <parameter type="QHttp2Configuration &amp;&amp;" name="other" default=""/>
            </function>
            <function name="huffmanCompressionEnabled" fullname="QHttp2Configuration::huffmanCompressionEnabled" href="qhttp2configuration.html#huffmanCompressionEnabled" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" const="true" type="bool" signature="bool huffmanCompressionEnabled() const"/>
            <function name="maxFrameSize" fullname="QHttp2Configuration::maxFrameSize" href="qhttp2configuration.html#maxFrameSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" const="true" type="unsigned int" signature="unsigned int maxFrameSize() const"/>
            <function name="operator!=" href="qhttp2configuration.html#operator-not-eq" status="active" access="public" location="qhttp2configuration.h" documented="true" related="21" meta="plain" noexcept="true" type="bool" signature="bool operator!=(const QHttp2Configuration &amp;lhs, const QHttp2Configuration &amp;rhs)">
                <parameter type="const QHttp2Configuration &amp;" name="lhs" default=""/>
                <parameter type="const QHttp2Configuration &amp;" name="rhs" default=""/>
            </function>
            <function name="operator=" fullname="QHttp2Configuration::operator=" href="qhttp2configuration.html#operator-eq" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="copy-assign" type="QHttp2Configuration &amp;" signature="QHttp2Configuration &amp; operator=(const QHttp2Configuration &amp;other)">
                <parameter type="const QHttp2Configuration &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QHttp2Configuration::operator=" href="qhttp2configuration.html#operator-eq-1" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QHttp2Configuration &amp;" signature="QHttp2Configuration &amp; operator=(QHttp2Configuration &amp;&amp;other)">
                <parameter type="QHttp2Configuration &amp;&amp;" name="other" default=""/>
            </function>
            <function name="operator==" href="qhttp2configuration.html#operator-eq-eq" status="active" access="public" location="qhttp2configuration.h" documented="true" related="22" meta="plain" noexcept="true" type="bool" signature="bool operator==(const QHttp2Configuration &amp;lhs, const QHttp2Configuration &amp;rhs)">
                <parameter type="const QHttp2Configuration &amp;" name="lhs" default=""/>
                <parameter type="const QHttp2Configuration &amp;" name="rhs" default=""/>
            </function>
            <function name="serverPushEnabled" fullname="QHttp2Configuration::serverPushEnabled" href="qhttp2configuration.html#serverPushEnabled" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" const="true" type="bool" signature="bool serverPushEnabled() const"/>
            <function name="sessionReceiveWindowSize" fullname="QHttp2Configuration::sessionReceiveWindowSize" href="qhttp2configuration.html#sessionReceiveWindowSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" const="true" type="unsigned int" signature="unsigned int sessionReceiveWindowSize() const"/>
            <function name="setHuffmanCompressionEnabled" fullname="QHttp2Configuration::setHuffmanCompressionEnabled" href="qhttp2configuration.html#setHuffmanCompressionEnabled" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" type="void" signature="void setHuffmanCompressionEnabled(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="setMaxFrameSize" fullname="QHttp2Configuration::setMaxFrameSize" href="qhttp2configuration.html#setMaxFrameSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" type="bool" signature="bool setMaxFrameSize(unsigned int size)">
                <parameter type="unsigned int" name="size" default=""/>
            </function>
            <function name="setServerPushEnabled" fullname="QHttp2Configuration::setServerPushEnabled" href="qhttp2configuration.html#setServerPushEnabled" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" type="void" signature="void setServerPushEnabled(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="setSessionReceiveWindowSize" fullname="QHttp2Configuration::setSessionReceiveWindowSize" href="qhttp2configuration.html#setSessionReceiveWindowSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" type="bool" signature="bool setSessionReceiveWindowSize(unsigned int size)">
                <parameter type="unsigned int" name="size" default=""/>
            </function>
            <function name="setStreamReceiveWindowSize" fullname="QHttp2Configuration::setStreamReceiveWindowSize" href="qhttp2configuration.html#setStreamReceiveWindowSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" type="bool" signature="bool setStreamReceiveWindowSize(unsigned int size)">
                <parameter type="unsigned int" name="size" default=""/>
            </function>
            <function name="streamReceiveWindowSize" fullname="QHttp2Configuration::streamReceiveWindowSize" href="qhttp2configuration.html#streamReceiveWindowSize" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" const="true" type="unsigned int" signature="unsigned int streamReceiveWindowSize() const"/>
            <function name="swap" fullname="QHttp2Configuration::swap" href="qhttp2configuration.html#swap" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHttp2Configuration &amp;other)">
                <parameter type="QHttp2Configuration &amp;" name="other" default=""/>
            </function>
            <function name="~QHttp2Configuration" fullname="QHttp2Configuration::~QHttp2Configuration" href="qhttp2configuration.html#dtor.QHttp2Configuration" status="active" access="public" location="qhttp2configuration.h" documented="true" meta="destructor" noexcept="true" signature="~QHttp2Configuration()"/>
        </class>
        <class name="QHttpHeaders" href="qhttpheaders.html" status="active" access="public" location="qhttpheaders.h" since="6.7" documented="true" groups="" module="QtNetwork" brief="Class for holding HTTP headers">
            <contents name="allowed-field-name-and-value-characters" title="Allowed field name and value characters" level="1"/>
            <contents name="combining-values" title="Combining values" level="1"/>
            <contents name="performance" title="Performance" level="1"/>
            <function name="QHttpHeaders" fullname="QHttpHeaders::QHttpHeaders" href="qhttpheaders.html#QHttpHeaders" status="active" access="public" location="qhttpheaders.h" documented="true" meta="constructor" noexcept="true" signature="QHttpHeaders()"/>
            <function name="QHttpHeaders" fullname="QHttpHeaders::QHttpHeaders" href="qhttpheaders.html#QHttpHeaders-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QHttpHeaders(const QHttpHeaders &amp;other)">
                <parameter type="const QHttpHeaders &amp;" name="other" default=""/>
            </function>
            <function name="QHttpHeaders" fullname="QHttpHeaders::QHttpHeaders" href="qhttpheaders.html#QHttpHeaders-2" status="active" access="public" location="qhttpheaders.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QHttpHeaders(QHttpHeaders &amp;&amp;other)">
                <parameter type="QHttpHeaders &amp;&amp;" name="other" default=""/>
            </function>
            <function name="append" fullname="QHttpHeaders::append" href="qhttpheaders.html#append" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="bool" signature="bool append(QAnyStringView name, QAnyStringView value)">
                <parameter type="QAnyStringView" name="name" default=""/>
                <parameter type="QAnyStringView" name="value" default=""/>
            </function>
            <function name="append" fullname="QHttpHeaders::append" href="qhttpheaders.html#append-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool append(QHttpHeaders::WellKnownHeader name, QAnyStringView value)">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
                <parameter type="QAnyStringView" name="value" default=""/>
            </function>
            <function name="clear" fullname="QHttpHeaders::clear" href="qhttpheaders.html#clear" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="void" signature="void clear()"/>
            <function name="combinedValue" fullname="QHttpHeaders::combinedValue" href="qhttpheaders.html#combinedValue" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray combinedValue(QAnyStringView name) const">
                <parameter type="QAnyStringView" name="name" default=""/>
            </function>
            <function name="combinedValue" fullname="QHttpHeaders::combinedValue" href="qhttpheaders.html#combinedValue-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="QByteArray" signature="QByteArray combinedValue(QHttpHeaders::WellKnownHeader name) const">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
            </function>
            <function name="contains" fullname="QHttpHeaders::contains" href="qhttpheaders.html#contains" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="bool" signature="bool contains(QAnyStringView name) const">
                <parameter type="QAnyStringView" name="name" default=""/>
            </function>
            <function name="contains" fullname="QHttpHeaders::contains" href="qhttpheaders.html#contains-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="bool" signature="bool contains(QHttpHeaders::WellKnownHeader name) const">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
            </function>
            <function name="fromListOfPairs" fullname="QHttpHeaders::fromListOfPairs" href="qhttpheaders.html#fromListOfPairs" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" static="true" type="QHttpHeaders" signature="QHttpHeaders fromListOfPairs(const QList&lt;std::pair&lt;QByteArray, QByteArray&gt;&gt; &amp;headers)">
                <parameter type="const QList&lt;std::pair&lt;QByteArray, QByteArray&gt;&gt; &amp;" name="headers" default=""/>
            </function>
            <function name="fromMultiHash" fullname="QHttpHeaders::fromMultiHash" href="qhttpheaders.html#fromMultiHash" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" static="true" type="QHttpHeaders" signature="QHttpHeaders fromMultiHash(const QMultiHash&lt;QByteArray, QByteArray&gt; &amp;headers)">
                <parameter type="const QMultiHash&lt;QByteArray, QByteArray&gt; &amp;" name="headers" default=""/>
            </function>
            <function name="fromMultiMap" fullname="QHttpHeaders::fromMultiMap" href="qhttpheaders.html#fromMultiMap" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" static="true" type="QHttpHeaders" signature="QHttpHeaders fromMultiMap(const QMultiMap&lt;QByteArray, QByteArray&gt; &amp;headers)">
                <parameter type="const QMultiMap&lt;QByteArray, QByteArray&gt; &amp;" name="headers" default=""/>
            </function>
            <function name="insert" fullname="QHttpHeaders::insert" href="qhttpheaders.html#insert" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="bool" signature="bool insert(qsizetype i, QAnyStringView name, QAnyStringView value)">
                <parameter type="qsizetype" name="i" default=""/>
                <parameter type="QAnyStringView" name="name" default=""/>
                <parameter type="QAnyStringView" name="value" default=""/>
            </function>
            <function name="insert" fullname="QHttpHeaders::insert" href="qhttpheaders.html#insert-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool insert(qsizetype i, QHttpHeaders::WellKnownHeader name, QAnyStringView value)">
                <parameter type="qsizetype" name="i" default=""/>
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
                <parameter type="QAnyStringView" name="value" default=""/>
            </function>
            <function name="isEmpty" fullname="QHttpHeaders::isEmpty" href="qhttpheaders.html#isEmpty" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" type="bool" signature="bool isEmpty() const"/>
            <function name="nameAt" fullname="QHttpHeaders::nameAt" href="qhttpheaders.html#nameAt" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" type="QLatin1StringView" signature="QLatin1StringView nameAt(qsizetype i) const">
                <parameter type="qsizetype" name="i" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qhttpheaders.html#operator-lt-lt" status="active" access="public" location="qhttpheaders.h" documented="true" related="23" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QHttpHeaders &amp;headers)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QHttpHeaders &amp;" name="headers" default=""/>
            </function>
            <function name="operator=" fullname="QHttpHeaders::operator=" href="qhttpheaders.html#operator-eq" status="active" access="public" location="qhttpheaders.h" documented="true" meta="copy-assign" type="QHttpHeaders &amp;" signature="QHttpHeaders &amp; operator=(const QHttpHeaders &amp;other)">
                <parameter type="const QHttpHeaders &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QHttpHeaders::operator=" href="qhttpheaders.html#operator-eq-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QHttpHeaders &amp;" signature="QHttpHeaders &amp; operator=(QHttpHeaders &amp;&amp;other)">
                <parameter type="QHttpHeaders &amp;&amp;" name="other" default=""/>
            </function>
            <function name="removeAll" fullname="QHttpHeaders::removeAll" href="qhttpheaders.html#removeAll" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="void" signature="void removeAll(QAnyStringView name)">
                <parameter type="QAnyStringView" name="name" default=""/>
            </function>
            <function name="removeAll" fullname="QHttpHeaders::removeAll" href="qhttpheaders.html#removeAll-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void removeAll(QHttpHeaders::WellKnownHeader name)">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
            </function>
            <function name="removeAt" fullname="QHttpHeaders::removeAt" href="qhttpheaders.html#removeAt" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="void" signature="void removeAt(qsizetype i)">
                <parameter type="qsizetype" name="i" default=""/>
            </function>
            <function name="replace" fullname="QHttpHeaders::replace" href="qhttpheaders.html#replace" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="bool" signature="bool replace(qsizetype i, QAnyStringView name, QAnyStringView newValue)">
                <parameter type="qsizetype" name="i" default=""/>
                <parameter type="QAnyStringView" name="name" default=""/>
                <parameter type="QAnyStringView" name="newValue" default=""/>
            </function>
            <function name="replace" fullname="QHttpHeaders::replace" href="qhttpheaders.html#replace-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool replace(qsizetype i, QHttpHeaders::WellKnownHeader name, QAnyStringView newValue)">
                <parameter type="qsizetype" name="i" default=""/>
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
                <parameter type="QAnyStringView" name="newValue" default=""/>
            </function>
            <function name="reserve" fullname="QHttpHeaders::reserve" href="qhttpheaders.html#reserve" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" type="void" signature="void reserve(qsizetype size)">
                <parameter type="qsizetype" name="size" default=""/>
            </function>
            <function name="size" fullname="QHttpHeaders::size" href="qhttpheaders.html#size" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" type="qsizetype" signature="qsizetype size() const"/>
            <function name="swap" fullname="QHttpHeaders::swap" href="qhttpheaders.html#swap" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHttpHeaders &amp;other)">
                <parameter type="QHttpHeaders &amp;" name="other" default=""/>
            </function>
            <function name="toListOfPairs" fullname="QHttpHeaders::toListOfPairs" href="qhttpheaders.html#toListOfPairs" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="QList&lt;std::pair&lt;QByteArray, QByteArray&gt;&gt;" signature="QList&lt;std::pair&lt;QByteArray, QByteArray&gt;&gt; toListOfPairs() const"/>
            <function name="toMultiHash" fullname="QHttpHeaders::toMultiHash" href="qhttpheaders.html#toMultiHash" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="QMultiHash&lt;QByteArray, QByteArray&gt;" signature="QMultiHash&lt;QByteArray, QByteArray&gt; toMultiHash() const"/>
            <function name="toMultiMap" fullname="QHttpHeaders::toMultiMap" href="qhttpheaders.html#toMultiMap" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="QMultiMap&lt;QByteArray, QByteArray&gt;" signature="QMultiMap&lt;QByteArray, QByteArray&gt; toMultiMap() const"/>
            <function name="value" fullname="QHttpHeaders::value" href="qhttpheaders.html#value" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" type="QByteArrayView" signature="QByteArrayView value(QAnyStringView name, QByteArrayView defaultValue) const">
                <parameter type="QAnyStringView" name="name" default=""/>
                <parameter type="QByteArrayView" name="defaultValue" default="{}"/>
            </function>
            <function name="value" fullname="QHttpHeaders::value" href="qhttpheaders.html#value-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" overload="true" overload-number="1" type="QByteArrayView" signature="QByteArrayView value(QHttpHeaders::WellKnownHeader name, QByteArrayView defaultValue) const">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
                <parameter type="QByteArrayView" name="defaultValue" default="{}"/>
            </function>
            <function name="valueAt" fullname="QHttpHeaders::valueAt" href="qhttpheaders.html#valueAt" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" noexcept="true" type="QByteArrayView" signature="QByteArrayView valueAt(qsizetype i) const">
                <parameter type="qsizetype" name="i" default=""/>
            </function>
            <function name="values" fullname="QHttpHeaders::values" href="qhttpheaders.html#values" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; values(QAnyStringView name) const">
                <parameter type="QAnyStringView" name="name" default=""/>
            </function>
            <function name="values" fullname="QHttpHeaders::values" href="qhttpheaders.html#values-1" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; values(QHttpHeaders::WellKnownHeader name) const">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
            </function>
            <function name="wellKnownHeaderName" fullname="QHttpHeaders::wellKnownHeaderName" href="qhttpheaders.html#wellKnownHeaderName" status="active" access="public" location="qhttpheaders.h" documented="true" meta="plain" static="true" noexcept="true" type="QByteArrayView" signature="QByteArrayView wellKnownHeaderName(QHttpHeaders::WellKnownHeader name)">
                <parameter type="QHttpHeaders::WellKnownHeader" name="name" default=""/>
            </function>
            <function name="~QHttpHeaders" fullname="QHttpHeaders::~QHttpHeaders" href="qhttpheaders.html#dtor.QHttpHeaders" status="active" access="public" location="qhttpheaders.h" documented="true" meta="destructor" noexcept="true" signature="~QHttpHeaders()"/>
            <enum name="WellKnownHeader" fullname="QHttpHeaders::WellKnownHeader" href="qhttpheaders.html#WellKnownHeader-enum" status="active" access="public" location="qhttpheaders.h" documented="true" scoped="true">
                <value name="AIM" value="0"/>
                <value name="Accept" value="1"/>
                <value name="AcceptAdditions" value="2"/>
                <value name="AcceptCH" value="3"/>
                <value name="AcceptDatetime" value="4"/>
                <value name="AcceptEncoding" value="5"/>
                <value name="AcceptFeatures" value="6"/>
                <value name="AcceptLanguage" value="7"/>
                <value name="AcceptPatch" value="8"/>
                <value name="AcceptPost" value="9"/>
                <value name="AcceptRanges" value="10"/>
                <value name="AcceptSignature" value="11"/>
                <value name="AccessControlAllowCredentials" value="12"/>
                <value name="AccessControlAllowHeaders" value="13"/>
                <value name="AccessControlAllowMethods" value="14"/>
                <value name="AccessControlAllowOrigin" value="15"/>
                <value name="AccessControlExposeHeaders" value="16"/>
                <value name="AccessControlMaxAge" value="17"/>
                <value name="AccessControlRequestHeaders" value="18"/>
                <value name="AccessControlRequestMethod" value="19"/>
                <value name="Age" value="20"/>
                <value name="Allow" value="21"/>
                <value name="ALPN" value="22"/>
                <value name="AltSvc" value="23"/>
                <value name="AltUsed" value="24"/>
                <value name="Alternates" value="25"/>
                <value name="ApplyToRedirectRef" value="26"/>
                <value name="AuthenticationControl" value="27"/>
                <value name="AuthenticationInfo" value="28"/>
                <value name="Authorization" value="29"/>
                <value name="CacheControl" value="30"/>
                <value name="CacheStatus" value="31"/>
                <value name="CalManagedID" value="32"/>
                <value name="CalDAVTimezones" value="33"/>
                <value name="CapsuleProtocol" value="34"/>
                <value name="CDNCacheControl" value="35"/>
                <value name="CDNLoop" value="36"/>
                <value name="CertNotAfter" value="37"/>
                <value name="CertNotBefore" value="38"/>
                <value name="ClearSiteData" value="39"/>
                <value name="ClientCert" value="40"/>
                <value name="ClientCertChain" value="41"/>
                <value name="Close" value="42"/>
                <value name="Connection" value="43"/>
                <value name="ContentDigest" value="44"/>
                <value name="ContentDisposition" value="45"/>
                <value name="ContentEncoding" value="46"/>
                <value name="ContentID" value="47"/>
                <value name="ContentLanguage" value="48"/>
                <value name="ContentLength" value="49"/>
                <value name="ContentLocation" value="50"/>
                <value name="ContentRange" value="51"/>
                <value name="ContentSecurityPolicy" value="52"/>
                <value name="ContentSecurityPolicyReportOnly" value="53"/>
                <value name="ContentType" value="54"/>
                <value name="Cookie" value="55"/>
                <value name="CrossOriginEmbedderPolicy" value="56"/>
                <value name="CrossOriginEmbedderPolicyReportOnly" value="57"/>
                <value name="CrossOriginOpenerPolicy" value="58"/>
                <value name="CrossOriginOpenerPolicyReportOnly" value="59"/>
                <value name="CrossOriginResourcePolicy" value="60"/>
                <value name="DASL" value="61"/>
                <value name="Date" value="62"/>
                <value name="DAV" value="63"/>
                <value name="DeltaBase" value="64"/>
                <value name="Depth" value="65"/>
                <value name="Destination" value="66"/>
                <value name="DifferentialID" value="67"/>
                <value name="DPoP" value="68"/>
                <value name="DPoPNonce" value="69"/>
                <value name="EarlyData" value="70"/>
                <value name="ETag" value="71"/>
                <value name="Expect" value="72"/>
                <value name="ExpectCT" value="73"/>
                <value name="Expires" value="74"/>
                <value name="Forwarded" value="75"/>
                <value name="From" value="76"/>
                <value name="Hobareg" value="77"/>
                <value name="Host" value="78"/>
                <value name="If" value="79"/>
                <value name="IfMatch" value="80"/>
                <value name="IfModifiedSince" value="81"/>
                <value name="IfNoneMatch" value="82"/>
                <value name="IfRange" value="83"/>
                <value name="IfScheduleTagMatch" value="84"/>
                <value name="IfUnmodifiedSince" value="85"/>
                <value name="IM" value="86"/>
                <value name="IncludeReferredTokenBindingID" value="87"/>
                <value name="KeepAlive" value="88"/>
                <value name="Label" value="89"/>
                <value name="LastEventID" value="90"/>
                <value name="LastModified" value="91"/>
                <value name="Link" value="92"/>
                <value name="Location" value="93"/>
                <value name="LockToken" value="94"/>
                <value name="MaxForwards" value="95"/>
                <value name="MementoDatetime" value="96"/>
                <value name="Meter" value="97"/>
                <value name="MIMEVersion" value="98"/>
                <value name="Negotiate" value="99"/>
                <value name="NEL" value="100"/>
                <value name="ODataEntityId" value="101"/>
                <value name="ODataIsolation" value="102"/>
                <value name="ODataMaxVersion" value="103"/>
                <value name="ODataVersion" value="104"/>
                <value name="OptionalWWWAuthenticate" value="105"/>
                <value name="OrderingType" value="106"/>
                <value name="Origin" value="107"/>
                <value name="OriginAgentCluster" value="108"/>
                <value name="OSCORE" value="109"/>
                <value name="OSLCCoreVersion" value="110"/>
                <value name="Overwrite" value="111"/>
                <value name="PingFrom" value="112"/>
                <value name="PingTo" value="113"/>
                <value name="Position" value="114"/>
                <value name="Prefer" value="115"/>
                <value name="PreferenceApplied" value="116"/>
                <value name="Priority" value="117"/>
                <value name="ProxyAuthenticate" value="118"/>
                <value name="ProxyAuthenticationInfo" value="119"/>
                <value name="ProxyAuthorization" value="120"/>
                <value name="ProxyStatus" value="121"/>
                <value name="PublicKeyPins" value="122"/>
                <value name="PublicKeyPinsReportOnly" value="123"/>
                <value name="Range" value="124"/>
                <value name="RedirectRef" value="125"/>
                <value name="Referer" value="126"/>
                <value name="Refresh" value="127"/>
                <value name="ReplayNonce" value="128"/>
                <value name="ReprDigest" value="129"/>
                <value name="RetryAfter" value="130"/>
                <value name="ScheduleReply" value="131"/>
                <value name="ScheduleTag" value="132"/>
                <value name="SecPurpose" value="133"/>
                <value name="SecTokenBinding" value="134"/>
                <value name="SecWebSocketAccept" value="135"/>
                <value name="SecWebSocketExtensions" value="136"/>
                <value name="SecWebSocketKey" value="137"/>
                <value name="SecWebSocketProtocol" value="138"/>
                <value name="SecWebSocketVersion" value="139"/>
                <value name="Server" value="140"/>
                <value name="ServerTiming" value="141"/>
                <value name="SetCookie" value="142"/>
                <value name="Signature" value="143"/>
                <value name="SignatureInput" value="144"/>
                <value name="SLUG" value="145"/>
                <value name="SoapAction" value="146"/>
                <value name="StatusURI" value="147"/>
                <value name="StrictTransportSecurity" value="148"/>
                <value name="Sunset" value="149"/>
                <value name="SurrogateCapability" value="150"/>
                <value name="SurrogateControl" value="151"/>
                <value name="TCN" value="152"/>
                <value name="TE" value="153"/>
                <value name="Timeout" value="154"/>
                <value name="Topic" value="155"/>
                <value name="Traceparent" value="156"/>
                <value name="Tracestate" value="157"/>
                <value name="Trailer" value="158"/>
                <value name="TransferEncoding" value="159"/>
                <value name="TTL" value="160"/>
                <value name="Upgrade" value="161"/>
                <value name="Urgency" value="162"/>
                <value name="UserAgent" value="163"/>
                <value name="VariantVary" value="164"/>
                <value name="Vary" value="165"/>
                <value name="Via" value="166"/>
                <value name="WantContentDigest" value="167"/>
                <value name="WantReprDigest" value="168"/>
                <value name="WWWAuthenticate" value="169"/>
                <value name="XContentTypeOptions" value="170"/>
                <value name="XFrameOptions" value="171"/>
                <value name="AcceptCharset" value="172"/>
                <value name="CPEPInfo" value="173"/>
                <value name="Pragma" value="174"/>
                <value name="ProtocolInfo" value="175"/>
                <value name="ProtocolQuery" value="176"/>
            </enum>
        </class>
        <class name="QHttpMultiPart" href="qhttpmultipart.html" status="active" access="public" location="qhttpmultipart.h" documented="true" groups="network" bases="QObject" module="QtNetwork" brief="Resembles a MIME multipart message to be sent over HTTP">
            <function name="QHttpMultiPart" fullname="QHttpMultiPart::QHttpMultiPart" href="qhttpmultipart.html#QHttpMultiPart" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="constructor" explicit="true" signature="QHttpMultiPart(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="QHttpMultiPart" fullname="QHttpMultiPart::QHttpMultiPart" href="qhttpmultipart.html#QHttpMultiPart-1" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QHttpMultiPart(QHttpMultiPart::ContentType contentType, QObject *parent)">
                <parameter type="QHttpMultiPart::ContentType" name="contentType" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="append" fullname="QHttpMultiPart::append" href="qhttpmultipart.html#append" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void append(const QHttpPart &amp;httpPart)">
                <parameter type="const QHttpPart &amp;" name="httpPart" default=""/>
            </function>
            <function name="boundary" fullname="QHttpMultiPart::boundary" href="qhttpmultipart.html#boundary" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray boundary() const"/>
            <function name="setBoundary" fullname="QHttpMultiPart::setBoundary" href="qhttpmultipart.html#setBoundary" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setBoundary(const QByteArray &amp;boundary)">
                <parameter type="const QByteArray &amp;" name="boundary" default=""/>
            </function>
            <function name="setContentType" fullname="QHttpMultiPart::setContentType" href="qhttpmultipart.html#setContentType" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setContentType(QHttpMultiPart::ContentType contentType)">
                <parameter type="QHttpMultiPart::ContentType" name="contentType" default=""/>
            </function>
            <function name="~QHttpMultiPart" fullname="QHttpMultiPart::~QHttpMultiPart" href="qhttpmultipart.html#dtor.QHttpMultiPart" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QHttpMultiPart()"/>
            <enum name="ContentType" fullname="QHttpMultiPart::ContentType" href="qhttpmultipart.html#ContentType-enum" status="active" access="public" location="qhttpmultipart.h" documented="true">
                <value name="MixedType" value="0"/>
                <value name="RelatedType" value="1"/>
                <value name="FormDataType" value="2"/>
                <value name="AlternativeType" value="3"/>
            </enum>
        </class>
        <class name="QHttpPart" href="qhttppart.html" status="active" access="public" location="qhttpmultipart.h" documented="true" groups="network,shared" module="QtNetwork" brief="Holds a body part to be used inside a HTTP multipart MIME message">
            <function name="QHttpPart" fullname="QHttpPart::QHttpPart" href="qhttppart.html#QHttpPart" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="constructor" signature="QHttpPart()"/>
            <function name="QHttpPart" fullname="QHttpPart::QHttpPart" href="qhttppart.html#QHttpPart-1" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QHttpPart(const QHttpPart &amp;other)">
                <parameter type="const QHttpPart &amp;" name="other" default=""/>
            </function>
            <function name="operator!=" fullname="QHttpPart::operator!=" href="qhttppart.html#operator-not-eq" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QHttpPart &amp;other) const">
                <parameter type="const QHttpPart &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QHttpPart::operator=" href="qhttppart.html#operator-eq-1" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QHttpPart &amp;" signature="QHttpPart &amp; operator=(const QHttpPart &amp;other)">
                <parameter type="const QHttpPart &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QHttpPart::operator==" href="qhttppart.html#operator-eq-eq" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QHttpPart &amp;other) const">
                <parameter type="const QHttpPart &amp;" name="other" default=""/>
            </function>
            <function name="setBody" fullname="QHttpPart::setBody" href="qhttppart.html#setBody" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setBody(const QByteArray &amp;body)">
                <parameter type="const QByteArray &amp;" name="body" default=""/>
            </function>
            <function name="setBodyDevice" fullname="QHttpPart::setBodyDevice" href="qhttppart.html#setBodyDevice" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setBodyDevice(QIODevice *device)">
                <parameter type="QIODevice *" name="device" default=""/>
            </function>
            <function name="setHeader" fullname="QHttpPart::setHeader" href="qhttppart.html#setHeader" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setRawHeader" fullname="QHttpPart::setRawHeader" href="qhttppart.html#setRawHeader" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" type="void" signature="void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
                <parameter type="const QByteArray &amp;" name="headerValue" default=""/>
            </function>
            <function name="swap" fullname="QHttpPart::swap" href="qhttppart.html#swap" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QHttpPart &amp;other)">
                <parameter type="QHttpPart &amp;" name="other" default=""/>
            </function>
            <function name="~QHttpPart" fullname="QHttpPart::~QHttpPart" href="qhttppart.html#dtor.QHttpPart" status="active" access="public" location="qhttpmultipart.h" documented="true" meta="destructor" noexcept="true" signature="~QHttpPart()"/>
        </class>
        <class name="QIPv6Address" href="qipv6address.html" status="ignored" access="public" location="qhostaddress.h"/>
        <class name="QLocalServer" href="qlocalserver.html" status="active" access="public" location="qlocalserver.h" documented="true" bases="QObject" module="QtNetwork" brief="Local socket based server">
            <function name="QLocalServer" fullname="QLocalServer::QLocalServer" href="qlocalserver.html#QLocalServer" status="active" access="public" location="qlocalserver.h" documented="true" meta="constructor" explicit="true" signature="QLocalServer(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="bindableSocketOptions" fullname="QLocalServer::bindableSocketOptions" href="qlocalserver.html#socketOptions-prop" status="active" access="public" location="qlocalserver.h" meta="plain" associated-property="socketOptions" type="QBindable&lt;QLocalServer::SocketOptions&gt;" signature="QBindable&lt;QLocalServer::SocketOptions&gt; bindableSocketOptions()"/>
            <function name="close" fullname="QLocalServer::close" href="qlocalserver.html#close" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" type="void" signature="void close()"/>
            <function name="errorString" fullname="QLocalServer::errorString" href="qlocalserver.html#errorString" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="QString" signature="QString errorString() const"/>
            <function name="fullServerName" fullname="QLocalServer::fullServerName" href="qlocalserver.html#fullServerName" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="QString" signature="QString fullServerName() const"/>
            <function name="hasPendingConnections" fullname="QLocalServer::hasPendingConnections" href="qlocalserver.html#hasPendingConnections" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" virtual="virtual" const="true" type="bool" signature="bool hasPendingConnections() const"/>
            <function name="incomingConnection" fullname="QLocalServer::incomingConnection" href="qlocalserver.html#incomingConnection" status="active" access="protected" location="qlocalserver.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void incomingConnection(quintptr socketDescriptor)">
                <parameter type="quintptr" name="socketDescriptor" default=""/>
            </function>
            <function name="isListening" fullname="QLocalServer::isListening" href="qlocalserver.html#isListening" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="bool" signature="bool isListening() const"/>
            <function name="listen" fullname="QLocalServer::listen" href="qlocalserver.html#listen" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" type="bool" signature="bool listen(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="listen" fullname="QLocalServer::listen" href="qlocalserver.html#listen-1" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool listen(qintptr socketDescriptor)">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
            </function>
            <function name="listenBacklogSize" fullname="QLocalServer::listenBacklogSize" href="qlocalserver.html#listenBacklogSize" status="active" access="public" location="qlocalserver.h" documented="true" since="6.3" meta="plain" const="true" type="int" signature="int listenBacklogSize() const"/>
            <function name="maxPendingConnections" fullname="QLocalServer::maxPendingConnections" href="qlocalserver.html#maxPendingConnections" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="int" signature="int maxPendingConnections() const"/>
            <function name="newConnection" fullname="QLocalServer::newConnection" href="qlocalserver.html#newConnection" status="active" access="public" location="qlocalserver.h" documented="true" meta="signal" type="void" signature="void newConnection()"/>
            <function name="nextPendingConnection" fullname="QLocalServer::nextPendingConnection" href="qlocalserver.html#nextPendingConnection" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" virtual="virtual" type="QLocalSocket *" signature="QLocalSocket * nextPendingConnection()"/>
            <function name="removeServer" fullname="QLocalServer::removeServer" href="qlocalserver.html#removeServer" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" static="true" type="bool" signature="bool removeServer(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="serverError" fullname="QLocalServer::serverError" href="qlocalserver.html#serverError" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="QAbstractSocket::SocketError" signature="QAbstractSocket::SocketError serverError() const"/>
            <function name="serverName" fullname="QLocalServer::serverName" href="qlocalserver.html#serverName" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="QString" signature="QString serverName() const"/>
            <function name="setListenBacklogSize" fullname="QLocalServer::setListenBacklogSize" href="qlocalserver.html#setListenBacklogSize" status="active" access="public" location="qlocalserver.h" documented="true" since="6.3" meta="plain" type="void" signature="void setListenBacklogSize(int size)">
                <parameter type="int" name="size" default=""/>
            </function>
            <function name="setMaxPendingConnections" fullname="QLocalServer::setMaxPendingConnections" href="qlocalserver.html#setMaxPendingConnections" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" type="void" signature="void setMaxPendingConnections(int numConnections)">
                <parameter type="int" name="numConnections" default=""/>
            </function>
            <function name="setSocketOptions" fullname="QLocalServer::setSocketOptions" href="qlocalserver.html#socketOptions-prop" status="active" access="public" location="qlocalserver.h" meta="plain" associated-property="socketOptions" type="void" signature="void setSocketOptions(QLocalServer::SocketOptions options)">
                <parameter type="QLocalServer::SocketOptions" name="options" default=""/>
            </function>
            <function name="socketDescriptor" fullname="QLocalServer::socketDescriptor" href="qlocalserver.html#socketDescriptor" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" type="qintptr" signature="qintptr socketDescriptor() const"/>
            <function name="socketOptions" fullname="QLocalServer::socketOptions" href="qlocalserver.html#socketOptions" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" const="true" associated-property="socketOptions" type="QLocalServer::SocketOptions" signature="QLocalServer::SocketOptions socketOptions() const"/>
            <function name="waitForNewConnection" fullname="QLocalServer::waitForNewConnection" href="qlocalserver.html#waitForNewConnection" status="active" access="public" location="qlocalserver.h" documented="true" meta="plain" type="bool" signature="bool waitForNewConnection(int msec, bool *timedOut)">
                <parameter type="int" name="msec" default="0"/>
                <parameter type="bool *" name="timedOut" default="nullptr"/>
            </function>
            <function name="~QLocalServer" fullname="QLocalServer::~QLocalServer" href="qlocalserver.html#dtor.QLocalServer" status="active" access="public" location="qlocalserver.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QLocalServer()"/>
            <enum name="SocketOption" fullname="QLocalServer::SocketOption" href="qlocalserver.html#SocketOption-enum" status="active" access="public" location="qlocalserver.h" documented="true" typedef="QLocalServer::SocketOptions">
                <value name="NoOptions" value="0x0"/>
                <value name="UserAccessOption" value="0x01"/>
                <value name="GroupAccessOption" value="0x2"/>
                <value name="OtherAccessOption" value="0x4"/>
                <value name="WorldAccessOption" value="0x7"/>
                <value name="AbstractNamespaceOption" value="0x8"/>
            </enum>
            <typedef name="SocketOptions" fullname="QLocalServer::SocketOptions" href="qlocalserver.html#SocketOption-enum" status="active" access="public" location="qlocalserver.h" enum="QLocalServer::SocketOption"/>
            <property name="socketOptions" fullname="QLocalServer::socketOptions" href="qlocalserver.html#socketOptions-prop" status="active" access="public" location="qlocalserver.h" documented="true" bindable="true" brief="The socket options that control how the socket operates">
                <getter name="socketOptions"/>
                <setter name="setSocketOptions"/>
                <bindable name="bindableSocketOptions"/>
            </property>
        </class>
        <class name="QLocalSocket" href="qlocalsocket.html" status="active" access="public" location="qlocalsocket.h" documented="true" bases="QIODevice" module="QtNetwork" brief="Local socket">
            <function name="QLocalSocket" fullname="QLocalSocket::QLocalSocket" href="qlocalsocket.html#QLocalSocket" status="active" access="public" location="qlocalsocket.h" documented="true" meta="constructor" signature="QLocalSocket(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="abort" fullname="QLocalSocket::abort" href="qlocalsocket.html#abort" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="void" signature="void abort()"/>
            <function name="bindableSocketOptions" fullname="QLocalSocket::bindableSocketOptions" href="qlocalsocket.html#socketOptions-prop" status="active" access="public" location="qlocalsocket.h" meta="plain" associated-property="socketOptions" type="QBindable&lt;QLocalSocket::SocketOptions&gt;" signature="QBindable&lt;QLocalSocket::SocketOptions&gt; bindableSocketOptions()"/>
            <function name="bytesAvailable" fullname="QLocalSocket::bytesAvailable" href="qlocalsocket.html#bytesAvailable" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesAvailable() const override"/>
            <function name="bytesToWrite" fullname="QLocalSocket::bytesToWrite" href="qlocalsocket.html#bytesToWrite" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesToWrite() const override"/>
            <function name="canReadLine" fullname="QLocalSocket::canReadLine" href="qlocalsocket.html#canReadLine" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="bool" signature="bool canReadLine() const override"/>
            <function name="close" fullname="QLocalSocket::close" href="qlocalsocket.html#close" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void close() override"/>
            <function name="connectToServer" fullname="QLocalSocket::connectToServer" href="qlocalsocket.html#connectToServer" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="void" signature="void connectToServer(QIODeviceBase::OpenMode openMode)">
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="connectToServer" fullname="QLocalSocket::connectToServer" href="qlocalsocket.html#connectToServer-1" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void connectToServer(const QString &amp;name, QIODeviceBase::OpenMode openMode)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="connected" fullname="QLocalSocket::connected" href="qlocalsocket.html#connected" status="active" access="public" location="qlocalsocket.h" documented="true" meta="signal" type="void" signature="void connected()"/>
            <function name="disconnectFromServer" fullname="QLocalSocket::disconnectFromServer" href="qlocalsocket.html#disconnectFromServer" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="void" signature="void disconnectFromServer()"/>
            <function name="disconnected" fullname="QLocalSocket::disconnected" href="qlocalsocket.html#disconnected" status="active" access="public" location="qlocalsocket.h" documented="true" meta="signal" type="void" signature="void disconnected()"/>
            <function name="error" fullname="QLocalSocket::error" href="qlocalsocket.html#error" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="QLocalSocket::LocalSocketError" signature="QLocalSocket::LocalSocketError error() const"/>
            <function name="errorOccurred" fullname="QLocalSocket::errorOccurred" href="qlocalsocket.html#errorOccurred" status="active" access="public" location="qlocalsocket.h" documented="true" meta="signal" type="void" signature="void errorOccurred(QLocalSocket::LocalSocketError socketError)">
                <parameter type="QLocalSocket::LocalSocketError" name="socketError" default=""/>
            </function>
            <function name="flush" fullname="QLocalSocket::flush" href="qlocalsocket.html#flush" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="bool" signature="bool flush()"/>
            <function name="fullServerName" fullname="QLocalSocket::fullServerName" href="qlocalsocket.html#fullServerName" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="QString" signature="QString fullServerName() const"/>
            <function name="isSequential" fullname="QLocalSocket::isSequential" href="qlocalsocket.html#isSequential" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="bool" signature="bool isSequential() const override"/>
            <function name="isValid" fullname="QLocalSocket::isValid" href="qlocalsocket.html#isValid" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="bool" signature="bool isValid() const"/>
            <function name="open" fullname="QLocalSocket::open" href="qlocalsocket.html#open" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool open(QIODeviceBase::OpenMode openMode) override">
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="readBufferSize" fullname="QLocalSocket::readBufferSize" href="qlocalsocket.html#readBufferSize" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 readBufferSize() const"/>
            <function name="readData" fullname="QLocalSocket::readData" href="qlocalsocket.html#readData" status="active" access="protected" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readData(char *data, qint64 c) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="c" default=""/>
            </function>
            <function name="readLineData" fullname="QLocalSocket::readLineData" href="qlocalsocket.html#readLineData" status="active" access="protected" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readLineData(char *data, qint64 maxSize) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="serverName" fullname="QLocalSocket::serverName" href="qlocalsocket.html#serverName" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="QString" signature="QString serverName() const"/>
            <function name="setReadBufferSize" fullname="QLocalSocket::setReadBufferSize" href="qlocalsocket.html#setReadBufferSize" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="void" signature="void setReadBufferSize(qint64 size)">
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="setServerName" fullname="QLocalSocket::setServerName" href="qlocalsocket.html#setServerName" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="void" signature="void setServerName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="setSocketDescriptor" fullname="QLocalSocket::setSocketDescriptor" href="qlocalsocket.html#setSocketDescriptor" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="bool" signature="bool setSocketDescriptor(qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState, QIODeviceBase::OpenMode openMode)">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
                <parameter type="QLocalSocket::LocalSocketState" name="socketState" default="ConnectedState"/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="setSocketOptions" fullname="QLocalSocket::setSocketOptions" href="qlocalsocket.html#socketOptions-prop" status="active" access="public" location="qlocalsocket.h" meta="plain" associated-property="socketOptions" type="void" signature="void setSocketOptions(QLocalSocket::SocketOptions option)">
                <parameter type="QLocalSocket::SocketOptions" name="option" default=""/>
            </function>
            <function name="skipData" fullname="QLocalSocket::skipData" href="qlocalsocket.html#skipData" status="active" access="protected" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 skipData(qint64 maxSize) override">
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="socketDescriptor" fullname="QLocalSocket::socketDescriptor" href="qlocalsocket.html#socketDescriptor" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="qintptr" signature="qintptr socketDescriptor() const"/>
            <function name="socketOptions" fullname="QLocalSocket::socketOptions" href="qlocalsocket.html#socketOptions-prop" status="active" access="public" location="qlocalsocket.h" meta="plain" const="true" associated-property="socketOptions" type="QLocalSocket::SocketOptions" signature="QLocalSocket::SocketOptions socketOptions() const"/>
            <function name="state" fullname="QLocalSocket::state" href="qlocalsocket.html#state" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" const="true" type="QLocalSocket::LocalSocketState" signature="QLocalSocket::LocalSocketState state() const"/>
            <function name="stateChanged" fullname="QLocalSocket::stateChanged" href="qlocalsocket.html#stateChanged" status="active" access="public" location="qlocalsocket.h" documented="true" meta="signal" type="void" signature="void stateChanged(QLocalSocket::LocalSocketState socketState)">
                <parameter type="QLocalSocket::LocalSocketState" name="socketState" default=""/>
            </function>
            <function name="waitForBytesWritten" fullname="QLocalSocket::waitForBytesWritten" href="qlocalsocket.html#waitForBytesWritten" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForBytesWritten(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForConnected" fullname="QLocalSocket::waitForConnected" href="qlocalsocket.html#waitForConnected" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="bool" signature="bool waitForConnected(int msecs)">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForDisconnected" fullname="QLocalSocket::waitForDisconnected" href="qlocalsocket.html#waitForDisconnected" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" type="bool" signature="bool waitForDisconnected(int msecs)">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForReadyRead" fullname="QLocalSocket::waitForReadyRead" href="qlocalsocket.html#waitForReadyRead" status="active" access="public" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForReadyRead(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="writeData" fullname="QLocalSocket::writeData" href="qlocalsocket.html#writeData" status="active" access="protected" location="qlocalsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 writeData(const char *data, qint64 c) override">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="qint64" name="c" default=""/>
            </function>
            <function name="~QLocalSocket" fullname="QLocalSocket::~QLocalSocket" href="qlocalsocket.html#dtor.QLocalSocket" status="active" access="public" location="qlocalsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QLocalSocket()"/>
            <enum name="LocalSocketError" fullname="QLocalSocket::LocalSocketError" href="qlocalsocket.html#LocalSocketError-enum" status="active" access="public" location="qlocalsocket.h" documented="true">
                <value name="ConnectionRefusedError" value="QAbstractSocket::ConnectionRefusedError"/>
                <value name="PeerClosedError" value="QAbstractSocket::RemoteHostClosedError"/>
                <value name="ServerNotFoundError" value="QAbstractSocket::HostNotFoundError"/>
                <value name="SocketAccessError" value="QAbstractSocket::SocketAccessError"/>
                <value name="SocketResourceError" value="QAbstractSocket::SocketResourceError"/>
                <value name="SocketTimeoutError" value="QAbstractSocket::SocketTimeoutError"/>
                <value name="DatagramTooLargeError" value="QAbstractSocket::DatagramTooLargeError"/>
                <value name="ConnectionError" value="QAbstractSocket::NetworkError"/>
                <value name="UnsupportedSocketOperationError" value="QAbstractSocket::UnsupportedSocketOperationError"/>
                <value name="UnknownSocketError" value="QAbstractSocket::UnknownSocketError"/>
                <value name="OperationError" value="QAbstractSocket::OperationError"/>
            </enum>
            <enum name="LocalSocketState" fullname="QLocalSocket::LocalSocketState" href="qlocalsocket.html#LocalSocketState-enum" status="active" access="public" location="qlocalsocket.h" documented="true">
                <value name="UnconnectedState" value="QAbstractSocket::UnconnectedState"/>
                <value name="ConnectingState" value="QAbstractSocket::ConnectingState"/>
                <value name="ConnectedState" value="QAbstractSocket::ConnectedState"/>
                <value name="ClosingState" value="QAbstractSocket::ClosingState"/>
            </enum>
            <enum name="SocketOption" fullname="QLocalSocket::SocketOption" href="qlocalsocket.html#SocketOption-enum" status="active" access="public" location="qlocalsocket.h" since="6.2" documented="true" typedef="QLocalSocket::SocketOptions">
                <value name="NoOptions" value="0x00"/>
                <value name="AbstractNamespaceOption" value="0x01"/>
            </enum>
            <typedef name="SocketOptions" fullname="QLocalSocket::SocketOptions" href="qlocalsocket.html#SocketOption-enum" status="active" access="public" location="qlocalsocket.h" enum="QLocalSocket::SocketOption"/>
            <property name="socketOptions" fullname="QLocalSocket::socketOptions" href="qlocalsocket.html#socketOptions-prop" status="active" access="public" location="qlocalsocket.h" since="6.2" documented="true" bindable="true" brief="The socket options">
                <getter name="socketOptions"/>
                <setter name="setSocketOptions"/>
                <bindable name="bindableSocketOptions"/>
            </property>
        </class>
        <struct name="QMetaTypeId" href="qmetatypeid.html" status="ignored" access="public" location="qnetworkrequest.h"/>
        <class threadsafety="reentrant" name="QNetworkAccessManager" href="qnetworkaccessmanager.html" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" groups="network" bases="QObject" module="QtNetwork" brief="Allows the application to send network requests and receive replies">
            <function name="QNetworkAccessManager" fullname="QNetworkAccessManager::QNetworkAccessManager" href="qnetworkaccessmanager.html#QNetworkAccessManager" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="constructor" explicit="true" signature="QNetworkAccessManager(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="addStrictTransportSecurityHosts" fullname="QNetworkAccessManager::addStrictTransportSecurityHosts" href="qnetworkaccessmanager.html#addStrictTransportSecurityHosts" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void addStrictTransportSecurityHosts(const QList&lt;QHstsPolicy&gt; &amp;knownHosts)">
                <parameter type="const QList&lt;QHstsPolicy&gt; &amp;" name="knownHosts" default=""/>
            </function>
            <function name="authenticationRequired" fullname="QNetworkAccessManager::authenticationRequired" href="qnetworkaccessmanager.html#authenticationRequired" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void authenticationRequired(QNetworkReply *reply, QAuthenticator *authenticator)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
                <parameter type="QAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="autoDeleteReplies" fullname="QNetworkAccessManager::autoDeleteReplies" href="qnetworkaccessmanager.html#autoDeleteReplies" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="bool" signature="bool autoDeleteReplies() const"/>
            <function name="cache" fullname="QNetworkAccessManager::cache" href="qnetworkaccessmanager.html#cache" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QAbstractNetworkCache *" signature="QAbstractNetworkCache * cache() const"/>
            <function name="clearAccessCache" fullname="QNetworkAccessManager::clearAccessCache" href="qnetworkaccessmanager.html#clearAccessCache" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void clearAccessCache()"/>
            <function name="clearConnectionCache" fullname="QNetworkAccessManager::clearConnectionCache" href="qnetworkaccessmanager.html#clearConnectionCache" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void clearConnectionCache()"/>
            <function name="connectToHost" fullname="QNetworkAccessManager::connectToHost" href="qnetworkaccessmanager.html#connectToHost" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void connectToHost(const QString &amp;hostName, quint16 port)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default="80"/>
            </function>
            <function name="connectToHostEncrypted" fullname="QNetworkAccessManager::connectToHostEncrypted" href="qnetworkaccessmanager.html#connectToHostEncrypted" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void connectToHostEncrypted(const QString &amp;hostName, quint16 port, const QSslConfiguration &amp;sslConfiguration)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default="443"/>
                <parameter type="const QSslConfiguration &amp;" name="sslConfiguration" default="QSslConfiguration::defaultConfiguration()"/>
            </function>
            <function name="connectToHostEncrypted" fullname="QNetworkAccessManager::connectToHostEncrypted" href="qnetworkaccessmanager.html#connectToHostEncrypted-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void connectToHostEncrypted(const QString &amp;hostName, quint16 port, const QSslConfiguration &amp;sslConfiguration, const QString &amp;peerName)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="const QSslConfiguration &amp;" name="sslConfiguration" default=""/>
                <parameter type="const QString &amp;" name="peerName" default=""/>
            </function>
            <function name="cookieJar" fullname="QNetworkAccessManager::cookieJar" href="qnetworkaccessmanager.html#cookieJar" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QNetworkCookieJar *" signature="QNetworkCookieJar * cookieJar() const"/>
            <function name="createRequest" fullname="QNetworkAccessManager::createRequest" href="qnetworkaccessmanager.html#createRequest" status="active" access="protected" location="qnetworkaccessmanager.h" documented="true" meta="plain" virtual="virtual" type="QNetworkReply *" signature="QNetworkReply * createRequest(QNetworkAccessManager::Operation op, const QNetworkRequest &amp;originalReq, QIODevice *outgoingData)">
                <parameter type="QNetworkAccessManager::Operation" name="op" default=""/>
                <parameter type="const QNetworkRequest &amp;" name="originalReq" default=""/>
                <parameter type="QIODevice *" name="outgoingData" default="nullptr"/>
            </function>
            <function name="deleteResource" fullname="QNetworkAccessManager::deleteResource" href="qnetworkaccessmanager.html#deleteResource" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * deleteResource(const QNetworkRequest &amp;request)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
            </function>
            <function name="enableStrictTransportSecurityStore" fullname="QNetworkAccessManager::enableStrictTransportSecurityStore" href="qnetworkaccessmanager.html#enableStrictTransportSecurityStore" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void enableStrictTransportSecurityStore(bool enabled, const QString &amp;storeDir)">
                <parameter type="bool" name="enabled" default=""/>
                <parameter type="const QString &amp;" name="storeDir" default="QString()"/>
            </function>
            <function name="encrypted" fullname="QNetworkAccessManager::encrypted" href="qnetworkaccessmanager.html#encrypted" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void encrypted(QNetworkReply *reply)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
            </function>
            <function name="finished" fullname="QNetworkAccessManager::finished" href="qnetworkaccessmanager.html#finished" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void finished(QNetworkReply *reply)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
            </function>
            <function name="get" fullname="QNetworkAccessManager::get" href="qnetworkaccessmanager.html#get" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
            </function>
            <function name="get" fullname="QNetworkAccessManager::get" href="qnetworkaccessmanager.html#get-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" since="6.7" meta="plain" overload="true" overload-number="1" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, QIODevice *data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
            </function>
            <function name="get" fullname="QNetworkAccessManager::get" href="qnetworkaccessmanager.html#get-2" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" since="6.7" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, const QByteArray &amp;data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
            </function>
            <function name="head" fullname="QNetworkAccessManager::head" href="qnetworkaccessmanager.html#head" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * head(const QNetworkRequest &amp;request)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
            </function>
            <function name="isStrictTransportSecurityEnabled" fullname="QNetworkAccessManager::isStrictTransportSecurityEnabled" href="qnetworkaccessmanager.html#isStrictTransportSecurityEnabled" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="bool" signature="bool isStrictTransportSecurityEnabled() const"/>
            <function name="isStrictTransportSecurityStoreEnabled" fullname="QNetworkAccessManager::isStrictTransportSecurityStoreEnabled" href="qnetworkaccessmanager.html#isStrictTransportSecurityStoreEnabled" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="bool" signature="bool isStrictTransportSecurityStoreEnabled() const"/>
            <function name="post" fullname="QNetworkAccessManager::post" href="qnetworkaccessmanager.html#post" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, QIODevice *data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
            </function>
            <function name="post" fullname="QNetworkAccessManager::post" href="qnetworkaccessmanager.html#post-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="1" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, const QByteArray &amp;data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
            </function>
            <function name="post" fullname="QNetworkAccessManager::post" href="qnetworkaccessmanager.html#post-2" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QHttpMultiPart *" name="multiPart" default=""/>
            </function>
            <function name="preSharedKeyAuthenticationRequired" fullname="QNetworkAccessManager::preSharedKeyAuthenticationRequired" href="qnetworkaccessmanager.html#preSharedKeyAuthenticationRequired" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void preSharedKeyAuthenticationRequired(QNetworkReply *reply, QSslPreSharedKeyAuthenticator *authenticator)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
                <parameter type="QSslPreSharedKeyAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="proxy" fullname="QNetworkAccessManager::proxy" href="qnetworkaccessmanager.html#proxy" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QNetworkProxy" signature="QNetworkProxy proxy() const"/>
            <function name="proxyAuthenticationRequired" fullname="QNetworkAccessManager::proxyAuthenticationRequired" href="qnetworkaccessmanager.html#proxyAuthenticationRequired" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void proxyAuthenticationRequired(const QNetworkProxy &amp;proxy, QAuthenticator *authenticator)">
                <parameter type="const QNetworkProxy &amp;" name="proxy" default=""/>
                <parameter type="QAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="proxyFactory" fullname="QNetworkAccessManager::proxyFactory" href="qnetworkaccessmanager.html#proxyFactory" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QNetworkProxyFactory *" signature="QNetworkProxyFactory * proxyFactory() const"/>
            <function name="put" fullname="QNetworkAccessManager::put" href="qnetworkaccessmanager.html#put" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, QIODevice *data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
            </function>
            <function name="put" fullname="QNetworkAccessManager::put" href="qnetworkaccessmanager.html#put-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="1" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, const QByteArray &amp;data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
            </function>
            <function name="put" fullname="QNetworkAccessManager::put" href="qnetworkaccessmanager.html#put-2" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, QHttpMultiPart *multiPart)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QHttpMultiPart *" name="multiPart" default=""/>
            </function>
            <function name="redirectPolicy" fullname="QNetworkAccessManager::redirectPolicy" href="qnetworkaccessmanager.html#redirectPolicy" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QNetworkRequest::RedirectPolicy" signature="QNetworkRequest::RedirectPolicy redirectPolicy() const"/>
            <function name="sendCustomRequest" fullname="QNetworkAccessManager::sendCustomRequest" href="qnetworkaccessmanager.html#sendCustomRequest" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;verb, QIODevice *data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="verb" default=""/>
                <parameter type="QIODevice *" name="data" default="nullptr"/>
            </function>
            <function name="sendCustomRequest" fullname="QNetworkAccessManager::sendCustomRequest" href="qnetworkaccessmanager.html#sendCustomRequest-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="1" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;verb, const QByteArray &amp;data)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="verb" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
            </function>
            <function name="sendCustomRequest" fullname="QNetworkAccessManager::sendCustomRequest" href="qnetworkaccessmanager.html#sendCustomRequest-2" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;verb, QHttpMultiPart *multiPart)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="verb" default=""/>
                <parameter type="QHttpMultiPart *" name="multiPart" default=""/>
            </function>
            <function name="setAutoDeleteReplies" fullname="QNetworkAccessManager::setAutoDeleteReplies" href="qnetworkaccessmanager.html#setAutoDeleteReplies" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setAutoDeleteReplies(bool shouldAutoDelete)">
                <parameter type="bool" name="shouldAutoDelete" default=""/>
            </function>
            <function name="setCache" fullname="QNetworkAccessManager::setCache" href="qnetworkaccessmanager.html#setCache" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setCache(QAbstractNetworkCache *cache)">
                <parameter type="QAbstractNetworkCache *" name="cache" default=""/>
            </function>
            <function name="setCookieJar" fullname="QNetworkAccessManager::setCookieJar" href="qnetworkaccessmanager.html#setCookieJar" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setCookieJar(QNetworkCookieJar *cookieJar)">
                <parameter type="QNetworkCookieJar *" name="cookieJar" default=""/>
            </function>
            <function name="setProxy" fullname="QNetworkAccessManager::setProxy" href="qnetworkaccessmanager.html#setProxy" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setProxy(const QNetworkProxy &amp;proxy)">
                <parameter type="const QNetworkProxy &amp;" name="proxy" default=""/>
            </function>
            <function name="setProxyFactory" fullname="QNetworkAccessManager::setProxyFactory" href="qnetworkaccessmanager.html#setProxyFactory" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setProxyFactory(QNetworkProxyFactory *factory)">
                <parameter type="QNetworkProxyFactory *" name="factory" default=""/>
            </function>
            <function name="setRedirectPolicy" fullname="QNetworkAccessManager::setRedirectPolicy" href="qnetworkaccessmanager.html#setRedirectPolicy" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setRedirectPolicy(QNetworkRequest::RedirectPolicy policy)">
                <parameter type="QNetworkRequest::RedirectPolicy" name="policy" default=""/>
            </function>
            <function name="setStrictTransportSecurityEnabled" fullname="QNetworkAccessManager::setStrictTransportSecurityEnabled" href="qnetworkaccessmanager.html#setStrictTransportSecurityEnabled" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setStrictTransportSecurityEnabled(bool enabled)">
                <parameter type="bool" name="enabled" default=""/>
            </function>
            <function name="setTransferTimeout" fullname="QNetworkAccessManager::setTransferTimeout" href="qnetworkaccessmanager.html#setTransferTimeout" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" type="void" signature="void setTransferTimeout(int timeout)">
                <parameter type="int" name="timeout" default=""/>
            </function>
            <function name="setTransferTimeout" fullname="QNetworkAccessManager::setTransferTimeout" href="qnetworkaccessmanager.html#setTransferTimeout-1" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" since="6.7" meta="plain" overload="true" overload-number="1" type="void" signature="void setTransferTimeout(std::chrono::milliseconds duration)">
                <parameter type="std::chrono::milliseconds" name="duration" default="QNetworkRequest::DefaultTransferTimeout"/>
            </function>
            <function name="sslErrors" fullname="QNetworkAccessManager::sslErrors" href="qnetworkaccessmanager.html#sslErrors" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="signal" type="void" signature="void sslErrors(QNetworkReply *reply, const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="strictTransportSecurityHosts" fullname="QNetworkAccessManager::strictTransportSecurityHosts" href="qnetworkaccessmanager.html#strictTransportSecurityHosts" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="QList&lt;QHstsPolicy&gt;" signature="QList&lt;QHstsPolicy&gt; strictTransportSecurityHosts() const"/>
            <function name="supportedSchemes" fullname="QNetworkAccessManager::supportedSchemes" href="qnetworkaccessmanager.html#supportedSchemes" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" virtual="virtual" const="true" type="QStringList" signature="QStringList supportedSchemes() const"/>
            <function name="supportedSchemesImplementation" fullname="QNetworkAccessManager::supportedSchemesImplementation" href="qnetworkaccessmanager-obsolete.html#supportedSchemesImplementation" status="deprecated" access="protected" location="qnetworkaccessmanager.h" documented="true" meta="slot" const="true" type="QStringList" signature="QStringList supportedSchemesImplementation() const"/>
            <function name="transferTimeout" fullname="QNetworkAccessManager::transferTimeout" href="qnetworkaccessmanager.html#transferTimeout" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="plain" const="true" type="int" signature="int transferTimeout() const"/>
            <function name="transferTimeoutAsDuration" fullname="QNetworkAccessManager::transferTimeoutAsDuration" href="qnetworkaccessmanager.html#transferTimeoutAsDuration" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" since="6.7" meta="plain" const="true" type="std::chrono::milliseconds" signature="std::chrono::milliseconds transferTimeoutAsDuration() const"/>
            <function name="~QNetworkAccessManager" fullname="QNetworkAccessManager::~QNetworkAccessManager" href="qnetworkaccessmanager.html#dtor.QNetworkAccessManager" status="active" access="public" location="qnetworkaccessmanager.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QNetworkAccessManager()"/>
            <enum name="Operation" fullname="QNetworkAccessManager::Operation" href="qnetworkaccessmanager.html#Operation-enum" status="active" access="public" location="qnetworkaccessmanager.h" documented="true">
                <value name="HeadOperation" value="1"/>
                <value name="GetOperation" value="2"/>
                <value name="PutOperation" value="3"/>
                <value name="PostOperation" value="4"/>
                <value name="DeleteOperation" value="5"/>
                <value name="CustomOperation" value="6"/>
                <value name="UnknownOperation" value="0"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QNetworkAddressEntry" href="qnetworkaddressentry.html" status="active" access="public" location="qnetworkinterface.h" documented="true" groups="network,shared" module="QtNetwork" brief="Stores one IP address supported by a network interface, along with its associated netmask and broadcast address">
            <function name="QNetworkAddressEntry" fullname="QNetworkAddressEntry::QNetworkAddressEntry" href="qnetworkaddressentry.html#QNetworkAddressEntry" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="constructor" signature="QNetworkAddressEntry()"/>
            <function name="QNetworkAddressEntry" fullname="QNetworkAddressEntry::QNetworkAddressEntry" href="qnetworkaddressentry.html#QNetworkAddressEntry-1" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QNetworkAddressEntry(const QNetworkAddressEntry &amp;other)">
                <parameter type="const QNetworkAddressEntry &amp;" name="other" default=""/>
            </function>
            <function name="broadcast" fullname="QNetworkAddressEntry::broadcast" href="qnetworkaddressentry.html#broadcast" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress broadcast() const"/>
            <function name="clearAddressLifetime" fullname="QNetworkAddressEntry::clearAddressLifetime" href="qnetworkaddressentry.html#clearAddressLifetime" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void clearAddressLifetime()"/>
            <function name="dnsEligibility" fullname="QNetworkAddressEntry::dnsEligibility" href="qnetworkaddressentry.html#dnsEligibility" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QNetworkAddressEntry::DnsEligibilityStatus" signature="QNetworkAddressEntry::DnsEligibilityStatus dnsEligibility() const"/>
            <function name="ip" fullname="QNetworkAddressEntry::ip" href="qnetworkaddressentry.html#ip" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress ip() const"/>
            <function name="isLifetimeKnown" fullname="QNetworkAddressEntry::isLifetimeKnown" href="qnetworkaddressentry.html#isLifetimeKnown" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool isLifetimeKnown() const"/>
            <function name="isPermanent" fullname="QNetworkAddressEntry::isPermanent" href="qnetworkaddressentry.html#isPermanent" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool isPermanent() const"/>
            <function name="isTemporary" fullname="QNetworkAddressEntry::isTemporary" href="qnetworkaddressentry.html#isTemporary" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool isTemporary() const"/>
            <function name="netmask" fullname="QNetworkAddressEntry::netmask" href="qnetworkaddressentry.html#netmask" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress netmask() const"/>
            <function name="operator!=" fullname="QNetworkAddressEntry::operator!=" href="qnetworkaddressentry.html#operator-not-eq" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkAddressEntry &amp;other) const">
                <parameter type="const QNetworkAddressEntry &amp;" name="other" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkaddressentry.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="2" since="6.2" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkAddressEntry &amp;entry)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkAddressEntry &amp;" name="entry" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkinterface.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="3" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkInterface &amp;networkInterface)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="networkInterface" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkAddressEntry::operator=" href="qnetworkaddressentry.html#operator-eq-1" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkAddressEntry &amp;" signature="QNetworkAddressEntry &amp; operator=(const QNetworkAddressEntry &amp;other)">
                <parameter type="const QNetworkAddressEntry &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkAddressEntry::operator==" href="qnetworkaddressentry.html#operator-eq-eq" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkAddressEntry &amp;other) const">
                <parameter type="const QNetworkAddressEntry &amp;" name="other" default=""/>
            </function>
            <function name="preferredLifetime" fullname="QNetworkAddressEntry::preferredLifetime" href="qnetworkaddressentry.html#preferredLifetime" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QDeadlineTimer" signature="QDeadlineTimer preferredLifetime() const"/>
            <function name="prefixLength" fullname="QNetworkAddressEntry::prefixLength" href="qnetworkaddressentry.html#prefixLength" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="int" signature="int prefixLength() const"/>
            <function name="setAddressLifetime" fullname="QNetworkAddressEntry::setAddressLifetime" href="qnetworkaddressentry.html#setAddressLifetime" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setAddressLifetime(QDeadlineTimer preferred, QDeadlineTimer validity)">
                <parameter type="QDeadlineTimer" name="preferred" default=""/>
                <parameter type="QDeadlineTimer" name="validity" default=""/>
            </function>
            <function name="setBroadcast" fullname="QNetworkAddressEntry::setBroadcast" href="qnetworkaddressentry.html#setBroadcast" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setBroadcast(const QHostAddress &amp;newBroadcast)">
                <parameter type="const QHostAddress &amp;" name="newBroadcast" default=""/>
            </function>
            <function name="setDnsEligibility" fullname="QNetworkAddressEntry::setDnsEligibility" href="qnetworkaddressentry.html#setDnsEligibility" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setDnsEligibility(QNetworkAddressEntry::DnsEligibilityStatus status)">
                <parameter type="QNetworkAddressEntry::DnsEligibilityStatus" name="status" default=""/>
            </function>
            <function name="setIp" fullname="QNetworkAddressEntry::setIp" href="qnetworkaddressentry.html#setIp" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setIp(const QHostAddress &amp;newIp)">
                <parameter type="const QHostAddress &amp;" name="newIp" default=""/>
            </function>
            <function name="setNetmask" fullname="QNetworkAddressEntry::setNetmask" href="qnetworkaddressentry.html#setNetmask" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setNetmask(const QHostAddress &amp;newNetmask)">
                <parameter type="const QHostAddress &amp;" name="newNetmask" default=""/>
            </function>
            <function name="setPrefixLength" fullname="QNetworkAddressEntry::setPrefixLength" href="qnetworkaddressentry.html#setPrefixLength" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" type="void" signature="void setPrefixLength(int length)">
                <parameter type="int" name="length" default=""/>
            </function>
            <function name="swap" fullname="QNetworkAddressEntry::swap" href="qnetworkaddressentry.html#swap" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkAddressEntry &amp;other)">
                <parameter type="QNetworkAddressEntry &amp;" name="other" default=""/>
            </function>
            <function name="validityLifetime" fullname="QNetworkAddressEntry::validityLifetime" href="qnetworkaddressentry.html#validityLifetime" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QDeadlineTimer" signature="QDeadlineTimer validityLifetime() const"/>
            <function name="~QNetworkAddressEntry" fullname="QNetworkAddressEntry::~QNetworkAddressEntry" href="qnetworkaddressentry.html#dtor.QNetworkAddressEntry" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkAddressEntry()"/>
            <enum name="DnsEligibilityStatus" fullname="QNetworkAddressEntry::DnsEligibilityStatus" href="qnetworkaddressentry.html#DnsEligibilityStatus-enum" status="active" access="public" location="qnetworkinterface.h" documented="true">
                <value name="DnsEligibilityUnknown" value="-1"/>
                <value name="DnsIneligible" value="0"/>
                <value name="DnsEligible" value="1"/>
            </enum>
        </class>
        <class name="QNetworkCacheMetaData" href="qnetworkcachemetadata.html" status="active" access="public" location="qabstractnetworkcache.h" documented="true" groups="shared" module="QtNetwork" brief="Cache information">
            <function name="QNetworkCacheMetaData" fullname="QNetworkCacheMetaData::QNetworkCacheMetaData" href="qnetworkcachemetadata.html#QNetworkCacheMetaData" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="constructor" signature="QNetworkCacheMetaData()"/>
            <function name="QNetworkCacheMetaData" fullname="QNetworkCacheMetaData::QNetworkCacheMetaData" href="qnetworkcachemetadata.html#QNetworkCacheMetaData-1" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QNetworkCacheMetaData(const QNetworkCacheMetaData &amp;other)">
                <parameter type="const QNetworkCacheMetaData &amp;" name="other" default=""/>
            </function>
            <function name="attributes" fullname="QNetworkCacheMetaData::attributes" href="qnetworkcachemetadata.html#attributes" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="QNetworkCacheMetaData::AttributesMap" signature="QNetworkCacheMetaData::AttributesMap attributes() const"/>
            <function name="expirationDate" fullname="QNetworkCacheMetaData::expirationDate" href="qnetworkcachemetadata.html#expirationDate" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime expirationDate() const"/>
            <function name="isValid" fullname="QNetworkCacheMetaData::isValid" href="qnetworkcachemetadata.html#isValid" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="bool" signature="bool isValid() const"/>
            <function name="lastModified" fullname="QNetworkCacheMetaData::lastModified" href="qnetworkcachemetadata.html#lastModified" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime lastModified() const"/>
            <function name="operator!=" fullname="QNetworkCacheMetaData::operator!=" href="qnetworkcachemetadata.html#operator-not-eq" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkCacheMetaData &amp;other) const">
                <parameter type="const QNetworkCacheMetaData &amp;" name="other" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkcachemetadata.html#operator-lt-lt" status="active" access="public" location="qabstractnetworkcache.h" documented="true" related="0" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QNetworkCacheMetaData &amp;metaData)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qhostaddress.html#operator-lt-lt" status="active" access="public" location="qhostaddress.h" documented="true" related="1" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QHostAddress &amp;address)">
                <parameter type="QDataStream &amp;" name="out" default=""/>
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkaddressentry.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="2" since="6.2" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkAddressEntry &amp;entry)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkAddressEntry &amp;" name="entry" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkinterface.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="3" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkInterface &amp;networkInterface)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="networkInterface" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkCacheMetaData::operator=" href="qnetworkcachemetadata.html#operator-eq-1" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkCacheMetaData &amp;" signature="QNetworkCacheMetaData &amp; operator=(const QNetworkCacheMetaData &amp;other)">
                <parameter type="const QNetworkCacheMetaData &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkCacheMetaData::operator==" href="qnetworkcachemetadata.html#operator-eq-eq" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkCacheMetaData &amp;other) const">
                <parameter type="const QNetworkCacheMetaData &amp;" name="other" default=""/>
            </function>
            <function name="operator&gt;&gt;" href="qnetworkcachemetadata.html#operator-gt-gt" status="active" access="public" location="qabstractnetworkcache.h" documented="true" related="6" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QNetworkCacheMetaData &amp;metaData)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="operator&gt;&gt;" href="qhostaddress.html#operator-gt-gt" status="active" access="public" location="qhostaddress.h" documented="true" related="7" meta="plain" type="QDataStream &amp;" signature="QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QHostAddress &amp;address)">
                <parameter type="QDataStream &amp;" name="in" default=""/>
                <parameter type="QHostAddress &amp;" name="address" default=""/>
            </function>
            <function name="rawHeaders" fullname="QNetworkCacheMetaData::rawHeaders" href="qnetworkcachemetadata.html#rawHeaders" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="QNetworkCacheMetaData::RawHeaderList" signature="QNetworkCacheMetaData::RawHeaderList rawHeaders() const"/>
            <function name="saveToDisk" fullname="QNetworkCacheMetaData::saveToDisk" href="qnetworkcachemetadata.html#saveToDisk" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="bool" signature="bool saveToDisk() const"/>
            <function name="setAttributes" fullname="QNetworkCacheMetaData::setAttributes" href="qnetworkcachemetadata.html#setAttributes" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setAttributes(const QNetworkCacheMetaData::AttributesMap &amp;attributes)">
                <parameter type="const QNetworkCacheMetaData::AttributesMap &amp;" name="attributes" default=""/>
            </function>
            <function name="setExpirationDate" fullname="QNetworkCacheMetaData::setExpirationDate" href="qnetworkcachemetadata.html#setExpirationDate" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setExpirationDate(const QDateTime &amp;dateTime)">
                <parameter type="const QDateTime &amp;" name="dateTime" default=""/>
            </function>
            <function name="setLastModified" fullname="QNetworkCacheMetaData::setLastModified" href="qnetworkcachemetadata.html#setLastModified" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setLastModified(const QDateTime &amp;dateTime)">
                <parameter type="const QDateTime &amp;" name="dateTime" default=""/>
            </function>
            <function name="setRawHeaders" fullname="QNetworkCacheMetaData::setRawHeaders" href="qnetworkcachemetadata.html#setRawHeaders" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setRawHeaders(const QNetworkCacheMetaData::RawHeaderList &amp;list)">
                <parameter type="const QNetworkCacheMetaData::RawHeaderList &amp;" name="list" default=""/>
            </function>
            <function name="setSaveToDisk" fullname="QNetworkCacheMetaData::setSaveToDisk" href="qnetworkcachemetadata.html#setSaveToDisk" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setSaveToDisk(bool allow)">
                <parameter type="bool" name="allow" default=""/>
            </function>
            <function name="setUrl" fullname="QNetworkCacheMetaData::setUrl" href="qnetworkcachemetadata.html#setUrl" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" type="void" signature="void setUrl(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="swap" fullname="QNetworkCacheMetaData::swap" href="qnetworkcachemetadata.html#swap" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkCacheMetaData &amp;other)">
                <parameter type="QNetworkCacheMetaData &amp;" name="other" default=""/>
            </function>
            <function name="url" fullname="QNetworkCacheMetaData::url" href="qnetworkcachemetadata.html#url" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="plain" const="true" type="QUrl" signature="QUrl url() const"/>
            <function name="~QNetworkCacheMetaData" fullname="QNetworkCacheMetaData::~QNetworkCacheMetaData" href="qnetworkcachemetadata.html#dtor.QNetworkCacheMetaData" status="active" access="public" location="qabstractnetworkcache.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkCacheMetaData()"/>
            <typedef name="AttributesMap" fullname="QNetworkCacheMetaData::AttributesMap" href="qnetworkcachemetadata.html#AttributesMap-typedef" status="active" access="public" location="qabstractnetworkcache.h" documented="true"/>
            <typedef name="RawHeader" fullname="QNetworkCacheMetaData::RawHeader" href="qnetworkcachemetadata.html#RawHeader-typedef" status="active" access="public" location="qabstractnetworkcache.h" documented="true"/>
            <typedef name="RawHeaderList" fullname="QNetworkCacheMetaData::RawHeaderList" href="qnetworkcachemetadata.html#RawHeaderList-typedef" status="active" access="public" location="qabstractnetworkcache.h" documented="true"/>
        </class>
        <class name="QNetworkCookie" href="qnetworkcookie.html" status="active" access="public" location="qnetworkcookie.h" documented="true" groups="shared" module="QtNetwork" brief="Holds one network cookie">
            <function name="QNetworkCookie" fullname="QNetworkCookie::QNetworkCookie" href="qnetworkcookie.html#QNetworkCookie" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="constructor" explicit="true" signature="QNetworkCookie(const QByteArray &amp;name, const QByteArray &amp;value)">
                <parameter type="const QByteArray &amp;" name="name" default="QByteArray()"/>
                <parameter type="const QByteArray &amp;" name="value" default="QByteArray()"/>
            </function>
            <function name="QNetworkCookie" fullname="QNetworkCookie::QNetworkCookie" href="qnetworkcookie.html#QNetworkCookie-1" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QNetworkCookie(const QNetworkCookie &amp;other)">
                <parameter type="const QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="domain" fullname="QNetworkCookie::domain" href="qnetworkcookie.html#domain" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QString" signature="QString domain() const"/>
            <function name="expirationDate" fullname="QNetworkCookie::expirationDate" href="qnetworkcookie.html#expirationDate" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime expirationDate() const"/>
            <function name="hasSameIdentifier" fullname="QNetworkCookie::hasSameIdentifier" href="qnetworkcookie.html#hasSameIdentifier" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasSameIdentifier(const QNetworkCookie &amp;other) const">
                <parameter type="const QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="isHttpOnly" fullname="QNetworkCookie::isHttpOnly" href="qnetworkcookie.html#isHttpOnly" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool isHttpOnly() const"/>
            <function name="isSecure" fullname="QNetworkCookie::isSecure" href="qnetworkcookie.html#isSecure" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSecure() const"/>
            <function name="isSessionCookie" fullname="QNetworkCookie::isSessionCookie" href="qnetworkcookie.html#isSessionCookie" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSessionCookie() const"/>
            <function name="name" fullname="QNetworkCookie::name" href="qnetworkcookie.html#name" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray name() const"/>
            <function name="normalize" fullname="QNetworkCookie::normalize" href="qnetworkcookie.html#normalize" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void normalize(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="operator!=" fullname="QNetworkCookie::operator!=" href="qnetworkcookie.html#operator-not-eq" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkCookie &amp;other) const">
                <parameter type="const QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkCookie::operator=" href="qnetworkcookie.html#operator-eq-1" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkCookie &amp;" signature="QNetworkCookie &amp; operator=(const QNetworkCookie &amp;other)">
                <parameter type="const QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkCookie::operator==" href="qnetworkcookie.html#operator-eq-eq" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkCookie &amp;other) const">
                <parameter type="const QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="parseCookies" fullname="QNetworkCookie::parseCookies" href="qnetworkcookie.html#parseCookies" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" static="true" type="QList&lt;QNetworkCookie&gt;" signature="QList&lt;QNetworkCookie&gt; parseCookies(QByteArrayView cookieString)">
                <parameter type="QByteArrayView" name="cookieString" default=""/>
            </function>
            <function name="path" fullname="QNetworkCookie::path" href="qnetworkcookie.html#path" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QString" signature="QString path() const"/>
            <function name="sameSitePolicy" fullname="QNetworkCookie::sameSitePolicy" href="qnetworkcookie.html#sameSitePolicy" status="active" access="public" location="qnetworkcookie.h" documented="true" since="6.1" meta="plain" const="true" type="QNetworkCookie::SameSite" signature="QNetworkCookie::SameSite sameSitePolicy() const"/>
            <function name="setDomain" fullname="QNetworkCookie::setDomain" href="qnetworkcookie.html#setDomain" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setDomain(const QString &amp;domain)">
                <parameter type="const QString &amp;" name="domain" default=""/>
            </function>
            <function name="setExpirationDate" fullname="QNetworkCookie::setExpirationDate" href="qnetworkcookie.html#setExpirationDate" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setExpirationDate(const QDateTime &amp;date)">
                <parameter type="const QDateTime &amp;" name="date" default=""/>
            </function>
            <function name="setHttpOnly" fullname="QNetworkCookie::setHttpOnly" href="qnetworkcookie.html#setHttpOnly" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setHttpOnly(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="setName" fullname="QNetworkCookie::setName" href="qnetworkcookie.html#setName" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setName(const QByteArray &amp;cookieName)">
                <parameter type="const QByteArray &amp;" name="cookieName" default=""/>
            </function>
            <function name="setPath" fullname="QNetworkCookie::setPath" href="qnetworkcookie.html#setPath" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setPath(const QString &amp;path)">
                <parameter type="const QString &amp;" name="path" default=""/>
            </function>
            <function name="setSameSitePolicy" fullname="QNetworkCookie::setSameSitePolicy" href="qnetworkcookie.html#setSameSitePolicy" status="active" access="public" location="qnetworkcookie.h" documented="true" since="6.1" meta="plain" type="void" signature="void setSameSitePolicy(QNetworkCookie::SameSite sameSite)">
                <parameter type="QNetworkCookie::SameSite" name="sameSite" default=""/>
            </function>
            <function name="setSecure" fullname="QNetworkCookie::setSecure" href="qnetworkcookie.html#setSecure" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setSecure(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="setValue" fullname="QNetworkCookie::setValue" href="qnetworkcookie.html#setValue" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" type="void" signature="void setValue(const QByteArray &amp;value)">
                <parameter type="const QByteArray &amp;" name="value" default=""/>
            </function>
            <function name="swap" fullname="QNetworkCookie::swap" href="qnetworkcookie.html#swap" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkCookie &amp;other)">
                <parameter type="QNetworkCookie &amp;" name="other" default=""/>
            </function>
            <function name="toRawForm" fullname="QNetworkCookie::toRawForm" href="qnetworkcookie.html#toRawForm" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray toRawForm(QNetworkCookie::RawForm form) const">
                <parameter type="QNetworkCookie::RawForm" name="form" default="Full"/>
            </function>
            <function name="value" fullname="QNetworkCookie::value" href="qnetworkcookie.html#value" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray value() const"/>
            <function name="~QNetworkCookie" fullname="QNetworkCookie::~QNetworkCookie" href="qnetworkcookie.html#dtor.QNetworkCookie" status="active" access="public" location="qnetworkcookie.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkCookie()"/>
            <enum name="RawForm" fullname="QNetworkCookie::RawForm" href="qnetworkcookie.html#RawForm-enum" status="active" access="public" location="qnetworkcookie.h" documented="true">
                <value name="NameAndValueOnly" value="0"/>
                <value name="Full" value="1"/>
            </enum>
            <enum name="SameSite" fullname="QNetworkCookie::SameSite" href="qnetworkcookie.html#SameSite-enum" status="active" access="public" location="qnetworkcookie.h" since="6.1" documented="true" scoped="true">
                <value name="Default" value="0"/>
                <value name="None" value="1"/>
                <value name="Lax" value="2"/>
                <value name="Strict" value="3"/>
            </enum>
        </class>
        <class name="QNetworkCookieJar" href="qnetworkcookiejar.html" status="active" access="public" location="qnetworkcookiejar.h" documented="true" bases="QObject" module="QtNetwork" brief="Implements a simple jar of QNetworkCookie objects">
            <function name="QNetworkCookieJar" fullname="QNetworkCookieJar::QNetworkCookieJar" href="qnetworkcookiejar.html#QNetworkCookieJar" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="constructor" explicit="true" signature="QNetworkCookieJar(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="allCookies" fullname="QNetworkCookieJar::allCookies" href="qnetworkcookiejar.html#allCookies" status="active" access="protected" location="qnetworkcookiejar.h" documented="true" meta="plain" const="true" type="QList&lt;QNetworkCookie&gt;" signature="QList&lt;QNetworkCookie&gt; allCookies() const"/>
            <function name="cookiesForUrl" fullname="QNetworkCookieJar::cookiesForUrl" href="qnetworkcookiejar.html#cookiesForUrl" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" const="true" type="QList&lt;QNetworkCookie&gt;" signature="QList&lt;QNetworkCookie&gt; cookiesForUrl(const QUrl &amp;url) const">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="deleteCookie" fullname="QNetworkCookieJar::deleteCookie" href="qnetworkcookiejar.html#deleteCookie" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool deleteCookie(const QNetworkCookie &amp;cookie)">
                <parameter type="const QNetworkCookie &amp;" name="cookie" default=""/>
            </function>
            <function name="insertCookie" fullname="QNetworkCookieJar::insertCookie" href="qnetworkcookiejar.html#insertCookie" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool insertCookie(const QNetworkCookie &amp;cookie)">
                <parameter type="const QNetworkCookie &amp;" name="cookie" default=""/>
            </function>
            <function name="setAllCookies" fullname="QNetworkCookieJar::setAllCookies" href="qnetworkcookiejar.html#setAllCookies" status="active" access="protected" location="qnetworkcookiejar.h" documented="true" meta="plain" type="void" signature="void setAllCookies(const QList&lt;QNetworkCookie&gt; &amp;cookieList)">
                <parameter type="const QList&lt;QNetworkCookie&gt; &amp;" name="cookieList" default=""/>
            </function>
            <function name="setCookiesFromUrl" fullname="QNetworkCookieJar::setCookiesFromUrl" href="qnetworkcookiejar.html#setCookiesFromUrl" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool setCookiesFromUrl(const QList&lt;QNetworkCookie&gt; &amp;cookieList, const QUrl &amp;url)">
                <parameter type="const QList&lt;QNetworkCookie&gt; &amp;" name="cookieList" default=""/>
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="updateCookie" fullname="QNetworkCookieJar::updateCookie" href="qnetworkcookiejar.html#updateCookie" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" type="bool" signature="bool updateCookie(const QNetworkCookie &amp;cookie)">
                <parameter type="const QNetworkCookie &amp;" name="cookie" default=""/>
            </function>
            <function name="validateCookie" fullname="QNetworkCookieJar::validateCookie" href="qnetworkcookiejar.html#validateCookie" status="active" access="protected" location="qnetworkcookiejar.h" documented="true" meta="plain" virtual="virtual" const="true" type="bool" signature="bool validateCookie(const QNetworkCookie &amp;cookie, const QUrl &amp;url) const">
                <parameter type="const QNetworkCookie &amp;" name="cookie" default=""/>
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="~QNetworkCookieJar" fullname="QNetworkCookieJar::~QNetworkCookieJar" href="qnetworkcookiejar.html#dtor.QNetworkCookieJar" status="active" access="public" location="qnetworkcookiejar.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QNetworkCookieJar()"/>
        </class>
        <class threadsafety="reentrant" name="QNetworkDatagram" href="qnetworkdatagram.html" status="active" access="public" location="qnetworkdatagram.h" documented="true" groups="network" module="QtNetwork" brief="The data and metadata of a UDP datagram">
            <contents name="feature-support" title="Feature support" level="1"/>
            <function name="QNetworkDatagram" fullname="QNetworkDatagram::QNetworkDatagram" href="qnetworkdatagram.html#QNetworkDatagram" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="constructor" signature="QNetworkDatagram()"/>
            <function name="QNetworkDatagram" fullname="QNetworkDatagram::QNetworkDatagram" href="qnetworkdatagram.html#QNetworkDatagram-1" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="QNetworkDatagram(const QByteArray &amp;data, const QHostAddress &amp;destinationAddress, quint16 port)">
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QHostAddress &amp;" name="destinationAddress" default="QHostAddress()"/>
                <parameter type="quint16" name="port" default="0"/>
            </function>
            <function name="QNetworkDatagram" fullname="QNetworkDatagram::QNetworkDatagram" href="qnetworkdatagram.html#QNetworkDatagram-2" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QNetworkDatagram(const QNetworkDatagram &amp;other)">
                <parameter type="const QNetworkDatagram &amp;" name="other" default=""/>
            </function>
            <function name="clear" fullname="QNetworkDatagram::clear" href="qnetworkdatagram.html#clear" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void clear()"/>
            <function name="data" fullname="QNetworkDatagram::data" href="qnetworkdatagram.html#data" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray data() const"/>
            <function name="destinationAddress" fullname="QNetworkDatagram::destinationAddress" href="qnetworkdatagram.html#destinationAddress" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress destinationAddress() const"/>
            <function name="destinationPort" fullname="QNetworkDatagram::destinationPort" href="qnetworkdatagram.html#destinationPort" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="int" signature="int destinationPort() const"/>
            <function name="hopLimit" fullname="QNetworkDatagram::hopLimit" href="qnetworkdatagram.html#hopLimit" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="int" signature="int hopLimit() const"/>
            <function name="interfaceIndex" fullname="QNetworkDatagram::interfaceIndex" href="qnetworkdatagram.html#interfaceIndex" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="uint" signature="uint interfaceIndex() const"/>
            <function name="isNull" fullname="QNetworkDatagram::isNull" href="qnetworkdatagram.html#isNull" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="isValid" fullname="QNetworkDatagram::isValid" href="qnetworkdatagram.html#isValid" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="bool" signature="bool isValid() const"/>
            <function name="makeReply" fullname="QNetworkDatagram::makeReply" href="qnetworkdatagram.html#makeReply" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" refness="1" type="QNetworkDatagram" signature="QNetworkDatagram makeReply(const QByteArray &amp;payload) const &amp;">
                <parameter type="const QByteArray &amp;" name="payload" default=""/>
            </function>
            <function name="makeReply" fullname="QNetworkDatagram::makeReply" href="qnetworkdatagram.html#makeReply-1" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" overload="true" overload-number="1" refness="2" type="QNetworkDatagram" signature="QNetworkDatagram makeReply(const QByteArray &amp;payload) &amp;&amp;">
                <parameter type="const QByteArray &amp;" name="payload" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkDatagram::operator=" href="qnetworkdatagram.html#operator-eq" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="copy-assign" type="QNetworkDatagram &amp;" signature="QNetworkDatagram &amp; operator=(const QNetworkDatagram &amp;other)">
                <parameter type="const QNetworkDatagram &amp;" name="other" default=""/>
            </function>
            <function name="senderAddress" fullname="QNetworkDatagram::senderAddress" href="qnetworkdatagram.html#senderAddress" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress senderAddress() const"/>
            <function name="senderPort" fullname="QNetworkDatagram::senderPort" href="qnetworkdatagram.html#senderPort" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" const="true" type="int" signature="int senderPort() const"/>
            <function name="setData" fullname="QNetworkDatagram::setData" href="qnetworkdatagram.html#setData" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void setData(const QByteArray &amp;data)">
                <parameter type="const QByteArray &amp;" name="data" default=""/>
            </function>
            <function name="setDestination" fullname="QNetworkDatagram::setDestination" href="qnetworkdatagram.html#setDestination" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void setDestination(const QHostAddress &amp;address, quint16 port)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setHopLimit" fullname="QNetworkDatagram::setHopLimit" href="qnetworkdatagram.html#setHopLimit" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void setHopLimit(int count)">
                <parameter type="int" name="count" default=""/>
            </function>
            <function name="setInterfaceIndex" fullname="QNetworkDatagram::setInterfaceIndex" href="qnetworkdatagram.html#setInterfaceIndex" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void setInterfaceIndex(uint index)">
                <parameter type="uint" name="index" default=""/>
            </function>
            <function name="setSender" fullname="QNetworkDatagram::setSender" href="qnetworkdatagram.html#setSender" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" type="void" signature="void setSender(const QHostAddress &amp;address, quint16 port)">
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default="0"/>
            </function>
            <function name="swap" fullname="QNetworkDatagram::swap" href="qnetworkdatagram.html#swap" status="active" access="public" location="qnetworkdatagram.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkDatagram &amp;other)">
                <parameter type="QNetworkDatagram &amp;" name="other" default=""/>
            </function>
        </class>
        <class name="QNetworkDiskCache" href="qnetworkdiskcache.html" status="active" access="public" location="qnetworkdiskcache.h" documented="true" bases="QAbstractNetworkCache" module="QtNetwork" brief="Very basic disk cache">
            <function name="QNetworkDiskCache" fullname="QNetworkDiskCache::QNetworkDiskCache" href="qnetworkdiskcache.html#QNetworkDiskCache" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="constructor" explicit="true" signature="QNetworkDiskCache(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="cacheDirectory" fullname="QNetworkDiskCache::cacheDirectory" href="qnetworkdiskcache.html#cacheDirectory" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" const="true" type="QString" signature="QString cacheDirectory() const"/>
            <function name="cacheSize" fullname="QNetworkDiskCache::cacheSize" href="qnetworkdiskcache.html#cacheSize" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 cacheSize() const override"/>
            <function name="clear" fullname="QNetworkDiskCache::clear" href="qnetworkdiskcache.html#clear" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="slot" virtual="virtual" override="true" type="void" signature="void clear() override"/>
            <function name="data" fullname="QNetworkDiskCache::data" href="qnetworkdiskcache.html#data" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="QIODevice *" signature="QIODevice * data(const QUrl &amp;url) override">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="expire" fullname="QNetworkDiskCache::expire" href="qnetworkdiskcache.html#expire" status="active" access="protected" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" type="qint64" signature="qint64 expire()"/>
            <function name="fileMetaData" fullname="QNetworkDiskCache::fileMetaData" href="qnetworkdiskcache.html#fileMetaData" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" const="true" type="QNetworkCacheMetaData" signature="QNetworkCacheMetaData fileMetaData(const QString &amp;fileName) const">
                <parameter type="const QString &amp;" name="fileName" default=""/>
            </function>
            <function name="insert" fullname="QNetworkDiskCache::insert" href="qnetworkdiskcache.html#insert" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void insert(QIODevice *device) override">
                <parameter type="QIODevice *" name="device" default=""/>
            </function>
            <function name="maximumCacheSize" fullname="QNetworkDiskCache::maximumCacheSize" href="qnetworkdiskcache.html#maximumCacheSize" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 maximumCacheSize() const"/>
            <function name="metaData" fullname="QNetworkDiskCache::metaData" href="qnetworkdiskcache.html#metaData" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="QNetworkCacheMetaData" signature="QNetworkCacheMetaData metaData(const QUrl &amp;url) override">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="prepare" fullname="QNetworkDiskCache::prepare" href="qnetworkdiskcache.html#prepare" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="QIODevice *" signature="QIODevice * prepare(const QNetworkCacheMetaData &amp;metaData) override">
                <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="remove" fullname="QNetworkDiskCache::remove" href="qnetworkdiskcache.html#remove" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool remove(const QUrl &amp;url) override">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="setCacheDirectory" fullname="QNetworkDiskCache::setCacheDirectory" href="qnetworkdiskcache.html#setCacheDirectory" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" type="void" signature="void setCacheDirectory(const QString &amp;cacheDir)">
                <parameter type="const QString &amp;" name="cacheDir" default=""/>
            </function>
            <function name="setMaximumCacheSize" fullname="QNetworkDiskCache::setMaximumCacheSize" href="qnetworkdiskcache.html#setMaximumCacheSize" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" type="void" signature="void setMaximumCacheSize(qint64 size)">
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="updateMetaData" fullname="QNetworkDiskCache::updateMetaData" href="qnetworkdiskcache.html#updateMetaData" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void updateMetaData(const QNetworkCacheMetaData &amp;metaData) override">
                <parameter type="const QNetworkCacheMetaData &amp;" name="metaData" default=""/>
            </function>
            <function name="~QNetworkDiskCache" fullname="QNetworkDiskCache::~QNetworkDiskCache" href="qnetworkdiskcache.html#dtor.QNetworkDiskCache" status="active" access="public" location="qnetworkdiskcache.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QNetworkDiskCache()"/>
        </class>
        <class name="QNetworkInformation" href="qnetworkinformation.html" status="active" access="public" location="qnetworkinformation.h" since="6.1" documented="true" bases="QObject" module="QtNetwork" brief="Exposes various network information through native backends">
            <function name="availableBackends" fullname="QNetworkInformation::availableBackends" href="qnetworkinformation.html#availableBackends" status="active" access="public" location="qnetworkinformation.h" documented="true" meta="plain" static="true" type="QStringList" signature="QStringList availableBackends()"/>
            <function name="backendName" fullname="QNetworkInformation::backendName" href="qnetworkinformation.html#backendName" status="active" access="public" location="qnetworkinformation.h" documented="true" meta="plain" const="true" type="QString" signature="QString backendName() const"/>
            <function name="instance" fullname="QNetworkInformation::instance" href="qnetworkinformation.html#instance" status="active" access="public" location="qnetworkinformation.h" documented="true" meta="plain" static="true" type="QNetworkInformation *" signature="QNetworkInformation * instance()"/>
            <function name="isBehindCaptivePortal" fullname="QNetworkInformation::isBehindCaptivePortal" href="qnetworkinformation.html#isBehindCaptivePortal-prop" status="active" access="public" location="qnetworkinformation.h" meta="plain" const="true" associated-property="isBehindCaptivePortal" type="bool" signature="bool isBehindCaptivePortal() const"/>
            <function name="isBehindCaptivePortalChanged" fullname="QNetworkInformation::isBehindCaptivePortalChanged" href="qnetworkinformation.html#isBehindCaptivePortal-prop" status="active" access="public" location="qnetworkinformation.h" meta="signal" associated-property="isBehindCaptivePortal" type="void" signature="void isBehindCaptivePortalChanged(bool state)">
                <parameter type="bool" name="state" default=""/>
            </function>
            <function name="isMetered" fullname="QNetworkInformation::isMetered" href="qnetworkinformation.html#isMetered-prop" status="active" access="public" location="qnetworkinformation.h" meta="plain" const="true" associated-property="isMetered" type="bool" signature="bool isMetered() const"/>
            <function name="isMeteredChanged" fullname="QNetworkInformation::isMeteredChanged" href="qnetworkinformation.html#isMetered-prop" status="active" access="public" location="qnetworkinformation.h" meta="signal" associated-property="isMetered" type="void" signature="void isMeteredChanged(bool isMetered)">
                <parameter type="bool" name="isMetered" default=""/>
            </function>
            <function name="load" fullname="QNetworkInformation::load" href="qnetworkinformation-obsolete.html#load" status="deprecated" access="public" location="qnetworkinformation.h" documented="true" meta="plain" static="true" type="bool" signature="bool load(QStringView backend)">
                <parameter type="QStringView" name="backend" default=""/>
            </function>
            <function name="load" fullname="QNetworkInformation::load" href="qnetworkinformation-obsolete.html#load-1" status="deprecated" access="public" location="qnetworkinformation.h" documented="true" meta="plain" static="true" overload="true" overload-number="1" type="bool" signature="bool load(QNetworkInformation::Features features)">
                <parameter type="QNetworkInformation::Features" name="features" default=""/>
            </function>
            <function name="loadBackendByFeatures" fullname="QNetworkInformation::loadBackendByFeatures" href="qnetworkinformation.html#loadBackendByFeatures" status="active" access="public" location="qnetworkinformation.h" documented="true" since="6.4" meta="plain" static="true" type="bool" signature="bool loadBackendByFeatures(QNetworkInformation::Features features)">
                <parameter type="QNetworkInformation::Features" name="features" default=""/>
            </function>
            <function name="loadBackendByName" fullname="QNetworkInformation::loadBackendByName" href="qnetworkinformation.html#loadBackendByName" status="active" access="public" location="qnetworkinformation.h" documented="true" since="6.4" meta="plain" static="true" type="bool" signature="bool loadBackendByName(QStringView backend)">
                <parameter type="QStringView" name="backend" default=""/>
            </function>
            <function name="loadDefaultBackend" fullname="QNetworkInformation::loadDefaultBackend" href="qnetworkinformation.html#loadDefaultBackend" status="active" access="public" location="qnetworkinformation.h" documented="true" since="6.3" meta="plain" static="true" type="bool" signature="bool loadDefaultBackend()"/>
            <function name="reachability" fullname="QNetworkInformation::reachability" href="qnetworkinformation.html#reachability-prop" status="active" access="public" location="qnetworkinformation.h" meta="plain" const="true" associated-property="reachability" type="QNetworkInformation::Reachability" signature="QNetworkInformation::Reachability reachability() const"/>
            <function name="reachabilityChanged" fullname="QNetworkInformation::reachabilityChanged" href="qnetworkinformation.html#reachability-prop" status="active" access="public" location="qnetworkinformation.h" meta="signal" associated-property="reachability" type="void" signature="void reachabilityChanged(QNetworkInformation::Reachability newReachability)">
                <parameter type="QNetworkInformation::Reachability" name="newReachability" default=""/>
            </function>
            <function name="supportedFeatures" fullname="QNetworkInformation::supportedFeatures" href="qnetworkinformation.html#supportedFeatures" status="active" access="public" location="qnetworkinformation.h" documented="true" since="6.3" meta="plain" const="true" type="QNetworkInformation::Features" signature="QNetworkInformation::Features supportedFeatures() const"/>
            <function name="supports" fullname="QNetworkInformation::supports" href="qnetworkinformation.html#supports" status="active" access="public" location="qnetworkinformation.h" documented="true" meta="plain" const="true" type="bool" signature="bool supports(QNetworkInformation::Features features) const">
                <parameter type="QNetworkInformation::Features" name="features" default=""/>
            </function>
            <function name="transportMedium" fullname="QNetworkInformation::transportMedium" href="qnetworkinformation.html#transportMedium-prop" status="active" access="public" location="qnetworkinformation.h" meta="plain" const="true" associated-property="transportMedium" type="QNetworkInformation::TransportMedium" signature="QNetworkInformation::TransportMedium transportMedium() const"/>
            <function name="transportMediumChanged" fullname="QNetworkInformation::transportMediumChanged" href="qnetworkinformation.html#transportMedium-prop" status="active" access="public" location="qnetworkinformation.h" meta="signal" associated-property="transportMedium" type="void" signature="void transportMediumChanged(QNetworkInformation::TransportMedium current)">
                <parameter type="QNetworkInformation::TransportMedium" name="current" default=""/>
            </function>
            <enum name="Feature" fullname="QNetworkInformation::Feature" href="qnetworkinformation.html#Feature-enum" status="active" access="public" location="qnetworkinformation.h" documented="true" scoped="true" typedef="QNetworkInformation::Features">
                <value name="Reachability" value="0x1"/>
                <value name="CaptivePortal" value="0x2"/>
                <value name="TransportMedium" value="0x4"/>
                <value name="Metered" value="0x8"/>
            </enum>
            <enum name="Reachability" fullname="QNetworkInformation::Reachability" href="qnetworkinformation.html#Reachability-enum" status="active" access="public" location="qnetworkinformation.h" documented="true" scoped="true">
                <value name="Unknown" value="0"/>
                <value name="Disconnected" value="1"/>
                <value name="Local" value="2"/>
                <value name="Site" value="3"/>
                <value name="Online" value="4"/>
            </enum>
            <enum name="TransportMedium" fullname="QNetworkInformation::TransportMedium" href="qnetworkinformation.html#TransportMedium-enum" status="active" access="public" location="qnetworkinformation.h" since="6.3" documented="true" scoped="true">
                <value name="Unknown" value="0"/>
                <value name="Ethernet" value="1"/>
                <value name="Cellular" value="2"/>
                <value name="WiFi" value="3"/>
                <value name="Bluetooth" value="4"/>
            </enum>
            <typedef name="Features" fullname="QNetworkInformation::Features" href="qnetworkinformation.html#Feature-enum" status="active" access="public" location="qnetworkinformation.h" enum="QNetworkInformation::Feature"/>
            <property name="isBehindCaptivePortal" fullname="QNetworkInformation::isBehindCaptivePortal" href="qnetworkinformation.html#isBehindCaptivePortal-prop" status="active" access="public" location="qnetworkinformation.h" since="6.2" documented="true" writable="false" brief="Lets you know if the user's device is behind a captive portal">
                <getter name="isBehindCaptivePortal"/>
                <notifier name="isBehindCaptivePortalChanged"/>
            </property>
            <property name="isMetered" fullname="QNetworkInformation::isMetered" href="qnetworkinformation.html#isMetered-prop" status="active" access="public" location="qnetworkinformation.h" since="6.3" documented="true" writable="false" brief="Check if the current connection is metered">
                <getter name="isMetered"/>
                <notifier name="isMeteredChanged"/>
            </property>
            <property name="reachability" fullname="QNetworkInformation::reachability" href="qnetworkinformation.html#reachability-prop" status="active" access="public" location="qnetworkinformation.h" documented="true" writable="false" brief="Current state of the system's network connectivity">
                <getter name="reachability"/>
                <notifier name="reachabilityChanged"/>
            </property>
            <property name="transportMedium" fullname="QNetworkInformation::transportMedium" href="qnetworkinformation.html#transportMedium-prop" status="active" access="public" location="qnetworkinformation.h" since="6.3" documented="true" writable="false" brief="Currently active transport medium for the application">
                <getter name="transportMedium"/>
                <notifier name="transportMediumChanged"/>
            </property>
        </class>
        <class threadsafety="reentrant" name="QNetworkInterface" href="qnetworkinterface.html" status="active" access="public" location="qnetworkinterface.h" documented="true" groups="network,shared" module="QtNetwork" brief="Listing of the host's IP addresses and network interfaces">
            <function name="QNetworkInterface" fullname="QNetworkInterface::QNetworkInterface" href="qnetworkinterface.html#QNetworkInterface" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="constructor" signature="QNetworkInterface()"/>
            <function name="QNetworkInterface" fullname="QNetworkInterface::QNetworkInterface" href="qnetworkinterface.html#QNetworkInterface-1" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QNetworkInterface(const QNetworkInterface &amp;other)">
                <parameter type="const QNetworkInterface &amp;" name="other" default=""/>
            </function>
            <function name="addressEntries" fullname="QNetworkInterface::addressEntries" href="qnetworkinterface.html#addressEntries" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QList&lt;QNetworkAddressEntry&gt;" signature="QList&lt;QNetworkAddressEntry&gt; addressEntries() const"/>
            <function name="allAddresses" fullname="QNetworkInterface::allAddresses" href="qnetworkinterface.html#allAddresses" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="QList&lt;QHostAddress&gt;" signature="QList&lt;QHostAddress&gt; allAddresses()"/>
            <function name="allInterfaces" fullname="QNetworkInterface::allInterfaces" href="qnetworkinterface.html#allInterfaces" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="QList&lt;QNetworkInterface&gt;" signature="QList&lt;QNetworkInterface&gt; allInterfaces()"/>
            <function name="flags" fullname="QNetworkInterface::flags" href="qnetworkinterface.html#flags" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QNetworkInterface::InterfaceFlags" signature="QNetworkInterface::InterfaceFlags flags() const"/>
            <function name="hardwareAddress" fullname="QNetworkInterface::hardwareAddress" href="qnetworkinterface.html#hardwareAddress" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QString" signature="QString hardwareAddress() const"/>
            <function name="humanReadableName" fullname="QNetworkInterface::humanReadableName" href="qnetworkinterface.html#humanReadableName" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QString" signature="QString humanReadableName() const"/>
            <function name="index" fullname="QNetworkInterface::index" href="qnetworkinterface.html#index" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="int" signature="int index() const"/>
            <function name="interfaceFromIndex" fullname="QNetworkInterface::interfaceFromIndex" href="qnetworkinterface.html#interfaceFromIndex" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="QNetworkInterface" signature="QNetworkInterface interfaceFromIndex(int index)">
                <parameter type="int" name="index" default=""/>
            </function>
            <function name="interfaceFromName" fullname="QNetworkInterface::interfaceFromName" href="qnetworkinterface.html#interfaceFromName" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="QNetworkInterface" signature="QNetworkInterface interfaceFromName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="interfaceIndexFromName" fullname="QNetworkInterface::interfaceIndexFromName" href="qnetworkinterface.html#interfaceIndexFromName" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="int" signature="int interfaceIndexFromName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="interfaceNameFromIndex" fullname="QNetworkInterface::interfaceNameFromIndex" href="qnetworkinterface.html#interfaceNameFromIndex" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" static="true" type="QString" signature="QString interfaceNameFromIndex(int index)">
                <parameter type="int" name="index" default=""/>
            </function>
            <function name="isValid" fullname="QNetworkInterface::isValid" href="qnetworkinterface.html#isValid" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="bool" signature="bool isValid() const"/>
            <function name="maximumTransmissionUnit" fullname="QNetworkInterface::maximumTransmissionUnit" href="qnetworkinterface.html#maximumTransmissionUnit" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="int" signature="int maximumTransmissionUnit() const"/>
            <function name="name" fullname="QNetworkInterface::name" href="qnetworkinterface.html#name" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator&lt;&lt;" href="qnetworkinterface.html#operator-lt-lt" status="active" access="public" location="qnetworkinterface.h" documented="true" related="3" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkInterface &amp;networkInterface)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="networkInterface" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkInterface::operator=" href="qnetworkinterface.html#operator-eq-1" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkInterface &amp;" signature="QNetworkInterface &amp; operator=(const QNetworkInterface &amp;other)">
                <parameter type="const QNetworkInterface &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QNetworkInterface::swap" href="qnetworkinterface.html#swap" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkInterface &amp;other)">
                <parameter type="QNetworkInterface &amp;" name="other" default=""/>
            </function>
            <function name="type" fullname="QNetworkInterface::type" href="qnetworkinterface.html#type" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="plain" const="true" type="QNetworkInterface::InterfaceType" signature="QNetworkInterface::InterfaceType type() const"/>
            <function name="~QNetworkInterface" fullname="QNetworkInterface::~QNetworkInterface" href="qnetworkinterface.html#dtor.QNetworkInterface" status="active" access="public" location="qnetworkinterface.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkInterface()"/>
            <enum name="InterfaceFlag" fullname="QNetworkInterface::InterfaceFlag" href="qnetworkinterface.html#InterfaceFlag-enum" status="active" access="public" location="qnetworkinterface.h" documented="true" typedef="QNetworkInterface::InterfaceFlags">
                <value name="IsUp" value="0x1"/>
                <value name="IsRunning" value="0x2"/>
                <value name="CanBroadcast" value="0x4"/>
                <value name="IsLoopBack" value="0x8"/>
                <value name="IsPointToPoint" value="0x10"/>
                <value name="CanMulticast" value="0x20"/>
            </enum>
            <enum name="InterfaceType" fullname="QNetworkInterface::InterfaceType" href="qnetworkinterface.html#InterfaceType-enum" status="active" access="public" location="qnetworkinterface.h" documented="true">
                <value name="Loopback" value="1"/>
                <value name="Virtual" value="2"/>
                <value name="Ethernet" value="3"/>
                <value name="Slip" value="4"/>
                <value name="CanBus" value="5"/>
                <value name="Ppp" value="6"/>
                <value name="Fddi" value="7"/>
                <value name="Wifi" value="8"/>
                <value name="Ieee80211" value="Wifi"/>
                <value name="Phonet" value="9"/>
                <value name="Ieee802154" value="10"/>
                <value name="SixLoWPAN" value="11"/>
                <value name="Ieee80216" value="12"/>
                <value name="Ieee1394" value="13"/>
                <value name="Unknown" value="0"/>
            </enum>
            <typedef name="InterfaceFlags" fullname="QNetworkInterface::InterfaceFlags" href="qnetworkinterface.html#InterfaceFlag-enum" status="active" access="public" location="qnetworkinterface.h" enum="QNetworkInterface::InterfaceFlag"/>
        </class>
        <class threadsafety="reentrant" name="QNetworkProxy" href="qnetworkproxy.html" status="active" access="public" location="qnetworkproxy.h" documented="true" groups="network,shared" module="QtNetwork" brief="Network layer proxy">
            <contents name="socks5" title="SOCKS5" level="1"/>
            <function name="QNetworkProxy" fullname="QNetworkProxy::QNetworkProxy" href="qnetworkproxy.html#QNetworkProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" signature="QNetworkProxy()"/>
            <function name="QNetworkProxy" fullname="QNetworkProxy::QNetworkProxy" href="qnetworkproxy.html#QNetworkProxy-1" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="QNetworkProxy(QNetworkProxy::ProxyType type, const QString &amp;hostName, quint16 port, const QString &amp;user, const QString &amp;password)">
                <parameter type="QNetworkProxy::ProxyType" name="type" default=""/>
                <parameter type="const QString &amp;" name="hostName" default="QString()"/>
                <parameter type="quint16" name="port" default="0"/>
                <parameter type="const QString &amp;" name="user" default="QString()"/>
                <parameter type="const QString &amp;" name="password" default="QString()"/>
            </function>
            <function name="QNetworkProxy" fullname="QNetworkProxy::QNetworkProxy" href="qnetworkproxy.html#QNetworkProxy-2" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QNetworkProxy(const QNetworkProxy &amp;other)">
                <parameter type="const QNetworkProxy &amp;" name="other" default=""/>
            </function>
            <function name="applicationProxy" fullname="QNetworkProxy::applicationProxy" href="qnetworkproxy.html#applicationProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="QNetworkProxy" signature="QNetworkProxy applicationProxy()"/>
            <function name="capabilities" fullname="QNetworkProxy::capabilities" href="qnetworkproxy.html#capabilities" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QNetworkProxy::Capabilities" signature="QNetworkProxy::Capabilities capabilities() const"/>
            <function name="hasRawHeader" fullname="QNetworkProxy::hasRawHeader" href="qnetworkproxy.html#hasRawHeader" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasRawHeader(const QByteArray &amp;headerName) const">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
            </function>
            <function name="header" fullname="QNetworkProxy::header" href="qnetworkproxy.html#header" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant header(QNetworkRequest::KnownHeaders header) const">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
            </function>
            <function name="hostName" fullname="QNetworkProxy::hostName" href="qnetworkproxy.html#hostName" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QString" signature="QString hostName() const"/>
            <function name="isCachingProxy" fullname="QNetworkProxy::isCachingProxy" href="qnetworkproxy.html#isCachingProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool isCachingProxy() const"/>
            <function name="isTransparentProxy" fullname="QNetworkProxy::isTransparentProxy" href="qnetworkproxy.html#isTransparentProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool isTransparentProxy() const"/>
            <function name="operator!=" fullname="QNetworkProxy::operator!=" href="qnetworkproxy.html#operator-not-eq" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkProxy &amp;other) const">
                <parameter type="const QNetworkProxy &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkProxy::operator=" href="qnetworkproxy.html#operator-eq-1" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkProxy &amp;" signature="QNetworkProxy &amp; operator=(const QNetworkProxy &amp;other)">
                <parameter type="const QNetworkProxy &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkProxy::operator==" href="qnetworkproxy.html#operator-eq-eq" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkProxy &amp;other) const">
                <parameter type="const QNetworkProxy &amp;" name="other" default=""/>
            </function>
            <function name="password" fullname="QNetworkProxy::password" href="qnetworkproxy.html#password" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QString" signature="QString password() const"/>
            <function name="port" fullname="QNetworkProxy::port" href="qnetworkproxy.html#port" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 port() const"/>
            <function name="rawHeader" fullname="QNetworkProxy::rawHeader" href="qnetworkproxy.html#rawHeader" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray rawHeader(const QByteArray &amp;headerName) const">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
            </function>
            <function name="rawHeaderList" fullname="QNetworkProxy::rawHeaderList" href="qnetworkproxy.html#rawHeaderList" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; rawHeaderList() const"/>
            <function name="setApplicationProxy" fullname="QNetworkProxy::setApplicationProxy" href="qnetworkproxy.html#setApplicationProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="void" signature="void setApplicationProxy(const QNetworkProxy &amp;networkProxy)">
                <parameter type="const QNetworkProxy &amp;" name="networkProxy" default=""/>
            </function>
            <function name="setCapabilities" fullname="QNetworkProxy::setCapabilities" href="qnetworkproxy.html#setCapabilities" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setCapabilities(QNetworkProxy::Capabilities capabilities)">
                <parameter type="QNetworkProxy::Capabilities" name="capabilities" default=""/>
            </function>
            <function name="setHeader" fullname="QNetworkProxy::setHeader" href="qnetworkproxy.html#setHeader" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setHostName" fullname="QNetworkProxy::setHostName" href="qnetworkproxy.html#setHostName" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setHostName(const QString &amp;hostName)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
            </function>
            <function name="setPassword" fullname="QNetworkProxy::setPassword" href="qnetworkproxy.html#setPassword" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setPassword(const QString &amp;password)">
                <parameter type="const QString &amp;" name="password" default=""/>
            </function>
            <function name="setPort" fullname="QNetworkProxy::setPort" href="qnetworkproxy.html#setPort" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setPort(quint16 port)">
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="setRawHeader" fullname="QNetworkProxy::setRawHeader" href="qnetworkproxy.html#setRawHeader" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
                <parameter type="const QByteArray &amp;" name="headerValue" default=""/>
            </function>
            <function name="setType" fullname="QNetworkProxy::setType" href="qnetworkproxy.html#setType" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setType(QNetworkProxy::ProxyType type)">
                <parameter type="QNetworkProxy::ProxyType" name="type" default=""/>
            </function>
            <function name="setUser" fullname="QNetworkProxy::setUser" href="qnetworkproxy.html#setUser" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setUser(const QString &amp;user)">
                <parameter type="const QString &amp;" name="user" default=""/>
            </function>
            <function name="swap" fullname="QNetworkProxy::swap" href="qnetworkproxy.html#swap" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkProxy &amp;other)">
                <parameter type="QNetworkProxy &amp;" name="other" default=""/>
            </function>
            <function name="type" fullname="QNetworkProxy::type" href="qnetworkproxy.html#type" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QNetworkProxy::ProxyType" signature="QNetworkProxy::ProxyType type() const"/>
            <function name="user" fullname="QNetworkProxy::user" href="qnetworkproxy.html#user" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QString" signature="QString user() const"/>
            <function name="~QNetworkProxy" fullname="QNetworkProxy::~QNetworkProxy" href="qnetworkproxy.html#dtor.QNetworkProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkProxy()"/>
            <enum name="Capability" fullname="QNetworkProxy::Capability" href="qnetworkproxy.html#Capability-enum" status="active" access="public" location="qnetworkproxy.h" documented="true" typedef="QNetworkProxy::Capabilities">
                <value name="TunnelingCapability" value="0x0001"/>
                <value name="ListeningCapability" value="0x0002"/>
                <value name="UdpTunnelingCapability" value="0x0004"/>
                <value name="CachingCapability" value="0x0008"/>
                <value name="HostNameLookupCapability" value="0x0010"/>
                <value name="SctpTunnelingCapability" value="0x00020"/>
                <value name="SctpListeningCapability" value="0x00040"/>
            </enum>
            <enum name="ProxyType" fullname="QNetworkProxy::ProxyType" href="qnetworkproxy.html#ProxyType-enum" status="active" access="public" location="qnetworkproxy.h" documented="true">
                <value name="DefaultProxy" value="0"/>
                <value name="Socks5Proxy" value="1"/>
                <value name="NoProxy" value="2"/>
                <value name="HttpProxy" value="3"/>
                <value name="HttpCachingProxy" value="4"/>
                <value name="FtpCachingProxy" value="5"/>
            </enum>
            <typedef name="Capabilities" fullname="QNetworkProxy::Capabilities" href="qnetworkproxy.html#Capability-enum" status="active" access="public" location="qnetworkproxy.h" enum="QNetworkProxy::Capability"/>
        </class>
        <class name="QNetworkProxyFactory" href="qnetworkproxyfactory.html" status="active" access="public" location="qnetworkproxy.h" documented="true" groups="network" module="QtNetwork" brief="Fine-grained proxy selection">
            <contents name="system-proxies" title="System Proxies" level="1"/>
            <function name="QNetworkProxyFactory" fullname="QNetworkProxyFactory::QNetworkProxyFactory" href="qnetworkproxyfactory.html#QNetworkProxyFactory" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" signature="QNetworkProxyFactory()"/>
            <function name="proxyForQuery" fullname="QNetworkProxyFactory::proxyForQuery" href="qnetworkproxyfactory.html#proxyForQuery" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="QList&lt;QNetworkProxy&gt;" signature="QList&lt;QNetworkProxy&gt; proxyForQuery(const QNetworkProxyQuery &amp;query)">
                <parameter type="const QNetworkProxyQuery &amp;" name="query" default=""/>
            </function>
            <function name="queryProxy" fullname="QNetworkProxyFactory::queryProxy" href="qnetworkproxyfactory.html#queryProxy" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" virtual="pure" type="QList&lt;QNetworkProxy&gt;" signature="QList&lt;QNetworkProxy&gt; queryProxy(const QNetworkProxyQuery &amp;query) = 0">
                <parameter type="const QNetworkProxyQuery &amp;" name="query" default="QNetworkProxyQuery()"/>
            </function>
            <function name="setApplicationProxyFactory" fullname="QNetworkProxyFactory::setApplicationProxyFactory" href="qnetworkproxyfactory.html#setApplicationProxyFactory" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="void" signature="void setApplicationProxyFactory(QNetworkProxyFactory *factory)">
                <parameter type="QNetworkProxyFactory *" name="factory" default=""/>
            </function>
            <function name="setUseSystemConfiguration" fullname="QNetworkProxyFactory::setUseSystemConfiguration" href="qnetworkproxyfactory.html#setUseSystemConfiguration" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="void" signature="void setUseSystemConfiguration(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="systemProxyForQuery" fullname="QNetworkProxyFactory::systemProxyForQuery" href="qnetworkproxyfactory.html#systemProxyForQuery" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="QList&lt;QNetworkProxy&gt;" signature="QList&lt;QNetworkProxy&gt; systemProxyForQuery(const QNetworkProxyQuery &amp;query)">
                <parameter type="const QNetworkProxyQuery &amp;" name="query" default="QNetworkProxyQuery()"/>
            </function>
            <function name="usesSystemConfiguration" fullname="QNetworkProxyFactory::usesSystemConfiguration" href="qnetworkproxyfactory.html#usesSystemConfiguration" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" static="true" type="bool" signature="bool usesSystemConfiguration()"/>
            <function name="~QNetworkProxyFactory" fullname="QNetworkProxyFactory::~QNetworkProxyFactory" href="qnetworkproxyfactory.html#dtor.QNetworkProxyFactory" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QNetworkProxyFactory()"/>
        </class>
        <class name="QNetworkProxyQuery" href="qnetworkproxyquery.html" status="active" access="public" location="qnetworkproxy.h" documented="true" groups="shared" module="QtNetwork" brief="Used to query the proxy settings for a socket">
            <function name="QNetworkProxyQuery" fullname="QNetworkProxyQuery::QNetworkProxyQuery" href="qnetworkproxyquery.html#QNetworkProxyQuery" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" signature="QNetworkProxyQuery()"/>
            <function name="QNetworkProxyQuery" fullname="QNetworkProxyQuery::QNetworkProxyQuery" href="qnetworkproxyquery.html#QNetworkProxyQuery-1" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QNetworkProxyQuery(const QUrl &amp;requestUrl, QNetworkProxyQuery::QueryType queryType)">
                <parameter type="const QUrl &amp;" name="requestUrl" default=""/>
                <parameter type="QNetworkProxyQuery::QueryType" name="queryType" default="UrlRequest"/>
            </function>
            <function name="QNetworkProxyQuery" fullname="QNetworkProxyQuery::QNetworkProxyQuery" href="qnetworkproxyquery.html#QNetworkProxyQuery-2" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" overload="true" overload-number="2" signature="QNetworkProxyQuery(const QString &amp;hostname, int port, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)">
                <parameter type="const QString &amp;" name="hostname" default=""/>
                <parameter type="int" name="port" default=""/>
                <parameter type="const QString &amp;" name="protocolTag" default="QString()"/>
                <parameter type="QNetworkProxyQuery::QueryType" name="queryType" default="TcpSocket"/>
            </function>
            <function name="QNetworkProxyQuery" fullname="QNetworkProxyQuery::QNetworkProxyQuery" href="qnetworkproxyquery.html#QNetworkProxyQuery-3" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="3" signature="QNetworkProxyQuery(quint16 bindPort, const QString &amp;protocolTag, QNetworkProxyQuery::QueryType queryType)">
                <parameter type="quint16" name="bindPort" default=""/>
                <parameter type="const QString &amp;" name="protocolTag" default="QString()"/>
                <parameter type="QNetworkProxyQuery::QueryType" name="queryType" default="TcpServer"/>
            </function>
            <function name="QNetworkProxyQuery" fullname="QNetworkProxyQuery::QNetworkProxyQuery" href="qnetworkproxyquery.html#QNetworkProxyQuery-4" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="copy-constructor" overload="true" overload-number="4" signature="QNetworkProxyQuery(const QNetworkProxyQuery &amp;other)">
                <parameter type="const QNetworkProxyQuery &amp;" name="other" default=""/>
            </function>
            <function name="localPort" fullname="QNetworkProxyQuery::localPort" href="qnetworkproxyquery.html#localPort" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="int" signature="int localPort() const"/>
            <function name="operator!=" fullname="QNetworkProxyQuery::operator!=" href="qnetworkproxyquery.html#operator-not-eq" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkProxyQuery &amp;other) const">
                <parameter type="const QNetworkProxyQuery &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkProxyQuery::operator=" href="qnetworkproxyquery.html#operator-eq-1" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkProxyQuery &amp;" signature="QNetworkProxyQuery &amp; operator=(const QNetworkProxyQuery &amp;other)">
                <parameter type="const QNetworkProxyQuery &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkProxyQuery::operator==" href="qnetworkproxyquery.html#operator-eq-eq" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkProxyQuery &amp;other) const">
                <parameter type="const QNetworkProxyQuery &amp;" name="other" default=""/>
            </function>
            <function name="peerHostName" fullname="QNetworkProxyQuery::peerHostName" href="qnetworkproxyquery.html#peerHostName" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QString" signature="QString peerHostName() const"/>
            <function name="peerPort" fullname="QNetworkProxyQuery::peerPort" href="qnetworkproxyquery.html#peerPort" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="int" signature="int peerPort() const"/>
            <function name="protocolTag" fullname="QNetworkProxyQuery::protocolTag" href="qnetworkproxyquery.html#protocolTag" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QString" signature="QString protocolTag() const"/>
            <function name="queryType" fullname="QNetworkProxyQuery::queryType" href="qnetworkproxyquery.html#queryType" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QNetworkProxyQuery::QueryType" signature="QNetworkProxyQuery::QueryType queryType() const"/>
            <function name="setLocalPort" fullname="QNetworkProxyQuery::setLocalPort" href="qnetworkproxyquery.html#setLocalPort" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setLocalPort(int port)">
                <parameter type="int" name="port" default=""/>
            </function>
            <function name="setPeerHostName" fullname="QNetworkProxyQuery::setPeerHostName" href="qnetworkproxyquery.html#setPeerHostName" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setPeerHostName(const QString &amp;hostname)">
                <parameter type="const QString &amp;" name="hostname" default=""/>
            </function>
            <function name="setPeerPort" fullname="QNetworkProxyQuery::setPeerPort" href="qnetworkproxyquery.html#setPeerPort" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setPeerPort(int port)">
                <parameter type="int" name="port" default=""/>
            </function>
            <function name="setProtocolTag" fullname="QNetworkProxyQuery::setProtocolTag" href="qnetworkproxyquery.html#setProtocolTag" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setProtocolTag(const QString &amp;protocolTag)">
                <parameter type="const QString &amp;" name="protocolTag" default=""/>
            </function>
            <function name="setQueryType" fullname="QNetworkProxyQuery::setQueryType" href="qnetworkproxyquery.html#setQueryType" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setQueryType(QNetworkProxyQuery::QueryType type)">
                <parameter type="QNetworkProxyQuery::QueryType" name="type" default=""/>
            </function>
            <function name="setUrl" fullname="QNetworkProxyQuery::setUrl" href="qnetworkproxyquery.html#setUrl" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" type="void" signature="void setUrl(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="swap" fullname="QNetworkProxyQuery::swap" href="qnetworkproxyquery.html#swap" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkProxyQuery &amp;other)">
                <parameter type="QNetworkProxyQuery &amp;" name="other" default=""/>
            </function>
            <function name="url" fullname="QNetworkProxyQuery::url" href="qnetworkproxyquery.html#url" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="plain" const="true" type="QUrl" signature="QUrl url() const"/>
            <function name="~QNetworkProxyQuery" fullname="QNetworkProxyQuery::~QNetworkProxyQuery" href="qnetworkproxyquery.html#dtor.QNetworkProxyQuery" status="active" access="public" location="qnetworkproxy.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkProxyQuery()"/>
            <enum name="QueryType" fullname="QNetworkProxyQuery::QueryType" href="qnetworkproxyquery.html#QueryType-enum" status="active" access="public" location="qnetworkproxy.h" documented="true">
                <value name="TcpSocket" value="0"/>
                <value name="UdpSocket" value="1"/>
                <value name="SctpSocket" value="2"/>
                <value name="TcpServer" value="100"/>
                <value name="UrlRequest" value="101"/>
                <value name="SctpServer" value="102"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QNetworkReply" href="qnetworkreply.html" status="active" access="public" location="qnetworkreply.h" documented="true" groups="network" bases="QIODevice" module="QtNetwork" brief="Contains the data and headers for a request sent with QNetworkAccessManager">
            <function name="QNetworkReply" fullname="QNetworkReply::QNetworkReply" href="qnetworkreply.html#QNetworkReply" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="constructor" explicit="true" signature="QNetworkReply(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="abort" fullname="QNetworkReply::abort" href="qnetworkreply.html#abort" status="active" access="public" location="qnetworkreply.h" documented="true" meta="slot" virtual="pure" type="void" signature="void abort() = 0"/>
            <function name="attribute" fullname="QNetworkReply::attribute" href="qnetworkreply.html#attribute" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant attribute(QNetworkRequest::Attribute code) const">
                <parameter type="QNetworkRequest::Attribute" name="code" default=""/>
            </function>
            <function name="close" fullname="QNetworkReply::close" href="qnetworkreply.html#close" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void close() override"/>
            <function name="downloadProgress" fullname="QNetworkReply::downloadProgress" href="qnetworkreply.html#downloadProgress" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void downloadProgress(qint64 bytesReceived, qint64 bytesTotal)">
                <parameter type="qint64" name="bytesReceived" default=""/>
                <parameter type="qint64" name="bytesTotal" default=""/>
            </function>
            <function name="encrypted" fullname="QNetworkReply::encrypted" href="qnetworkreply.html#encrypted" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void encrypted()"/>
            <function name="error" fullname="QNetworkReply::error" href="qnetworkreply.html#error" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QNetworkReply::NetworkError" signature="QNetworkReply::NetworkError error() const"/>
            <function name="errorOccurred" fullname="QNetworkReply::errorOccurred" href="qnetworkreply.html#errorOccurred" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void errorOccurred(QNetworkReply::NetworkError code)">
                <parameter type="QNetworkReply::NetworkError" name="code" default=""/>
            </function>
            <function name="finished" fullname="QNetworkReply::finished" href="qnetworkreply.html#finished" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void finished()"/>
            <function name="hasRawHeader" fullname="QNetworkReply::hasRawHeader" href="qnetworkreply.html#hasRawHeader" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasRawHeader(QAnyStringView headerName) const">
                <parameter type="QAnyStringView" name="headerName" default=""/>
            </function>
            <function name="header" fullname="QNetworkReply::header" href="qnetworkreply.html#header" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant header(QNetworkRequest::KnownHeaders header) const">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
            </function>
            <function name="ignoreSslErrors" fullname="QNetworkReply::ignoreSslErrors" href="qnetworkreply.html#ignoreSslErrors" status="active" access="public" location="qnetworkreply.h" documented="true" meta="slot" virtual="virtual" type="void" signature="void ignoreSslErrors()"/>
            <function name="ignoreSslErrors" fullname="QNetworkReply::ignoreSslErrors" href="qnetworkreply.html#ignoreSslErrors-1" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void ignoreSslErrors(const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="ignoreSslErrorsImplementation" fullname="QNetworkReply::ignoreSslErrorsImplementation" href="qnetworkreply.html#ignoreSslErrorsImplementation" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void ignoreSslErrorsImplementation(const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="isFinished" fullname="QNetworkReply::isFinished" href="qnetworkreply.html#isFinished" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool isFinished() const"/>
            <function name="isRunning" fullname="QNetworkReply::isRunning" href="qnetworkreply.html#isRunning" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool isRunning() const"/>
            <function name="manager" fullname="QNetworkReply::manager" href="qnetworkreply.html#manager" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QNetworkAccessManager *" signature="QNetworkAccessManager * manager() const"/>
            <function name="metaDataChanged" fullname="QNetworkReply::metaDataChanged" href="qnetworkreply.html#metaDataChanged" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void metaDataChanged()"/>
            <function name="operation" fullname="QNetworkReply::operation" href="qnetworkreply.html#operation" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QNetworkAccessManager::Operation" signature="QNetworkAccessManager::Operation operation() const"/>
            <function name="preSharedKeyAuthenticationRequired" fullname="QNetworkReply::preSharedKeyAuthenticationRequired" href="qnetworkreply.html#preSharedKeyAuthenticationRequired" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator *authenticator)">
                <parameter type="QSslPreSharedKeyAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="rawHeader" fullname="QNetworkReply::rawHeader" href="qnetworkreply.html#rawHeader" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray rawHeader(QAnyStringView headerName) const">
                <parameter type="QAnyStringView" name="headerName" default=""/>
            </function>
            <function name="rawHeaderList" fullname="QNetworkReply::rawHeaderList" href="qnetworkreply.html#rawHeaderList" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; rawHeaderList() const"/>
            <function name="rawHeaderPairs" fullname="QNetworkReply::rawHeaderPairs" href="qnetworkreply.html#rawHeaderPairs" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="const QList&lt;QNetworkReply::RawHeaderPair&gt; &amp;" signature="const QList&lt;QNetworkReply::RawHeaderPair&gt; &amp; rawHeaderPairs() const"/>
            <function name="readBufferSize" fullname="QNetworkReply::readBufferSize" href="qnetworkreply.html#readBufferSize" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 readBufferSize() const"/>
            <function name="redirectAllowed" fullname="QNetworkReply::redirectAllowed" href="qnetworkreply.html#redirectAllowed" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void redirectAllowed()"/>
            <function name="redirected" fullname="QNetworkReply::redirected" href="qnetworkreply.html#redirected" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void redirected(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="request" fullname="QNetworkReply::request" href="qnetworkreply.html#request" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QNetworkRequest" signature="QNetworkRequest request() const"/>
            <function name="requestSent" fullname="QNetworkReply::requestSent" href="qnetworkreply.html#requestSent" status="active" access="public" location="qnetworkreply.h" documented="true" since="6.3" meta="signal" type="void" signature="void requestSent()"/>
            <function name="setAttribute" fullname="QNetworkReply::setAttribute" href="qnetworkreply.html#setAttribute" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setAttribute(QNetworkRequest::Attribute code, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::Attribute" name="code" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setError" fullname="QNetworkReply::setError" href="qnetworkreply.html#setError" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setError(QNetworkReply::NetworkError errorCode, const QString &amp;errorString)">
                <parameter type="QNetworkReply::NetworkError" name="errorCode" default=""/>
                <parameter type="const QString &amp;" name="errorString" default=""/>
            </function>
            <function name="setFinished" fullname="QNetworkReply::setFinished" href="qnetworkreply.html#setFinished" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setFinished(bool finished)">
                <parameter type="bool" name="finished" default=""/>
            </function>
            <function name="setHeader" fullname="QNetworkReply::setHeader" href="qnetworkreply.html#setHeader" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setOperation" fullname="QNetworkReply::setOperation" href="qnetworkreply.html#setOperation" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setOperation(QNetworkAccessManager::Operation operation)">
                <parameter type="QNetworkAccessManager::Operation" name="operation" default=""/>
            </function>
            <function name="setRawHeader" fullname="QNetworkReply::setRawHeader" href="qnetworkreply.html#setRawHeader" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;value)">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
                <parameter type="const QByteArray &amp;" name="value" default=""/>
            </function>
            <function name="setReadBufferSize" fullname="QNetworkReply::setReadBufferSize" href="qnetworkreply.html#setReadBufferSize" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void setReadBufferSize(qint64 size)">
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="setRequest" fullname="QNetworkReply::setRequest" href="qnetworkreply.html#setRequest" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setRequest(const QNetworkRequest &amp;request)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
            </function>
            <function name="setSslConfiguration" fullname="QNetworkReply::setSslConfiguration" href="qnetworkreply.html#setSslConfiguration" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setSslConfiguration(const QSslConfiguration &amp;config)">
                <parameter type="const QSslConfiguration &amp;" name="config" default=""/>
            </function>
            <function name="setSslConfigurationImplementation" fullname="QNetworkReply::setSslConfigurationImplementation" href="qnetworkreply.html#setSslConfigurationImplementation" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void setSslConfigurationImplementation(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="setUrl" fullname="QNetworkReply::setUrl" href="qnetworkreply.html#setUrl" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" type="void" signature="void setUrl(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="socketStartedConnecting" fullname="QNetworkReply::socketStartedConnecting" href="qnetworkreply.html#socketStartedConnecting" status="active" access="public" location="qnetworkreply.h" documented="true" since="6.3" meta="signal" type="void" signature="void socketStartedConnecting()"/>
            <function name="sslConfiguration" fullname="QNetworkReply::sslConfiguration" href="qnetworkreply.html#sslConfiguration" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration sslConfiguration() const"/>
            <function name="sslConfigurationImplementation" fullname="QNetworkReply::sslConfigurationImplementation" href="qnetworkreply.html#sslConfigurationImplementation" status="active" access="protected" location="qnetworkreply.h" documented="true" meta="plain" virtual="virtual" const="true" type="void" signature="void sslConfigurationImplementation(QSslConfiguration &amp;configuration) const">
                <parameter type="QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="sslErrors" fullname="QNetworkReply::sslErrors" href="qnetworkreply.html#sslErrors" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void sslErrors(const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="uploadProgress" fullname="QNetworkReply::uploadProgress" href="qnetworkreply.html#uploadProgress" status="active" access="public" location="qnetworkreply.h" documented="true" meta="signal" type="void" signature="void uploadProgress(qint64 bytesSent, qint64 bytesTotal)">
                <parameter type="qint64" name="bytesSent" default=""/>
                <parameter type="qint64" name="bytesTotal" default=""/>
            </function>
            <function name="url" fullname="QNetworkReply::url" href="qnetworkreply.html#url" status="active" access="public" location="qnetworkreply.h" documented="true" meta="plain" const="true" type="QUrl" signature="QUrl url() const"/>
            <function name="~QNetworkReply" fullname="QNetworkReply::~QNetworkReply" href="qnetworkreply.html#dtor.QNetworkReply" status="active" access="public" location="qnetworkreply.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QNetworkReply()"/>
            <enum name="NetworkError" fullname="QNetworkReply::NetworkError" href="qnetworkreply.html#NetworkError-enum" status="active" access="public" location="qnetworkreply.h" documented="true">
                <value name="NoError" value="0"/>
                <value name="ConnectionRefusedError" value="1"/>
                <value name="RemoteHostClosedError" value="2"/>
                <value name="HostNotFoundError" value="3"/>
                <value name="TimeoutError" value="4"/>
                <value name="OperationCanceledError" value="5"/>
                <value name="SslHandshakeFailedError" value="6"/>
                <value name="TemporaryNetworkFailureError" value="7"/>
                <value name="NetworkSessionFailedError" value="8"/>
                <value name="BackgroundRequestNotAllowedError" value="9"/>
                <value name="TooManyRedirectsError" value="10"/>
                <value name="InsecureRedirectError" value="11"/>
                <value name="UnknownNetworkError" value="99"/>
                <value name="ProxyConnectionRefusedError" value="101"/>
                <value name="ProxyConnectionClosedError" value="102"/>
                <value name="ProxyNotFoundError" value="103"/>
                <value name="ProxyTimeoutError" value="104"/>
                <value name="ProxyAuthenticationRequiredError" value="105"/>
                <value name="UnknownProxyError" value="199"/>
                <value name="ContentAccessDenied" value="201"/>
                <value name="ContentOperationNotPermittedError" value="202"/>
                <value name="ContentNotFoundError" value="203"/>
                <value name="AuthenticationRequiredError" value="204"/>
                <value name="ContentReSendError" value="205"/>
                <value name="ContentConflictError" value="206"/>
                <value name="ContentGoneError" value="207"/>
                <value name="UnknownContentError" value="299"/>
                <value name="ProtocolUnknownError" value="301"/>
                <value name="ProtocolInvalidOperationError" value="302"/>
                <value name="ProtocolFailure" value="399"/>
                <value name="InternalServerError" value="401"/>
                <value name="OperationNotImplementedError" value="402"/>
                <value name="ServiceUnavailableError" value="403"/>
                <value name="UnknownServerError" value="499"/>
            </enum>
            <typedef name="RawHeaderPair" fullname="QNetworkReply::RawHeaderPair" href="qnetworkreply.html#RawHeaderPair-typedef" status="active" access="public" location="qnetworkreply.h" documented="true"/>
        </class>
        <class name="QNetworkRequest" href="qnetworkrequest.html" status="active" access="public" location="qnetworkrequest.h" documented="true" groups="network,shared" module="QtNetwork" brief="Holds a request to be sent with QNetworkAccessManager">
            <function name="QNetworkRequest" fullname="QNetworkRequest::QNetworkRequest" href="qnetworkrequest.html#QNetworkRequest" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="constructor" signature="QNetworkRequest()"/>
            <function name="QNetworkRequest" fullname="QNetworkRequest::QNetworkRequest" href="qnetworkrequest.html#QNetworkRequest-1" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QNetworkRequest(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="QNetworkRequest" fullname="QNetworkRequest::QNetworkRequest" href="qnetworkrequest.html#QNetworkRequest-2" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QNetworkRequest(const QNetworkRequest &amp;other)">
                <parameter type="const QNetworkRequest &amp;" name="other" default=""/>
            </function>
            <function name="attribute" fullname="QNetworkRequest::attribute" href="qnetworkrequest.html#attribute" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant attribute(QNetworkRequest::Attribute code, const QVariant &amp;defaultValue) const">
                <parameter type="QNetworkRequest::Attribute" name="code" default=""/>
                <parameter type="const QVariant &amp;" name="defaultValue" default="QVariant()"/>
            </function>
            <function name="decompressedSafetyCheckThreshold" fullname="QNetworkRequest::decompressedSafetyCheckThreshold" href="qnetworkrequest.html#decompressedSafetyCheckThreshold" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.2" meta="plain" const="true" type="qint64" signature="qint64 decompressedSafetyCheckThreshold() const"/>
            <function name="hasRawHeader" fullname="QNetworkRequest::hasRawHeader" href="qnetworkrequest.html#hasRawHeader" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasRawHeader(QAnyStringView headerName) const">
                <parameter type="QAnyStringView" name="headerName" default=""/>
            </function>
            <function name="header" fullname="QNetworkRequest::header" href="qnetworkrequest.html#header" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant header(QNetworkRequest::KnownHeaders header) const">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
            </function>
            <function name="http1Configuration" fullname="QNetworkRequest::http1Configuration" href="qnetworkrequest.html#http1Configuration" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.5" meta="plain" const="true" type="QHttp1Configuration" signature="QHttp1Configuration http1Configuration() const"/>
            <function name="http2Configuration" fullname="QNetworkRequest::http2Configuration" href="qnetworkrequest.html#http2Configuration" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QHttp2Configuration" signature="QHttp2Configuration http2Configuration() const"/>
            <function name="maximumRedirectsAllowed" fullname="QNetworkRequest::maximumRedirectsAllowed" href="qnetworkrequest.html#maximumRedirectsAllowed" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="int" signature="int maximumRedirectsAllowed() const"/>
            <function name="operator!=" fullname="QNetworkRequest::operator!=" href="qnetworkrequest.html#operator-not-eq" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QNetworkRequest &amp;other) const">
                <parameter type="const QNetworkRequest &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkRequest::operator=" href="qnetworkrequest.html#operator-eq-1" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QNetworkRequest &amp;" signature="QNetworkRequest &amp; operator=(const QNetworkRequest &amp;other)">
                <parameter type="const QNetworkRequest &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QNetworkRequest::operator==" href="qnetworkrequest.html#operator-eq-eq" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QNetworkRequest &amp;other) const">
                <parameter type="const QNetworkRequest &amp;" name="other" default=""/>
            </function>
            <function name="originatingObject" fullname="QNetworkRequest::originatingObject" href="qnetworkrequest.html#originatingObject" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QObject *" signature="QObject * originatingObject() const"/>
            <function name="peerVerifyName" fullname="QNetworkRequest::peerVerifyName" href="qnetworkrequest.html#peerVerifyName" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QString" signature="QString peerVerifyName() const"/>
            <function name="priority" fullname="QNetworkRequest::priority" href="qnetworkrequest.html#priority" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QNetworkRequest::Priority" signature="QNetworkRequest::Priority priority() const"/>
            <function name="rawHeader" fullname="QNetworkRequest::rawHeader" href="qnetworkrequest.html#rawHeader" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray rawHeader(QAnyStringView headerName) const">
                <parameter type="QAnyStringView" name="headerName" default=""/>
            </function>
            <function name="rawHeaderList" fullname="QNetworkRequest::rawHeaderList" href="qnetworkrequest.html#rawHeaderList" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; rawHeaderList() const"/>
            <function name="setAttribute" fullname="QNetworkRequest::setAttribute" href="qnetworkrequest.html#setAttribute" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setAttribute(QNetworkRequest::Attribute code, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::Attribute" name="code" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setDecompressedSafetyCheckThreshold" fullname="QNetworkRequest::setDecompressedSafetyCheckThreshold" href="qnetworkrequest.html#setDecompressedSafetyCheckThreshold" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.2" meta="plain" type="void" signature="void setDecompressedSafetyCheckThreshold(qint64 threshold)">
                <parameter type="qint64" name="threshold" default=""/>
            </function>
            <function name="setHeader" fullname="QNetworkRequest::setHeader" href="qnetworkrequest.html#setHeader" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)">
                <parameter type="QNetworkRequest::KnownHeaders" name="header" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setHttp1Configuration" fullname="QNetworkRequest::setHttp1Configuration" href="qnetworkrequest.html#setHttp1Configuration" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.5" meta="plain" type="void" signature="void setHttp1Configuration(const QHttp1Configuration &amp;configuration)">
                <parameter type="const QHttp1Configuration &amp;" name="configuration" default=""/>
            </function>
            <function name="setHttp2Configuration" fullname="QNetworkRequest::setHttp2Configuration" href="qnetworkrequest.html#setHttp2Configuration" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setHttp2Configuration(const QHttp2Configuration &amp;configuration)">
                <parameter type="const QHttp2Configuration &amp;" name="configuration" default=""/>
            </function>
            <function name="setMaximumRedirectsAllowed" fullname="QNetworkRequest::setMaximumRedirectsAllowed" href="qnetworkrequest.html#setMaximumRedirectsAllowed" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setMaximumRedirectsAllowed(int maxRedirectsAllowed)">
                <parameter type="int" name="maxRedirectsAllowed" default=""/>
            </function>
            <function name="setOriginatingObject" fullname="QNetworkRequest::setOriginatingObject" href="qnetworkrequest.html#setOriginatingObject" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setOriginatingObject(QObject *object)">
                <parameter type="QObject *" name="object" default=""/>
            </function>
            <function name="setPeerVerifyName" fullname="QNetworkRequest::setPeerVerifyName" href="qnetworkrequest.html#setPeerVerifyName" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyName(const QString &amp;peerName)">
                <parameter type="const QString &amp;" name="peerName" default=""/>
            </function>
            <function name="setPriority" fullname="QNetworkRequest::setPriority" href="qnetworkrequest.html#setPriority" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setPriority(QNetworkRequest::Priority priority)">
                <parameter type="QNetworkRequest::Priority" name="priority" default=""/>
            </function>
            <function name="setRawHeader" fullname="QNetworkRequest::setRawHeader" href="qnetworkrequest.html#setRawHeader" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)">
                <parameter type="const QByteArray &amp;" name="headerName" default=""/>
                <parameter type="const QByteArray &amp;" name="headerValue" default=""/>
            </function>
            <function name="setSslConfiguration" fullname="QNetworkRequest::setSslConfiguration" href="qnetworkrequest.html#setSslConfiguration" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setSslConfiguration(const QSslConfiguration &amp;config)">
                <parameter type="const QSslConfiguration &amp;" name="config" default=""/>
            </function>
            <function name="setTransferTimeout" fullname="QNetworkRequest::setTransferTimeout" href="qnetworkrequest.html#setTransferTimeout" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setTransferTimeout(int timeout)">
                <parameter type="int" name="timeout" default=""/>
            </function>
            <function name="setTransferTimeout" fullname="QNetworkRequest::setTransferTimeout" href="qnetworkrequest.html#setTransferTimeout-1" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.7" meta="plain" overload="true" overload-number="1" type="void" signature="void setTransferTimeout(std::chrono::milliseconds duration)">
                <parameter type="std::chrono::milliseconds" name="duration" default="DefaultTransferTimeout"/>
            </function>
            <function name="setUrl" fullname="QNetworkRequest::setUrl" href="qnetworkrequest.html#setUrl" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" type="void" signature="void setUrl(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="sslConfiguration" fullname="QNetworkRequest::sslConfiguration" href="qnetworkrequest.html#sslConfiguration" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration sslConfiguration() const"/>
            <function name="swap" fullname="QNetworkRequest::swap" href="qnetworkrequest.html#swap" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkRequest &amp;other)">
                <parameter type="QNetworkRequest &amp;" name="other" default=""/>
            </function>
            <function name="transferTimeout" fullname="QNetworkRequest::transferTimeout" href="qnetworkrequest.html#transferTimeout" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="int" signature="int transferTimeout() const"/>
            <function name="transferTimeoutAsDuration" fullname="QNetworkRequest::transferTimeoutAsDuration" href="qnetworkrequest.html#transferTimeoutAsDuration" status="active" access="public" location="qnetworkrequest.h" documented="true" since="6.7" meta="plain" const="true" type="std::chrono::milliseconds" signature="std::chrono::milliseconds transferTimeoutAsDuration() const"/>
            <function name="url" fullname="QNetworkRequest::url" href="qnetworkrequest.html#url" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="plain" const="true" type="QUrl" signature="QUrl url() const"/>
            <function name="~QNetworkRequest" fullname="QNetworkRequest::~QNetworkRequest" href="qnetworkrequest.html#dtor.QNetworkRequest" status="active" access="public" location="qnetworkrequest.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkRequest()"/>
            <enum name="Attribute" fullname="QNetworkRequest::Attribute" href="qnetworkrequest.html#Attribute-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="HttpStatusCodeAttribute" value="0"/>
                <value name="HttpReasonPhraseAttribute" value="1"/>
                <value name="RedirectionTargetAttribute" value="2"/>
                <value name="ConnectionEncryptedAttribute" value="3"/>
                <value name="CacheLoadControlAttribute" value="4"/>
                <value name="CacheSaveControlAttribute" value="5"/>
                <value name="SourceIsFromCacheAttribute" value="6"/>
                <value name="DoNotBufferUploadDataAttribute" value="7"/>
                <value name="HttpPipeliningAllowedAttribute" value="8"/>
                <value name="HttpPipeliningWasUsedAttribute" value="9"/>
                <value name="CustomVerbAttribute" value="10"/>
                <value name="CookieLoadControlAttribute" value="11"/>
                <value name="AuthenticationReuseAttribute" value="12"/>
                <value name="CookieSaveControlAttribute" value="13"/>
                <value name="MaximumDownloadBufferSizeAttribute" value="14"/>
                <value name="DownloadBufferAttribute" value="15"/>
                <value name="SynchronousRequestAttribute" value="16"/>
                <value name="BackgroundRequestAttribute" value="17"/>
                <value name="EmitAllUploadProgressSignalsAttribute" value="18"/>
                <value name="Http2AllowedAttribute" value="19"/>
                <value name="Http2WasUsedAttribute" value="20"/>
                <value name="OriginalContentLengthAttribute" value="21"/>
                <value name="RedirectPolicyAttribute" value="22"/>
                <value name="Http2DirectAttribute" value="23"/>
                <value name="ResourceTypeAttribute" value="24"/>
                <value name="AutoDeleteReplyOnFinishAttribute" value="25"/>
                <value name="ConnectionCacheExpiryTimeoutSecondsAttribute" value="26"/>
                <value name="Http2CleartextAllowedAttribute" value="27"/>
                <value name="UseCredentialsAttribute" value="28"/>
                <value name="User" value="1000"/>
                <value name="UserMax" value="32767"/>
            </enum>
            <enum name="CacheLoadControl" fullname="QNetworkRequest::CacheLoadControl" href="qnetworkrequest.html#CacheLoadControl-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="AlwaysNetwork" value="0"/>
                <value name="PreferNetwork" value="1"/>
                <value name="PreferCache" value="2"/>
                <value name="AlwaysCache" value="3"/>
            </enum>
            <enum name="KnownHeaders" fullname="QNetworkRequest::KnownHeaders" href="qnetworkrequest.html#KnownHeaders-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="ContentTypeHeader" value="0"/>
                <value name="ContentLengthHeader" value="1"/>
                <value name="LocationHeader" value="2"/>
                <value name="LastModifiedHeader" value="3"/>
                <value name="CookieHeader" value="4"/>
                <value name="SetCookieHeader" value="5"/>
                <value name="ContentDispositionHeader" value="6"/>
                <value name="UserAgentHeader" value="7"/>
                <value name="ServerHeader" value="8"/>
                <value name="IfModifiedSinceHeader" value="9"/>
                <value name="ETagHeader" value="10"/>
                <value name="IfMatchHeader" value="11"/>
                <value name="IfNoneMatchHeader" value="12"/>
            </enum>
            <enum name="LoadControl" fullname="QNetworkRequest::LoadControl" href="qnetworkrequest.html#LoadControl-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="Automatic" value="0"/>
                <value name="Manual" value="1"/>
            </enum>
            <enum name="Priority" fullname="QNetworkRequest::Priority" href="qnetworkrequest.html#Priority-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="HighPriority" value="1"/>
                <value name="NormalPriority" value="3"/>
                <value name="LowPriority" value="5"/>
            </enum>
            <enum name="RedirectPolicy" fullname="QNetworkRequest::RedirectPolicy" href="qnetworkrequest.html#RedirectPolicy-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="ManualRedirectPolicy" value="0"/>
                <value name="NoLessSafeRedirectPolicy" value="1"/>
                <value name="SameOriginRedirectPolicy" value="2"/>
                <value name="UserVerifiedRedirectPolicy" value="3"/>
            </enum>
            <enum name="TransferTimeoutConstant" fullname="QNetworkRequest::TransferTimeoutConstant" href="qnetworkrequest.html#TransferTimeoutConstant-enum" status="active" access="public" location="qnetworkrequest.h" documented="true">
                <value name="DefaultTransferTimeoutConstant" value="30000"/>
            </enum>
            <variable name="DefaultTransferTimeout" fullname="QNetworkRequest::DefaultTransferTimeout" href="qnetworkrequest.html#DefaultTransferTimeout-var" status="active" access="public" location="qnetworkrequest.h" documented="true" type="const std::chrono::std::chrono::milliseconds" static="true"/>
        </class>
        <class name="QNetworkRequestFactory" href="qnetworkrequestfactory.html" status="preliminary" access="public" location="qnetworkrequestfactory.h" since="6.7" documented="true" groups="shared" module="QtNetwork" brief="Convenience class for grouping remote server endpoints that share common network request properties">
            <function name="QNetworkRequestFactory" fullname="QNetworkRequestFactory::QNetworkRequestFactory" href="qnetworkrequestfactory.html#QNetworkRequestFactory" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="constructor" signature="QNetworkRequestFactory()"/>
            <function name="QNetworkRequestFactory" fullname="QNetworkRequestFactory::QNetworkRequestFactory" href="qnetworkrequestfactory.html#QNetworkRequestFactory-1" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QNetworkRequestFactory(const QUrl &amp;baseUrl)">
                <parameter type="const QUrl &amp;" name="baseUrl" default=""/>
            </function>
            <function name="QNetworkRequestFactory" fullname="QNetworkRequestFactory::QNetworkRequestFactory" href="qnetworkrequestfactory.html#QNetworkRequestFactory-2" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QNetworkRequestFactory(const QNetworkRequestFactory &amp;other)">
                <parameter type="const QNetworkRequestFactory &amp;" name="other" default=""/>
            </function>
            <function name="QNetworkRequestFactory" fullname="QNetworkRequestFactory::QNetworkRequestFactory" href="qnetworkrequestfactory.html#QNetworkRequestFactory-3" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="3" signature="QNetworkRequestFactory(QNetworkRequestFactory &amp;&amp;other)">
                <parameter type="QNetworkRequestFactory &amp;&amp;" name="other" default=""/>
            </function>
            <function name="baseUrl" fullname="QNetworkRequestFactory::baseUrl" href="qnetworkrequestfactory.html#baseUrl" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QUrl" signature="QUrl baseUrl() const"/>
            <function name="bearerToken" fullname="QNetworkRequestFactory::bearerToken" href="qnetworkrequestfactory.html#bearerToken" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray bearerToken() const"/>
            <function name="clearBearerToken" fullname="QNetworkRequestFactory::clearBearerToken" href="qnetworkrequestfactory.html#clearBearerToken" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void clearBearerToken()"/>
            <function name="clearCommonHeaders" fullname="QNetworkRequestFactory::clearCommonHeaders" href="qnetworkrequestfactory.html#clearCommonHeaders" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void clearCommonHeaders()"/>
            <function name="clearPassword" fullname="QNetworkRequestFactory::clearPassword" href="qnetworkrequestfactory.html#clearPassword" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void clearPassword()"/>
            <function name="clearQueryParameters" fullname="QNetworkRequestFactory::clearQueryParameters" href="qnetworkrequestfactory.html#clearQueryParameters" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void clearQueryParameters()"/>
            <function name="clearUserName" fullname="QNetworkRequestFactory::clearUserName" href="qnetworkrequestfactory.html#clearUserName" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void clearUserName()"/>
            <function name="commonHeaders" fullname="QNetworkRequestFactory::commonHeaders" href="qnetworkrequestfactory.html#commonHeaders" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QHttpHeaders" signature="QHttpHeaders commonHeaders() const"/>
            <function name="createRequest" fullname="QNetworkRequestFactory::createRequest" href="qnetworkrequestfactory.html#createRequest" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QNetworkRequest" signature="QNetworkRequest createRequest() const"/>
            <function name="createRequest" fullname="QNetworkRequestFactory::createRequest" href="qnetworkrequestfactory.html#createRequest-1" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="QNetworkRequest" signature="QNetworkRequest createRequest(const QUrlQuery &amp;query) const">
                <parameter type="const QUrlQuery &amp;" name="query" default=""/>
            </function>
            <function name="createRequest" fullname="QNetworkRequestFactory::createRequest" href="qnetworkrequestfactory.html#createRequest-2" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" overload="true" overload-number="2" type="QNetworkRequest" signature="QNetworkRequest createRequest(const QString &amp;path) const">
                <parameter type="const QString &amp;" name="path" default=""/>
            </function>
            <function name="createRequest" fullname="QNetworkRequestFactory::createRequest" href="qnetworkrequestfactory.html#createRequest-3" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" overload="true" overload-number="3" type="QNetworkRequest" signature="QNetworkRequest createRequest(const QString &amp;path, const QUrlQuery &amp;query) const">
                <parameter type="const QString &amp;" name="path" default=""/>
                <parameter type="const QUrlQuery &amp;" name="query" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qnetworkrequestfactory.html#operator-lt-lt" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" related="24" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QNetworkRequestFactory &amp;factory)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QNetworkRequestFactory &amp;" name="factory" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkRequestFactory::operator=" href="qnetworkrequestfactory.html#operator-eq" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="copy-assign" type="QNetworkRequestFactory &amp;" signature="QNetworkRequestFactory &amp; operator=(const QNetworkRequestFactory &amp;other)">
                <parameter type="const QNetworkRequestFactory &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QNetworkRequestFactory::operator=" href="qnetworkrequestfactory.html#operator-eq-1" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QNetworkRequestFactory &amp;" signature="QNetworkRequestFactory &amp; operator=(QNetworkRequestFactory &amp;&amp;other)">
                <parameter type="QNetworkRequestFactory &amp;&amp;" name="other" default=""/>
            </function>
            <function name="password" fullname="QNetworkRequestFactory::password" href="qnetworkrequestfactory.html#password" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QString" signature="QString password() const"/>
            <function name="queryParameters" fullname="QNetworkRequestFactory::queryParameters" href="qnetworkrequestfactory.html#queryParameters" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QUrlQuery" signature="QUrlQuery queryParameters() const"/>
            <function name="setBaseUrl" fullname="QNetworkRequestFactory::setBaseUrl" href="qnetworkrequestfactory.html#setBaseUrl" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setBaseUrl(const QUrl &amp;url)">
                <parameter type="const QUrl &amp;" name="url" default=""/>
            </function>
            <function name="setBearerToken" fullname="QNetworkRequestFactory::setBearerToken" href="qnetworkrequestfactory.html#setBearerToken" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setBearerToken(const QByteArray &amp;token)">
                <parameter type="const QByteArray &amp;" name="token" default=""/>
            </function>
            <function name="setCommonHeaders" fullname="QNetworkRequestFactory::setCommonHeaders" href="qnetworkrequestfactory.html#setCommonHeaders" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setCommonHeaders(const QHttpHeaders &amp;headers)">
                <parameter type="const QHttpHeaders &amp;" name="headers" default=""/>
            </function>
            <function name="setPassword" fullname="QNetworkRequestFactory::setPassword" href="qnetworkrequestfactory.html#setPassword" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setPassword(const QString &amp;password)">
                <parameter type="const QString &amp;" name="password" default=""/>
            </function>
            <function name="setQueryParameters" fullname="QNetworkRequestFactory::setQueryParameters" href="qnetworkrequestfactory.html#setQueryParameters" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setQueryParameters(const QUrlQuery &amp;query)">
                <parameter type="const QUrlQuery &amp;" name="query" default=""/>
            </function>
            <function name="setSslConfiguration" fullname="QNetworkRequestFactory::setSslConfiguration" href="qnetworkrequestfactory.html#setSslConfiguration" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setSslConfiguration(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="setTransferTimeout" fullname="QNetworkRequestFactory::setTransferTimeout" href="qnetworkrequestfactory.html#setTransferTimeout" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setTransferTimeout(std::chrono::milliseconds timeout)">
                <parameter type="std::chrono::milliseconds" name="timeout" default=""/>
            </function>
            <function name="setUserName" fullname="QNetworkRequestFactory::setUserName" href="qnetworkrequestfactory.html#setUserName" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" type="void" signature="void setUserName(const QString &amp;userName)">
                <parameter type="const QString &amp;" name="userName" default=""/>
            </function>
            <function name="sslConfiguration" fullname="QNetworkRequestFactory::sslConfiguration" href="qnetworkrequestfactory.html#sslConfiguration" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration sslConfiguration() const"/>
            <function name="swap" fullname="QNetworkRequestFactory::swap" href="qnetworkrequestfactory.html#swap" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QNetworkRequestFactory &amp;other)">
                <parameter type="QNetworkRequestFactory &amp;" name="other" default=""/>
            </function>
            <function name="transferTimeout" fullname="QNetworkRequestFactory::transferTimeout" href="qnetworkrequestfactory.html#transferTimeout" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="std::chrono::milliseconds" signature="std::chrono::milliseconds transferTimeout() const"/>
            <function name="userName" fullname="QNetworkRequestFactory::userName" href="qnetworkrequestfactory.html#userName" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="plain" const="true" type="QString" signature="QString userName() const"/>
            <function name="~QNetworkRequestFactory" fullname="QNetworkRequestFactory::~QNetworkRequestFactory" href="qnetworkrequestfactory.html#dtor.QNetworkRequestFactory" status="active" access="public" location="qnetworkrequestfactory.h" documented="true" meta="destructor" noexcept="true" signature="~QNetworkRequestFactory()"/>
        </class>
        <class name="QOcspResponse" href="qocspresponse.html" status="active" access="public" location="qocspresponse.h" documented="true" groups="network,ssl" module="QtNetwork" brief="This class represents Online Certificate Status Protocol response">
            <function name="QOcspResponse" fullname="QOcspResponse::QOcspResponse" href="qocspresponse.html#QOcspResponse" status="active" access="public" location="qocspresponse.h" documented="true" meta="constructor" signature="QOcspResponse()"/>
            <function name="QOcspResponse" fullname="QOcspResponse::QOcspResponse" href="qocspresponse.html#QOcspResponse-1" status="active" access="public" location="qocspresponse.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QOcspResponse(const QOcspResponse &amp;other)">
                <parameter type="const QOcspResponse &amp;" name="other" default=""/>
            </function>
            <function name="QOcspResponse" fullname="QOcspResponse::QOcspResponse" href="qocspresponse.html#QOcspResponse-2" status="active" access="public" location="qocspresponse.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QOcspResponse(QOcspResponse &amp;&amp;other)">
                <parameter type="QOcspResponse &amp;&amp;" name="other" default=""/>
            </function>
            <function name="certificateStatus" fullname="QOcspResponse::certificateStatus" href="qocspresponse.html#certificateStatus" status="active" access="public" location="qocspresponse.h" documented="true" meta="plain" const="true" type="QOcspCertificateStatus" signature="QOcspCertificateStatus certificateStatus() const"/>
            <function name="operator!=" href="qocspresponse.html#operator-not-eq" status="active" access="public" location="qocspresponse.h" documented="true" related="25" meta="plain" type="bool" signature="bool operator!=(const QOcspResponse &amp;lhs, const QOcspResponse &amp;rhs)">
                <parameter type="const QOcspResponse &amp;" name="lhs" default=""/>
                <parameter type="const QOcspResponse &amp;" name="rhs" default=""/>
            </function>
            <function name="operator=" fullname="QOcspResponse::operator=" href="qocspresponse.html#operator-eq" status="active" access="public" location="qocspresponse.h" documented="true" meta="copy-assign" type="QOcspResponse &amp;" signature="QOcspResponse &amp; operator=(const QOcspResponse &amp;other)">
                <parameter type="const QOcspResponse &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QOcspResponse::operator=" href="qocspresponse.html#operator-eq-1" status="active" access="public" location="qocspresponse.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QOcspResponse &amp;" signature="QOcspResponse &amp; operator=(QOcspResponse &amp;&amp;other)">
                <parameter type="QOcspResponse &amp;&amp;" name="other" default=""/>
            </function>
            <function name="operator==" href="qocspresponse.html#operator-eq-eq" status="active" access="public" location="qocspresponse.h" documented="true" related="26" meta="plain" type="bool" signature="bool operator==(const QOcspResponse &amp;lhs, const QOcspResponse &amp;rhs)">
                <parameter type="const QOcspResponse &amp;" name="lhs" default=""/>
                <parameter type="const QOcspResponse &amp;" name="rhs" default=""/>
            </function>
            <function name="responder" fullname="QOcspResponse::responder" href="qocspresponse.html#responder" status="active" access="public" location="qocspresponse.h" documented="true" meta="plain" const="true" type="class QSslCertificate" signature="class QSslCertificate responder() const"/>
            <function name="revocationReason" fullname="QOcspResponse::revocationReason" href="qocspresponse.html#revocationReason" status="active" access="public" location="qocspresponse.h" documented="true" meta="plain" const="true" type="QOcspRevocationReason" signature="QOcspRevocationReason revocationReason() const"/>
            <function name="subject" fullname="QOcspResponse::subject" href="qocspresponse.html#subject" status="active" access="public" location="qocspresponse.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate subject() const"/>
            <function name="swap" fullname="QOcspResponse::swap" href="qocspresponse.html#swap" status="active" access="public" location="qocspresponse.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QOcspResponse &amp;other)">
                <parameter type="QOcspResponse &amp;" name="other" default=""/>
            </function>
            <function name="~QOcspResponse" fullname="QOcspResponse::~QOcspResponse" href="qocspresponse.html#dtor.QOcspResponse" status="active" access="public" location="qocspresponse.h" documented="true" meta="destructor" noexcept="true" signature="~QOcspResponse()"/>
            <enum name="QOcspCertificateStatus" href="qocspresponse.html#QOcspCertificateStatus-enum" status="active" access="public" location="qocspresponse.h" related="27" documented="true" groups="network,ssl" scoped="true">
                <value name="Good" value="0"/>
                <value name="Revoked" value="1"/>
                <value name="Unknown" value="2"/>
            </enum>
            <enum name="QOcspRevocationReason" href="qocspresponse.html#QOcspRevocationReason-enum" status="active" access="public" location="qocspresponse.h" related="28" documented="true" groups="network,ssl" scoped="true">
                <value name="None" value="-1"/>
                <value name="Unspecified" value="0"/>
                <value name="KeyCompromise" value="1"/>
                <value name="CACompromise" value="2"/>
                <value name="AffiliationChanged" value="3"/>
                <value name="Superseded" value="4"/>
                <value name="CessationOfOperation" value="5"/>
                <value name="CertificateHold" value="6"/>
                <value name="RemoveFromCRL" value="7"/>
            </enum>
        </class>
        <namespace name="QPasswordDigestor" href="qpassworddigestor.html" status="active" access="public" location="qpassworddigestor.h" documented="true" module="QtNetwork" brief="Contains functions which you can use to generate hashes or keys">
            <function name="deriveKeyPbkdf1" fullname="QPasswordDigestor::deriveKeyPbkdf1" href="qpassworddigestor.html#deriveKeyPbkdf1" status="active" access="public" location="qpassworddigestor.h" documented="true" meta="plain" type="QByteArray" signature="QByteArray deriveKeyPbkdf1(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)">
                <parameter type="QCryptographicHash::Algorithm" name="algorithm" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QByteArray &amp;" name="salt" default=""/>
                <parameter type="int" name="iterations" default=""/>
                <parameter type="quint64" name="dkLen" default=""/>
            </function>
            <function name="deriveKeyPbkdf2" fullname="QPasswordDigestor::deriveKeyPbkdf2" href="qpassworddigestor.html#deriveKeyPbkdf2" status="active" access="public" location="qpassworddigestor.h" documented="true" meta="plain" type="QByteArray" signature="QByteArray deriveKeyPbkdf2(QCryptographicHash::Algorithm algorithm, const QByteArray &amp;data, const QByteArray &amp;salt, int iterations, quint64 dkLen)">
                <parameter type="QCryptographicHash::Algorithm" name="algorithm" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QByteArray &amp;" name="salt" default=""/>
                <parameter type="int" name="iterations" default=""/>
                <parameter type="quint64" name="dkLen" default=""/>
            </function>
        </namespace>
        <class threadsafety="reentrant" name="QRestAccessManager" href="qrestaccessmanager.html" status="preliminary" access="public" location="qrestaccessmanager.h" since="6.7" documented="true" groups="network" bases="QObject" module="QtNetwork" brief="Convenience wrapper for QNetworkAccessManager">
            <contents name="issuing-network-requests-and-handling-replies" title="Issuing Network Requests and Handling Replies" level="1"/>
            <contents name="using-signals-and-slots" title="Using Signals and Slots" level="2"/>
            <contents name="using-callbacks-and-context-objects" title="Using Callbacks and Context Objects" level="2"/>
            <contents name="supported-data-types" title="Supported data types" level="2"/>
            <function name="QRestAccessManager" fullname="QRestAccessManager::QRestAccessManager" href="qrestaccessmanager.html#QRestAccessManager" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="constructor" explicit="true" signature="QRestAccessManager(QNetworkAccessManager *manager, QObject *parent)">
                <parameter type="QNetworkAccessManager *" name="manager" default=""/>
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="deleteResource" fullname="QRestAccessManager::deleteResource" href="qrestaccessmanager.html#deleteResource" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * deleteResource(const QNetworkRequest &amp;request, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="get" fullname="QRestAccessManager::get" href="qrestaccessmanager.html#get" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="get" fullname="QRestAccessManager::get" href="qrestaccessmanager.html#get-2" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, const QByteArray &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="get" fullname="QRestAccessManager::get" href="qrestaccessmanager.html#get-4" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="4" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, const QJsonDocument &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QJsonDocument &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="get" fullname="QRestAccessManager::get" href="qrestaccessmanager.html#get-6" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="6" type="QNetworkReply *" signature="QNetworkReply * get(const QNetworkRequest &amp;request, QIODevice *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="head" fullname="QRestAccessManager::head" href="qrestaccessmanager.html#head" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * head(const QNetworkRequest &amp;request, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="networkAccessManager" fullname="QRestAccessManager::networkAccessManager" href="qrestaccessmanager.html#networkAccessManager" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" const="true" type="QNetworkAccessManager *" signature="QNetworkAccessManager * networkAccessManager() const"/>
            <function name="patch" fullname="QRestAccessManager::patch" href="qrestaccessmanager.html#patch" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * patch(const QNetworkRequest &amp;request, const QJsonDocument &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QJsonDocument &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="patch" fullname="QRestAccessManager::patch" href="qrestaccessmanager.html#patch-2" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * patch(const QNetworkRequest &amp;request, const QVariantMap &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QVariantMap &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="patch" fullname="QRestAccessManager::patch" href="qrestaccessmanager.html#patch-4" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="4" type="QNetworkReply *" signature="QNetworkReply * patch(const QNetworkRequest &amp;request, const QByteArray &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="patch" fullname="QRestAccessManager::patch" href="qrestaccessmanager.html#patch-6" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="6" type="QNetworkReply *" signature="QNetworkReply * patch(const QNetworkRequest &amp;request, QIODevice *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="post" fullname="QRestAccessManager::post" href="qrestaccessmanager.html#post" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, const QJsonDocument &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QJsonDocument &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="post" fullname="QRestAccessManager::post" href="qrestaccessmanager.html#post-2" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, const QVariantMap &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QVariantMap &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="post" fullname="QRestAccessManager::post" href="qrestaccessmanager.html#post-4" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="4" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, const QByteArray &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="post" fullname="QRestAccessManager::post" href="qrestaccessmanager.html#post-6" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="6" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, QHttpMultiPart *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QHttpMultiPart *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="post" fullname="QRestAccessManager::post" href="qrestaccessmanager.html#post-8" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="8" type="QNetworkReply *" signature="QNetworkReply * post(const QNetworkRequest &amp;request, QIODevice *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="put" fullname="QRestAccessManager::put" href="qrestaccessmanager.html#put" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, const QJsonDocument &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QJsonDocument &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="put" fullname="QRestAccessManager::put" href="qrestaccessmanager.html#put-2" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, const QVariantMap &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QVariantMap &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="put" fullname="QRestAccessManager::put" href="qrestaccessmanager.html#put-4" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="4" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, const QByteArray &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="put" fullname="QRestAccessManager::put" href="qrestaccessmanager.html#put-6" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="6" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, QHttpMultiPart *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QHttpMultiPart *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="put" fullname="QRestAccessManager::put" href="qrestaccessmanager.html#put-8" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="8" type="QNetworkReply *" signature="QNetworkReply * put(const QNetworkRequest &amp;request, QIODevice *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="sendCustomRequest" fullname="QRestAccessManager::sendCustomRequest" href="qrestaccessmanager.html#sendCustomRequest" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;method, const QByteArray &amp;data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="method" default=""/>
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="sendCustomRequest" fullname="QRestAccessManager::sendCustomRequest" href="qrestaccessmanager.html#sendCustomRequest-2" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="2" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;method, QIODevice *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="method" default=""/>
                <parameter type="QIODevice *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="sendCustomRequest" fullname="QRestAccessManager::sendCustomRequest" href="qrestaccessmanager.html#sendCustomRequest-4" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="plain" overload="true" overload-number="4" type="QNetworkReply *" signature="QNetworkReply * sendCustomRequest(const QNetworkRequest &amp;request, const QByteArray &amp;method, QHttpMultiPart *data, const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *context, Functor &amp;&amp;callback)">
                <parameter type="const QNetworkRequest &amp;" name="request" default=""/>
                <parameter type="const QByteArray &amp;" name="method" default=""/>
                <parameter type="QHttpMultiPart *" name="data" default=""/>
                <parameter type="const QRestAccessManager::ContextTypeForFunctor&lt;Functor&gt; *" name="context" default=""/>
                <parameter type="Functor &amp;&amp;" name="callback" default=""/>
            </function>
            <function name="~QRestAccessManager" fullname="QRestAccessManager::~QRestAccessManager" href="qrestaccessmanager.html#dtor.QRestAccessManager" status="active" access="public" location="qrestaccessmanager.h" documented="true" meta="destructor" virtual="virtual" override="true" noexcept="true" signature="~QRestAccessManager() override"/>
        </class>
        <class threadsafety="reentrant" name="QRestReply" href="qrestreply.html" status="preliminary" access="public" location="qrestreply.h" since="6.7" documented="true" groups="network" module="QtNetwork" brief="Convenience wrapper for QNetworkReply">
            <function name="QRestReply" fullname="QRestReply::QRestReply" href="qrestreply.html#QRestReply" status="active" access="public" location="qrestreply.h" documented="true" meta="constructor" explicit="true" signature="QRestReply(QNetworkReply *reply)">
                <parameter type="QNetworkReply *" name="reply" default=""/>
            </function>
            <function name="QRestReply" fullname="QRestReply::QRestReply" href="qrestreply.html#QRestReply-1" status="active" access="public" location="qrestreply.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="1" signature="QRestReply(QRestReply &amp;&amp;other)">
                <parameter type="QRestReply &amp;&amp;" name="other" default=""/>
            </function>
            <function name="error" fullname="QRestReply::error" href="qrestreply.html#error" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="QNetworkReply::NetworkError" signature="QNetworkReply::NetworkError error() const"/>
            <function name="errorString" fullname="QRestReply::errorString" href="qrestreply.html#errorString" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="QString" signature="QString errorString() const"/>
            <function name="hasError" fullname="QRestReply::hasError" href="qrestreply.html#hasError" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasError() const"/>
            <function name="httpStatus" fullname="QRestReply::httpStatus" href="qrestreply.html#httpStatus" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="int" signature="int httpStatus() const"/>
            <function name="isHttpStatusSuccess" fullname="QRestReply::isHttpStatusSuccess" href="qrestreply.html#isHttpStatusSuccess" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool isHttpStatusSuccess() const"/>
            <function name="isSuccess" fullname="QRestReply::isSuccess" href="qrestreply.html#isSuccess" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSuccess() const"/>
            <function name="networkReply" fullname="QRestReply::networkReply" href="qrestreply.html#networkReply" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" const="true" type="QNetworkReply *" signature="QNetworkReply * networkReply() const"/>
            <function name="operator&lt;&lt;" href="qrestreply.html#operator-lt-lt" status="active" access="public" location="qrestreply.h" documented="true" related="29" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QRestReply &amp;reply)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QRestReply &amp;" name="reply" default=""/>
            </function>
            <function name="operator=" fullname="QRestReply::operator=" href="qrestreply.html#operator-eq" status="active" access="public" location="qrestreply.h" documented="true" meta="move-assign" noexcept="true" type="QRestReply &amp;" signature="QRestReply &amp; operator=(QRestReply &amp;&amp;other)">
                <parameter type="QRestReply &amp;&amp;" name="other" default=""/>
            </function>
            <function name="readBody" fullname="QRestReply::readBody" href="qrestreply.html#readBody" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" type="QByteArray" signature="QByteArray readBody()"/>
            <function name="readJson" fullname="QRestReply::readJson" href="qrestreply.html#readJson" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" type="std::optional&lt;QJsonDocument&gt;" signature="std::optional&lt;QJsonDocument&gt; readJson(QJsonParseError *error)">
                <parameter type="QJsonParseError *" name="error" default="nullptr"/>
            </function>
            <function name="readText" fullname="QRestReply::readText" href="qrestreply.html#readText" status="active" access="public" location="qrestreply.h" documented="true" meta="plain" type="QString" signature="QString readText()"/>
            <function name="~QRestReply" fullname="QRestReply::~QRestReply" href="qrestreply.html#dtor.QRestReply" status="active" access="public" location="qrestreply.h" documented="true" meta="destructor" noexcept="true" signature="~QRestReply()"/>
        </class>
        <class name="QSctpServer" href="qsctpserver.html" status="active" access="public" location="qsctpserver.h" documented="true" groups="network" bases="QTcpServer" module="QtNetwork" brief="SCTP-based server">
            <function name="QSctpServer" fullname="QSctpServer::QSctpServer" href="qsctpserver.html#QSctpServer" status="active" access="public" location="qsctpserver.h" documented="true" meta="constructor" explicit="true" signature="QSctpServer(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="incomingConnection" fullname="QSctpServer::incomingConnection" href="qsctpserver.html#incomingConnection" status="active" access="protected" location="qsctpserver.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void incomingConnection(qintptr socketDescriptor) override">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
            </function>
            <function name="maximumChannelCount" fullname="QSctpServer::maximumChannelCount" href="qsctpserver.html#maximumChannelCount" status="active" access="public" location="qsctpserver.h" documented="true" meta="plain" const="true" type="int" signature="int maximumChannelCount() const"/>
            <function name="nextPendingDatagramConnection" fullname="QSctpServer::nextPendingDatagramConnection" href="qsctpserver.html#nextPendingDatagramConnection" status="active" access="public" location="qsctpserver.h" documented="true" meta="plain" type="QSctpSocket *" signature="QSctpSocket * nextPendingDatagramConnection()"/>
            <function name="setMaximumChannelCount" fullname="QSctpServer::setMaximumChannelCount" href="qsctpserver.html#setMaximumChannelCount" status="active" access="public" location="qsctpserver.h" documented="true" meta="plain" type="void" signature="void setMaximumChannelCount(int count)">
                <parameter type="int" name="count" default=""/>
            </function>
            <function name="~QSctpServer" fullname="QSctpServer::~QSctpServer" href="qsctpserver.html#dtor.QSctpServer" status="active" access="public" location="qsctpserver.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QSctpServer()"/>
        </class>
        <class name="QSctpSocket" href="qsctpsocket.html" status="active" access="public" location="qsctpsocket.h" documented="true" groups="network" bases="QTcpSocket" module="QtNetwork" brief="SCTP socket">
            <function name="QSctpSocket" fullname="QSctpSocket::QSctpSocket" href="qsctpsocket.html#QSctpSocket" status="active" access="public" location="qsctpsocket.h" documented="true" meta="constructor" explicit="true" signature="QSctpSocket(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="close" fullname="QSctpSocket::close" href="qsctpsocket.html#close" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void close() override"/>
            <function name="disconnectFromHost" fullname="QSctpSocket::disconnectFromHost" href="qsctpsocket.html#disconnectFromHost" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void disconnectFromHost() override"/>
            <function name="isInDatagramMode" fullname="QSctpSocket::isInDatagramMode" href="qsctpsocket.html#isInDatagramMode" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" const="true" type="bool" signature="bool isInDatagramMode() const"/>
            <function name="maximumChannelCount" fullname="QSctpSocket::maximumChannelCount" href="qsctpsocket.html#maximumChannelCount" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" const="true" type="int" signature="int maximumChannelCount() const"/>
            <function name="readData" fullname="QSctpSocket::readData" href="qsctpsocket.html#readData" status="active" access="protected" location="qsctpsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readData(char *data, qint64 maxSize) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="readDatagram" fullname="QSctpSocket::readDatagram" href="qsctpsocket.html#readDatagram" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" type="QNetworkDatagram" signature="QNetworkDatagram readDatagram()"/>
            <function name="readLineData" fullname="QSctpSocket::readLineData" href="qsctpsocket.html#readLineData" status="active" access="protected" location="qsctpsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readLineData(char *data, qint64 maxlen) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxlen" default=""/>
            </function>
            <function name="setMaximumChannelCount" fullname="QSctpSocket::setMaximumChannelCount" href="qsctpsocket.html#setMaximumChannelCount" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" type="void" signature="void setMaximumChannelCount(int count)">
                <parameter type="int" name="count" default=""/>
            </function>
            <function name="writeDatagram" fullname="QSctpSocket::writeDatagram" href="qsctpsocket.html#writeDatagram" status="active" access="public" location="qsctpsocket.h" documented="true" meta="plain" type="bool" signature="bool writeDatagram(const QNetworkDatagram &amp;datagram)">
                <parameter type="const QNetworkDatagram &amp;" name="datagram" default=""/>
            </function>
            <function name="~QSctpSocket" fullname="QSctpSocket::~QSctpSocket" href="qsctpsocket.html#dtor.QSctpSocket" status="active" access="public" location="qsctpsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QSctpSocket()"/>
        </class>
        <namespace name="QSsl" href="qssl.html" status="active" access="public" location="qssl.h" documented="true" groups="network,ssl" module="QtNetwork" brief="Declares enums common to all SSL classes in Qt Network">
            <enum name="AlertLevel" href="qsslsocket.html#AlertLevel-enum" status="active" access="public" location="qssl.h" related="30" since="6.0" documented="true" groups="network,ssl" scoped="true">
                <value name="Warning" value="0"/>
                <value name="Fatal" value="1"/>
                <value name="Unknown" value="2"/>
            </enum>
            <enum name="AlertType" href="qsslsocket.html#AlertType-enum" status="active" access="public" location="qssl.h" related="31" since="6.0" documented="true" groups="network,ssl" scoped="true">
                <value name="CloseNotify" value="0"/>
                <value name="UnexpectedMessage" value="10"/>
                <value name="BadRecordMac" value="20"/>
                <value name="RecordOverflow" value="22"/>
                <value name="DecompressionFailure" value="30"/>
                <value name="HandshakeFailure" value="40"/>
                <value name="NoCertificate" value="41"/>
                <value name="BadCertificate" value="42"/>
                <value name="UnsupportedCertificate" value="43"/>
                <value name="CertificateRevoked" value="44"/>
                <value name="CertificateExpired" value="45"/>
                <value name="CertificateUnknown" value="46"/>
                <value name="IllegalParameter" value="47"/>
                <value name="UnknownCa" value="48"/>
                <value name="AccessDenied" value="49"/>
                <value name="DecodeError" value="50"/>
                <value name="DecryptError" value="51"/>
                <value name="ExportRestriction" value="60"/>
                <value name="ProtocolVersion" value="70"/>
                <value name="InsufficientSecurity" value="71"/>
                <value name="InternalError" value="80"/>
                <value name="InappropriateFallback" value="86"/>
                <value name="UserCancelled" value="90"/>
                <value name="NoRenegotiation" value="100"/>
                <value name="MissingExtension" value="109"/>
                <value name="UnsupportedExtension" value="110"/>
                <value name="CertificateUnobtainable" value="111"/>
                <value name="UnrecognizedName" value="112"/>
                <value name="BadCertificateStatusResponse" value="113"/>
                <value name="BadCertificateHashValue" value="114"/>
                <value name="UnknownPskIdentity" value="115"/>
                <value name="CertificateRequired" value="116"/>
                <value name="NoApplicationProtocol" value="120"/>
                <value name="UnknownAlertMessage" value="255"/>
            </enum>
            <enum name="AlternativeNameEntryType" fullname="QSsl::AlternativeNameEntryType" href="qssl.html#AlternativeNameEntryType-enum" status="active" access="public" location="qssl.h" documented="true">
                <value name="EmailEntry" value="0"/>
                <value name="DnsEntry" value="1"/>
                <value name="IpAddressEntry" value="2"/>
            </enum>
            <enum name="EncodingFormat" fullname="QSsl::EncodingFormat" href="qssl.html#EncodingFormat-enum" status="active" access="public" location="qssl.h" documented="true">
                <value name="Pem" value="0"/>
                <value name="Der" value="1"/>
            </enum>
            <enum name="ImplementedClass" href="qsslsocket.html#ImplementedClass-enum" status="active" access="public" location="qssl.h" related="32" since="6.1" documented="true" groups="network,ssl" scoped="true">
                <value name="Key" value="0"/>
                <value name="Certificate" value="1"/>
                <value name="Socket" value="2"/>
                <value name="DiffieHellman" value="3"/>
                <value name="EllipticCurve" value="4"/>
                <value name="Dtls" value="5"/>
                <value name="DtlsCookie" value="6"/>
            </enum>
            <enum name="KeyAlgorithm" fullname="QSsl::KeyAlgorithm" href="qssl.html#KeyAlgorithm-enum" status="active" access="public" location="qssl.h" documented="true">
                <value name="Opaque" value="0"/>
                <value name="Rsa" value="1"/>
                <value name="Dsa" value="2"/>
                <value name="Ec" value="3"/>
                <value name="Dh" value="4"/>
            </enum>
            <enum name="KeyType" fullname="QSsl::KeyType" href="qssl.html#KeyType-enum" status="active" access="public" location="qssl.h" documented="true">
                <value name="PrivateKey" value="0"/>
                <value name="PublicKey" value="1"/>
            </enum>
            <enum name="SslOption" fullname="QSsl::SslOption" href="qssl.html#SslOption-enum" status="active" access="public" location="qssl.h" documented="true" typedef="QSsl::SslOptions">
                <value name="SslOptionDisableEmptyFragments" value="0x01"/>
                <value name="SslOptionDisableSessionTickets" value="0x02"/>
                <value name="SslOptionDisableCompression" value="0x04"/>
                <value name="SslOptionDisableServerNameIndication" value="0x08"/>
                <value name="SslOptionDisableLegacyRenegotiation" value="0x10"/>
                <value name="SslOptionDisableSessionSharing" value="0x20"/>
                <value name="SslOptionDisableSessionPersistence" value="0x40"/>
                <value name="SslOptionDisableServerCipherPreference" value="0x80"/>
            </enum>
            <enum name="SslProtocol" fullname="QSsl::SslProtocol" href="qssl.html#SslProtocol-enum" status="active" access="public" location="qssl.h" documented="true">
                <value name="TlsV1_0" value="0"/>
                <value name="TlsV1_1" value="1"/>
                <value name="TlsV1_2" value="2"/>
                <value name="AnyProtocol" value="3"/>
                <value name="SecureProtocols" value="4"/>
                <value name="TlsV1_0OrLater" value="5"/>
                <value name="TlsV1_1OrLater" value="6"/>
                <value name="TlsV1_2OrLater" value="7"/>
                <value name="DtlsV1_0" value="8"/>
                <value name="DtlsV1_0OrLater" value="9"/>
                <value name="DtlsV1_2" value="10"/>
                <value name="DtlsV1_2OrLater" value="11"/>
                <value name="TlsV1_3" value="12"/>
                <value name="TlsV1_3OrLater" value="13"/>
                <value name="UnknownProtocol" value="-1"/>
            </enum>
            <enum name="SupportedFeature" href="qsslsocket.html#SupportedFeature-enum" status="active" access="public" location="qssl.h" related="33" since="6.1" documented="true" groups="network,ssl" scoped="true">
                <value name="CertificateVerification" value="0"/>
                <value name="ClientSideAlpn" value="1"/>
                <value name="ServerSideAlpn" value="2"/>
                <value name="Ocsp" value="3"/>
                <value name="Psk" value="4"/>
                <value name="SessionTicket" value="5"/>
                <value name="Alerts" value="6"/>
            </enum>
            <typedef name="SslOptions" fullname="QSsl::SslOptions" href="qssl.html#SslOption-enum" status="active" access="public" location="qssl.h" enum="QSsl::SslOption"/>
        </namespace>
        <class threadsafety="reentrant" name="QSslCertificate" href="qsslcertificate.html" status="active" access="public" location="qsslcertificate.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Convenient API for an X509 certificate">
            <function name="QSslCertificate" fullname="QSslCertificate::QSslCertificate" href="qsslcertificate.html#QSslCertificate" status="active" access="public" location="qsslcertificate.h" documented="true" meta="constructor" explicit="true" signature="QSslCertificate(QIODevice *device, QSsl::EncodingFormat format)">
                <parameter type="QIODevice *" name="device" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
            </function>
            <function name="QSslCertificate" fullname="QSslCertificate::QSslCertificate" href="qsslcertificate.html#QSslCertificate-1" status="active" access="public" location="qsslcertificate.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QSslCertificate(const QByteArray &amp;data, QSsl::EncodingFormat format)">
                <parameter type="const QByteArray &amp;" name="data" default="QByteArray()"/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
            </function>
            <function name="QSslCertificate" fullname="QSslCertificate::QSslCertificate" href="qsslcertificate.html#QSslCertificate-2" status="active" access="public" location="qsslcertificate.h" documented="true" meta="copy-constructor" overload="true" overload-number="2" signature="QSslCertificate(const QSslCertificate &amp;other)">
                <parameter type="const QSslCertificate &amp;" name="other" default=""/>
            </function>
            <function name="clear" fullname="QSslCertificate::clear" href="qsslcertificate.html#clear" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" type="void" signature="void clear()"/>
            <function name="digest" fullname="QSslCertificate::digest" href="qsslcertificate.html#digest" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray digest(QCryptographicHash::Algorithm algorithm) const">
                <parameter type="QCryptographicHash::Algorithm" name="algorithm" default="QCryptographicHash::Md5"/>
            </function>
            <function name="effectiveDate" fullname="QSslCertificate::effectiveDate" href="qsslcertificate.html#effectiveDate" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime effectiveDate() const"/>
            <function name="expiryDate" fullname="QSslCertificate::expiryDate" href="qsslcertificate.html#expiryDate" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QDateTime" signature="QDateTime expiryDate() const"/>
            <function name="extensions" fullname="QSslCertificate::extensions" href="qsslcertificate.html#extensions" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificateExtension&gt;" signature="QList&lt;QSslCertificateExtension&gt; extensions() const"/>
            <function name="fromData" fullname="QSslCertificate::fromData" href="qsslcertificate.html#fromData" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" static="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; fromData(const QByteArray &amp;data, QSsl::EncodingFormat format)">
                <parameter type="const QByteArray &amp;" name="data" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
            </function>
            <function name="fromDevice" fullname="QSslCertificate::fromDevice" href="qsslcertificate.html#fromDevice" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" static="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; fromDevice(QIODevice *device, QSsl::EncodingFormat format)">
                <parameter type="QIODevice *" name="device" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
            </function>
            <function name="fromPath" fullname="QSslCertificate::fromPath" href="qsslcertificate.html#fromPath" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" static="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; fromPath(const QString &amp;path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax)">
                <parameter type="const QString &amp;" name="path" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
                <parameter type="QSslCertificate::PatternSyntax" name="syntax" default="PatternSyntax::FixedString"/>
            </function>
            <function name="handle" fullname="QSslCertificate::handle" href="qsslcertificate.html#handle" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="Qt::HANDLE" signature="Qt::HANDLE handle() const"/>
            <function name="importPkcs12" fullname="QSslCertificate::importPkcs12" href="qsslcertificate.html#importPkcs12" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" static="true" type="bool" signature="bool importPkcs12(QIODevice *device, QSslKey *key, QSslCertificate *certificate, QList&lt;QSslCertificate&gt; *caCertificates, const QByteArray &amp;passPhrase)">
                <parameter type="QIODevice *" name="device" default=""/>
                <parameter type="QSslKey *" name="key" default=""/>
                <parameter type="QSslCertificate *" name="certificate" default=""/>
                <parameter type="QList&lt;QSslCertificate&gt; *" name="caCertificates" default="nullptr"/>
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="isBlacklisted" fullname="QSslCertificate::isBlacklisted" href="qsslcertificate.html#isBlacklisted" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="bool" signature="bool isBlacklisted() const"/>
            <function name="isNull" fullname="QSslCertificate::isNull" href="qsslcertificate.html#isNull" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="isSelfSigned" fullname="QSslCertificate::isSelfSigned" href="qsslcertificate.html#isSelfSigned" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSelfSigned() const"/>
            <function name="issuerDisplayName" fullname="QSslCertificate::issuerDisplayName" href="qsslcertificate.html#issuerDisplayName" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QString" signature="QString issuerDisplayName() const"/>
            <function name="issuerInfo" fullname="QSslCertificate::issuerInfo" href="qsslcertificate.html#issuerInfo" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QStringList" signature="QStringList issuerInfo(QSslCertificate::SubjectInfo subject) const">
                <parameter type="QSslCertificate::SubjectInfo" name="subject" default=""/>
            </function>
            <function name="issuerInfo" fullname="QSslCertificate::issuerInfo" href="qsslcertificate.html#issuerInfo-1" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="QStringList" signature="QStringList issuerInfo(const QByteArray &amp;attribute) const">
                <parameter type="const QByteArray &amp;" name="attribute" default=""/>
            </function>
            <function name="issuerInfoAttributes" fullname="QSslCertificate::issuerInfoAttributes" href="qsslcertificate.html#issuerInfoAttributes" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; issuerInfoAttributes() const"/>
            <function name="operator!=" fullname="QSslCertificate::operator!=" href="qsslcertificate.html#operator-not-eq" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QSslCertificate &amp;other) const">
                <parameter type="const QSslCertificate &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslCertificate::operator=" href="qsslcertificate.html#operator-eq-1" status="active" access="public" location="qsslcertificate.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslCertificate &amp;" signature="QSslCertificate &amp; operator=(const QSslCertificate &amp;other)">
                <parameter type="const QSslCertificate &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QSslCertificate::operator==" href="qsslcertificate.html#operator-eq-eq" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QSslCertificate &amp;other) const">
                <parameter type="const QSslCertificate &amp;" name="other" default=""/>
            </function>
            <function name="publicKey" fullname="QSslCertificate::publicKey" href="qsslcertificate.html#publicKey" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QSslKey" signature="QSslKey publicKey() const"/>
            <function name="serialNumber" fullname="QSslCertificate::serialNumber" href="qsslcertificate.html#serialNumber" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray serialNumber() const"/>
            <function name="subjectAlternativeNames" fullname="QSslCertificate::subjectAlternativeNames" href="qsslcertificate.html#subjectAlternativeNames" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt;" signature="QMultiMap&lt;QSsl::AlternativeNameEntryType, QString&gt; subjectAlternativeNames() const"/>
            <function name="subjectDisplayName" fullname="QSslCertificate::subjectDisplayName" href="qsslcertificate.html#subjectDisplayName" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QString" signature="QString subjectDisplayName() const"/>
            <function name="subjectInfo" fullname="QSslCertificate::subjectInfo" href="qsslcertificate.html#subjectInfo" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QStringList" signature="QStringList subjectInfo(QSslCertificate::SubjectInfo subject) const">
                <parameter type="QSslCertificate::SubjectInfo" name="subject" default=""/>
            </function>
            <function name="subjectInfo" fullname="QSslCertificate::subjectInfo" href="qsslcertificate.html#subjectInfo-1" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" overload="true" overload-number="1" type="QStringList" signature="QStringList subjectInfo(const QByteArray &amp;attribute) const">
                <parameter type="const QByteArray &amp;" name="attribute" default=""/>
            </function>
            <function name="subjectInfoAttributes" fullname="QSslCertificate::subjectInfoAttributes" href="qsslcertificate.html#subjectInfoAttributes" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; subjectInfoAttributes() const"/>
            <function name="swap" fullname="QSslCertificate::swap" href="qsslcertificate.html#swap" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslCertificate &amp;other)">
                <parameter type="QSslCertificate &amp;" name="other" default=""/>
            </function>
            <function name="toDer" fullname="QSslCertificate::toDer" href="qsslcertificate.html#toDer" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray toDer() const"/>
            <function name="toPem" fullname="QSslCertificate::toPem" href="qsslcertificate.html#toPem" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray toPem() const"/>
            <function name="toText" fullname="QSslCertificate::toText" href="qsslcertificate.html#toText" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QString" signature="QString toText() const"/>
            <function name="verify" fullname="QSslCertificate::verify" href="qsslcertificate.html#verify" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" static="true" type="QList&lt;QSslError&gt;" signature="QList&lt;QSslError&gt; verify(const QList&lt;QSslCertificate&gt; &amp;certificateChain, const QString &amp;hostName)">
                <parameter type="const QList&lt;QSslCertificate&gt; &amp;" name="certificateChain" default=""/>
                <parameter type="const QString &amp;" name="hostName" default="QString()"/>
            </function>
            <function name="version" fullname="QSslCertificate::version" href="qsslcertificate.html#version" status="active" access="public" location="qsslcertificate.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray version() const"/>
            <function name="~QSslCertificate" fullname="QSslCertificate::~QSslCertificate" href="qsslcertificate.html#dtor.QSslCertificate" status="active" access="public" location="qsslcertificate.h" documented="true" meta="destructor" noexcept="true" signature="~QSslCertificate()"/>
            <enum name="PatternSyntax" fullname="QSslCertificate::PatternSyntax" href="qsslcertificate.html#PatternSyntax-enum" status="active" access="public" location="qsslcertificate.h" documented="true" scoped="true">
                <value name="RegularExpression" value="0"/>
                <value name="Wildcard" value="1"/>
                <value name="FixedString" value="2"/>
            </enum>
            <enum name="SubjectInfo" fullname="QSslCertificate::SubjectInfo" href="qsslcertificate.html#SubjectInfo-enum" status="active" access="public" location="qsslcertificate.h" documented="true">
                <value name="Organization" value="0"/>
                <value name="CommonName" value="1"/>
                <value name="LocalityName" value="2"/>
                <value name="OrganizationalUnitName" value="3"/>
                <value name="CountryName" value="4"/>
                <value name="StateOrProvinceName" value="5"/>
                <value name="DistinguishedNameQualifier" value="6"/>
                <value name="SerialNumber" value="7"/>
                <value name="EmailAddress" value="8"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QSslCertificateExtension" href="qsslcertificateextension.html" status="active" access="public" location="qsslcertificateextension.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="API for accessing the extensions of an X509 certificate">
            <function name="QSslCertificateExtension" fullname="QSslCertificateExtension::QSslCertificateExtension" href="qsslcertificateextension.html#QSslCertificateExtension" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="constructor" signature="QSslCertificateExtension()"/>
            <function name="QSslCertificateExtension" fullname="QSslCertificateExtension::QSslCertificateExtension" href="qsslcertificateextension.html#QSslCertificateExtension-1" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QSslCertificateExtension(const QSslCertificateExtension &amp;other)">
                <parameter type="const QSslCertificateExtension &amp;" name="other" default=""/>
            </function>
            <function name="isCritical" fullname="QSslCertificateExtension::isCritical" href="qsslcertificateextension.html#isCritical" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" const="true" type="bool" signature="bool isCritical() const"/>
            <function name="isSupported" fullname="QSslCertificateExtension::isSupported" href="qsslcertificateextension.html#isSupported" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" const="true" type="bool" signature="bool isSupported() const"/>
            <function name="name" fullname="QSslCertificateExtension::name" href="qsslcertificateextension.html#name" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="oid" fullname="QSslCertificateExtension::oid" href="qsslcertificateextension.html#oid" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" const="true" type="QString" signature="QString oid() const"/>
            <function name="operator=" fullname="QSslCertificateExtension::operator=" href="qsslcertificateextension.html#operator-eq-1" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslCertificateExtension &amp;" signature="QSslCertificateExtension &amp; operator=(const QSslCertificateExtension &amp;other)">
                <parameter type="const QSslCertificateExtension &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QSslCertificateExtension::swap" href="qsslcertificateextension.html#swap" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslCertificateExtension &amp;other)">
                <parameter type="QSslCertificateExtension &amp;" name="other" default=""/>
            </function>
            <function name="value" fullname="QSslCertificateExtension::value" href="qsslcertificateextension.html#value" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="plain" const="true" type="QVariant" signature="QVariant value() const"/>
            <function name="~QSslCertificateExtension" fullname="QSslCertificateExtension::~QSslCertificateExtension" href="qsslcertificateextension.html#dtor.QSslCertificateExtension" status="active" access="public" location="qsslcertificateextension.h" documented="true" meta="destructor" noexcept="true" signature="~QSslCertificateExtension()"/>
        </class>
        <class threadsafety="reentrant" name="QSslCipher" href="qsslcipher.html" status="active" access="public" location="qsslcipher.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Represents an SSL cryptographic cipher">
            <function name="QSslCipher" fullname="QSslCipher::QSslCipher" href="qsslcipher.html#QSslCipher" status="active" access="public" location="qsslcipher.h" documented="true" meta="constructor" signature="QSslCipher()"/>
            <function name="QSslCipher" fullname="QSslCipher::QSslCipher" href="qsslcipher.html#QSslCipher-1" status="active" access="public" location="qsslcipher.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QSslCipher(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="QSslCipher" fullname="QSslCipher::QSslCipher" href="qsslcipher.html#QSslCipher-2" status="active" access="public" location="qsslcipher.h" documented="true" meta="constructor" overload="true" overload-number="2" signature="QSslCipher(const QString &amp;name, QSsl::SslProtocol protocol)">
                <parameter type="const QString &amp;" name="name" default=""/>
                <parameter type="QSsl::SslProtocol" name="protocol" default=""/>
            </function>
            <function name="QSslCipher" fullname="QSslCipher::QSslCipher" href="qsslcipher.html#QSslCipher-3" status="active" access="public" location="qsslcipher.h" documented="true" meta="copy-constructor" overload="true" overload-number="3" signature="QSslCipher(const QSslCipher &amp;other)">
                <parameter type="const QSslCipher &amp;" name="other" default=""/>
            </function>
            <function name="authenticationMethod" fullname="QSslCipher::authenticationMethod" href="qsslcipher.html#authenticationMethod" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QString" signature="QString authenticationMethod() const"/>
            <function name="encryptionMethod" fullname="QSslCipher::encryptionMethod" href="qsslcipher.html#encryptionMethod" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QString" signature="QString encryptionMethod() const"/>
            <function name="isNull" fullname="QSslCipher::isNull" href="qsslcipher.html#isNull" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="keyExchangeMethod" fullname="QSslCipher::keyExchangeMethod" href="qsslcipher.html#keyExchangeMethod" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QString" signature="QString keyExchangeMethod() const"/>
            <function name="name" fullname="QSslCipher::name" href="qsslcipher.html#name" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QString" signature="QString name() const"/>
            <function name="operator!=" fullname="QSslCipher::operator!=" href="qsslcipher.html#operator-not-eq" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QSslCipher &amp;other) const">
                <parameter type="const QSslCipher &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslCipher::operator=" href="qsslcipher.html#operator-eq-1" status="active" access="public" location="qsslcipher.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslCipher &amp;" signature="QSslCipher &amp; operator=(const QSslCipher &amp;other)">
                <parameter type="const QSslCipher &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QSslCipher::operator==" href="qsslcipher.html#operator-eq-eq" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QSslCipher &amp;other) const">
                <parameter type="const QSslCipher &amp;" name="other" default=""/>
            </function>
            <function name="protocol" fullname="QSslCipher::protocol" href="qsslcipher.html#protocol" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol protocol() const"/>
            <function name="protocolString" fullname="QSslCipher::protocolString" href="qsslcipher.html#protocolString" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="QString" signature="QString protocolString() const"/>
            <function name="supportedBits" fullname="QSslCipher::supportedBits" href="qsslcipher.html#supportedBits" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="int" signature="int supportedBits() const"/>
            <function name="swap" fullname="QSslCipher::swap" href="qsslcipher.html#swap" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslCipher &amp;other)">
                <parameter type="QSslCipher &amp;" name="other" default=""/>
            </function>
            <function name="usedBits" fullname="QSslCipher::usedBits" href="qsslcipher.html#usedBits" status="active" access="public" location="qsslcipher.h" documented="true" meta="plain" const="true" type="int" signature="int usedBits() const"/>
            <function name="~QSslCipher" fullname="QSslCipher::~QSslCipher" href="qsslcipher.html#dtor.QSslCipher" status="active" access="public" location="qsslcipher.h" documented="true" meta="destructor" noexcept="true" signature="~QSslCipher()"/>
        </class>
        <class threadsafety="reentrant" name="QSslConfiguration" href="qsslconfiguration.html" status="active" access="public" location="qsslconfiguration.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Holds the configuration and state of an SSL connection">
            <function name="QSslConfiguration" fullname="QSslConfiguration::QSslConfiguration" href="qsslconfiguration.html#QSslConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="constructor" signature="QSslConfiguration()"/>
            <function name="QSslConfiguration" fullname="QSslConfiguration::QSslConfiguration" href="qsslconfiguration.html#QSslConfiguration-1" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QSslConfiguration(const QSslConfiguration &amp;other)">
                <parameter type="const QSslConfiguration &amp;" name="other" default=""/>
            </function>
            <function name="addCaCertificate" fullname="QSslConfiguration::addCaCertificate" href="qsslconfiguration.html#addCaCertificate" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void addCaCertificate(const QSslCertificate &amp;certificate)">
                <parameter type="const QSslCertificate &amp;" name="certificate" default=""/>
            </function>
            <function name="addCaCertificates" fullname="QSslConfiguration::addCaCertificates" href="qsslconfiguration.html#addCaCertificates" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="bool" signature="bool addCaCertificates(const QString &amp;path, QSsl::EncodingFormat format, QSslCertificate::PatternSyntax syntax)">
                <parameter type="const QString &amp;" name="path" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
                <parameter type="QSslCertificate::PatternSyntax" name="syntax" default="QSslCertificate::PatternSyntax::FixedString"/>
            </function>
            <function name="addCaCertificates" fullname="QSslConfiguration::addCaCertificates" href="qsslconfiguration.html#addCaCertificates-1" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void addCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates)">
                <parameter type="const QList&lt;QSslCertificate&gt; &amp;" name="certificates" default=""/>
            </function>
            <function name="allowedNextProtocols" fullname="QSslConfiguration::allowedNextProtocols" href="qsslconfiguration.html#allowedNextProtocols" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QByteArray&gt;" signature="QList&lt;QByteArray&gt; allowedNextProtocols() const"/>
            <function name="backendConfiguration" fullname="QSslConfiguration::backendConfiguration" href="qsslconfiguration.html#backendConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QMap&lt;QByteArray, QVariant&gt;" signature="QMap&lt;QByteArray, QVariant&gt; backendConfiguration() const"/>
            <function name="caCertificates" fullname="QSslConfiguration::caCertificates" href="qsslconfiguration.html#caCertificates" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; caCertificates() const"/>
            <function name="ciphers" fullname="QSslConfiguration::ciphers" href="qsslconfiguration.html#ciphers" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCipher&gt;" signature="QList&lt;QSslCipher&gt; ciphers() const"/>
            <function name="defaultConfiguration" fullname="QSslConfiguration::defaultConfiguration" href="qsslconfiguration.html#defaultConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="QSslConfiguration" signature="QSslConfiguration defaultConfiguration()"/>
            <function name="defaultDtlsConfiguration" fullname="QSslConfiguration::defaultDtlsConfiguration" href="qsslconfiguration.html#defaultDtlsConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="QSslConfiguration" signature="QSslConfiguration defaultDtlsConfiguration()"/>
            <function name="diffieHellmanParameters" fullname="QSslConfiguration::diffieHellmanParameters" href="qsslconfiguration.html#diffieHellmanParameters" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslDiffieHellmanParameters" signature="QSslDiffieHellmanParameters diffieHellmanParameters() const"/>
            <function name="dtlsCookieVerificationEnabled" fullname="QSslConfiguration::dtlsCookieVerificationEnabled" href="qsslconfiguration.html#dtlsCookieVerificationEnabled" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool dtlsCookieVerificationEnabled() const"/>
            <function name="ellipticCurves" fullname="QSslConfiguration::ellipticCurves" href="qsslconfiguration.html#ellipticCurves" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QSslEllipticCurve&gt;" signature="QList&lt;QSslEllipticCurve&gt; ellipticCurves() const"/>
            <function name="ephemeralServerKey" fullname="QSslConfiguration::ephemeralServerKey" href="qsslconfiguration.html#ephemeralServerKey" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslKey" signature="QSslKey ephemeralServerKey() const"/>
            <function name="handshakeMustInterruptOnError" fullname="QSslConfiguration::handshakeMustInterruptOnError" href="qsslconfiguration.html#handshakeMustInterruptOnError" status="active" access="public" location="qsslconfiguration.h" documented="true" since="6.0" meta="plain" const="true" type="bool" signature="bool handshakeMustInterruptOnError() const"/>
            <function name="isNull" fullname="QSslConfiguration::isNull" href="qsslconfiguration.html#isNull" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="localCertificate" fullname="QSslConfiguration::localCertificate" href="qsslconfiguration.html#localCertificate" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate localCertificate() const"/>
            <function name="localCertificateChain" fullname="QSslConfiguration::localCertificateChain" href="qsslconfiguration.html#localCertificateChain" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; localCertificateChain() const"/>
            <function name="missingCertificateIsFatal" fullname="QSslConfiguration::missingCertificateIsFatal" href="qsslconfiguration.html#missingCertificateIsFatal" status="active" access="public" location="qsslconfiguration.h" documented="true" since="6.0" meta="plain" const="true" type="bool" signature="bool missingCertificateIsFatal() const"/>
            <function name="nextNegotiatedProtocol" fullname="QSslConfiguration::nextNegotiatedProtocol" href="qsslconfiguration.html#nextNegotiatedProtocol" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray nextNegotiatedProtocol() const"/>
            <function name="nextProtocolNegotiationStatus" fullname="QSslConfiguration::nextProtocolNegotiationStatus" href="qsslconfiguration.html#nextProtocolNegotiationStatus" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslConfiguration::NextProtocolNegotiationStatus" signature="QSslConfiguration::NextProtocolNegotiationStatus nextProtocolNegotiationStatus() const"/>
            <function name="ocspStaplingEnabled" fullname="QSslConfiguration::ocspStaplingEnabled" href="qsslconfiguration.html#ocspStaplingEnabled" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool ocspStaplingEnabled() const"/>
            <function name="operator!=" fullname="QSslConfiguration::operator!=" href="qsslconfiguration.html#operator-not-eq" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QSslConfiguration &amp;other) const">
                <parameter type="const QSslConfiguration &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslConfiguration::operator=" href="qsslconfiguration.html#operator-eq-1" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslConfiguration &amp;" signature="QSslConfiguration &amp; operator=(const QSslConfiguration &amp;other)">
                <parameter type="const QSslConfiguration &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QSslConfiguration::operator==" href="qsslconfiguration.html#operator-eq-eq" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QSslConfiguration &amp;other) const">
                <parameter type="const QSslConfiguration &amp;" name="other" default=""/>
            </function>
            <function name="peerCertificate" fullname="QSslConfiguration::peerCertificate" href="qsslconfiguration.html#peerCertificate" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate peerCertificate() const"/>
            <function name="peerCertificateChain" fullname="QSslConfiguration::peerCertificateChain" href="qsslconfiguration.html#peerCertificateChain" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; peerCertificateChain() const"/>
            <function name="peerVerifyDepth" fullname="QSslConfiguration::peerVerifyDepth" href="qsslconfiguration.html#peerVerifyDepth" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="int" signature="int peerVerifyDepth() const"/>
            <function name="peerVerifyMode" fullname="QSslConfiguration::peerVerifyMode" href="qsslconfiguration.html#peerVerifyMode" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslSocket::PeerVerifyMode" signature="QSslSocket::PeerVerifyMode peerVerifyMode() const"/>
            <function name="preSharedKeyIdentityHint" fullname="QSslConfiguration::preSharedKeyIdentityHint" href="qsslconfiguration.html#preSharedKeyIdentityHint" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray preSharedKeyIdentityHint() const"/>
            <function name="privateKey" fullname="QSslConfiguration::privateKey" href="qsslconfiguration.html#privateKey" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslKey" signature="QSslKey privateKey() const"/>
            <function name="protocol" fullname="QSslConfiguration::protocol" href="qsslconfiguration.html#protocol" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol protocol() const"/>
            <function name="sessionCipher" fullname="QSslConfiguration::sessionCipher" href="qsslconfiguration.html#sessionCipher" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSslCipher" signature="QSslCipher sessionCipher() const"/>
            <function name="sessionProtocol" fullname="QSslConfiguration::sessionProtocol" href="qsslconfiguration.html#sessionProtocol" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol sessionProtocol() const"/>
            <function name="sessionTicket" fullname="QSslConfiguration::sessionTicket" href="qsslconfiguration.html#sessionTicket" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray sessionTicket() const"/>
            <function name="sessionTicketLifeTimeHint" fullname="QSslConfiguration::sessionTicketLifeTimeHint" href="qsslconfiguration.html#sessionTicketLifeTimeHint" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="int" signature="int sessionTicketLifeTimeHint() const"/>
            <function name="setAllowedNextProtocols" fullname="QSslConfiguration::setAllowedNextProtocols" href="qsslconfiguration.html#setAllowedNextProtocols" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setAllowedNextProtocols(const QList&lt;QByteArray&gt; &amp;protocols)">
                <parameter type="const QList&lt;QByteArray&gt; &amp;" name="protocols" default=""/>
            </function>
            <function name="setBackendConfiguration" fullname="QSslConfiguration::setBackendConfiguration" href="qsslconfiguration.html#setBackendConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setBackendConfiguration(const QMap&lt;QByteArray, QVariant&gt; &amp;backendConfiguration)">
                <parameter type="const QMap&lt;QByteArray, QVariant&gt; &amp;" name="backendConfiguration" default="QMap&lt;QByteArray, QVariant&gt;()"/>
            </function>
            <function name="setBackendConfigurationOption" fullname="QSslConfiguration::setBackendConfigurationOption" href="qsslconfiguration.html#setBackendConfigurationOption" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setBackendConfigurationOption(const QByteArray &amp;name, const QVariant &amp;value)">
                <parameter type="const QByteArray &amp;" name="name" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setCaCertificates" fullname="QSslConfiguration::setCaCertificates" href="qsslconfiguration.html#setCaCertificates" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setCaCertificates(const QList&lt;QSslCertificate&gt; &amp;certificates)">
                <parameter type="const QList&lt;QSslCertificate&gt; &amp;" name="certificates" default=""/>
            </function>
            <function name="setCiphers" fullname="QSslConfiguration::setCiphers" href="qsslconfiguration.html#setCiphers" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setCiphers(const QList&lt;QSslCipher&gt; &amp;ciphers)">
                <parameter type="const QList&lt;QSslCipher&gt; &amp;" name="ciphers" default=""/>
            </function>
            <function name="setCiphers" fullname="QSslConfiguration::setCiphers" href="qsslconfiguration.html#setCiphers-1" status="active" access="public" location="qsslconfiguration.h" documented="true" since="6.0" meta="plain" overload="true" overload-number="1" type="void" signature="void setCiphers(const QString &amp;ciphers)">
                <parameter type="const QString &amp;" name="ciphers" default=""/>
            </function>
            <function name="setDefaultConfiguration" fullname="QSslConfiguration::setDefaultConfiguration" href="qsslconfiguration.html#setDefaultConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="void" signature="void setDefaultConfiguration(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="setDefaultDtlsConfiguration" fullname="QSslConfiguration::setDefaultDtlsConfiguration" href="qsslconfiguration.html#setDefaultDtlsConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="void" signature="void setDefaultDtlsConfiguration(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="setDiffieHellmanParameters" fullname="QSslConfiguration::setDiffieHellmanParameters" href="qsslconfiguration.html#setDiffieHellmanParameters" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setDiffieHellmanParameters(const QSslDiffieHellmanParameters &amp;dhparams)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparams" default=""/>
            </function>
            <function name="setDtlsCookieVerificationEnabled" fullname="QSslConfiguration::setDtlsCookieVerificationEnabled" href="qsslconfiguration.html#setDtlsCookieVerificationEnabled" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setDtlsCookieVerificationEnabled(bool enable)">
                <parameter type="bool" name="enable" default=""/>
            </function>
            <function name="setEllipticCurves" fullname="QSslConfiguration::setEllipticCurves" href="qsslconfiguration.html#setEllipticCurves" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setEllipticCurves(const QList&lt;QSslEllipticCurve&gt; &amp;curves)">
                <parameter type="const QList&lt;QSslEllipticCurve&gt; &amp;" name="curves" default=""/>
            </function>
            <function name="setHandshakeMustInterruptOnError" fullname="QSslConfiguration::setHandshakeMustInterruptOnError" href="qsslconfiguration.html#setHandshakeMustInterruptOnError" status="active" access="public" location="qsslconfiguration.h" documented="true" since="6.0" meta="plain" type="void" signature="void setHandshakeMustInterruptOnError(bool interrupt)">
                <parameter type="bool" name="interrupt" default=""/>
            </function>
            <function name="setLocalCertificate" fullname="QSslConfiguration::setLocalCertificate" href="qsslconfiguration.html#setLocalCertificate" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setLocalCertificate(const QSslCertificate &amp;certificate)">
                <parameter type="const QSslCertificate &amp;" name="certificate" default=""/>
            </function>
            <function name="setLocalCertificateChain" fullname="QSslConfiguration::setLocalCertificateChain" href="qsslconfiguration.html#setLocalCertificateChain" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setLocalCertificateChain(const QList&lt;QSslCertificate&gt; &amp;localChain)">
                <parameter type="const QList&lt;QSslCertificate&gt; &amp;" name="localChain" default=""/>
            </function>
            <function name="setMissingCertificateIsFatal" fullname="QSslConfiguration::setMissingCertificateIsFatal" href="qsslconfiguration.html#setMissingCertificateIsFatal" status="active" access="public" location="qsslconfiguration.h" documented="true" since="6.0" meta="plain" type="void" signature="void setMissingCertificateIsFatal(bool cannotRecover)">
                <parameter type="bool" name="cannotRecover" default=""/>
            </function>
            <function name="setOcspStaplingEnabled" fullname="QSslConfiguration::setOcspStaplingEnabled" href="qsslconfiguration.html#setOcspStaplingEnabled" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setOcspStaplingEnabled(bool enabled)">
                <parameter type="bool" name="enabled" default=""/>
            </function>
            <function name="setPeerVerifyDepth" fullname="QSslConfiguration::setPeerVerifyDepth" href="qsslconfiguration.html#setPeerVerifyDepth" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyDepth(int depth)">
                <parameter type="int" name="depth" default=""/>
            </function>
            <function name="setPeerVerifyMode" fullname="QSslConfiguration::setPeerVerifyMode" href="qsslconfiguration.html#setPeerVerifyMode" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode)">
                <parameter type="QSslSocket::PeerVerifyMode" name="mode" default=""/>
            </function>
            <function name="setPreSharedKeyIdentityHint" fullname="QSslConfiguration::setPreSharedKeyIdentityHint" href="qsslconfiguration.html#setPreSharedKeyIdentityHint" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setPreSharedKeyIdentityHint(const QByteArray &amp;hint)">
                <parameter type="const QByteArray &amp;" name="hint" default=""/>
            </function>
            <function name="setPrivateKey" fullname="QSslConfiguration::setPrivateKey" href="qsslconfiguration.html#setPrivateKey" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setPrivateKey(const QSslKey &amp;key)">
                <parameter type="const QSslKey &amp;" name="key" default=""/>
            </function>
            <function name="setProtocol" fullname="QSslConfiguration::setProtocol" href="qsslconfiguration.html#setProtocol" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setProtocol(QSsl::SslProtocol protocol)">
                <parameter type="QSsl::SslProtocol" name="protocol" default=""/>
            </function>
            <function name="setSessionTicket" fullname="QSslConfiguration::setSessionTicket" href="qsslconfiguration.html#setSessionTicket" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setSessionTicket(const QByteArray &amp;sessionTicket)">
                <parameter type="const QByteArray &amp;" name="sessionTicket" default=""/>
            </function>
            <function name="setSslOption" fullname="QSslConfiguration::setSslOption" href="qsslconfiguration.html#setSslOption" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" type="void" signature="void setSslOption(QSsl::SslOption option, bool on)">
                <parameter type="QSsl::SslOption" name="option" default=""/>
                <parameter type="bool" name="on" default=""/>
            </function>
            <function name="supportedCiphers" fullname="QSslConfiguration::supportedCiphers" href="qsslconfiguration.html#supportedCiphers" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="QList&lt;QSslCipher&gt;" signature="QList&lt;QSslCipher&gt; supportedCiphers()"/>
            <function name="supportedEllipticCurves" fullname="QSslConfiguration::supportedEllipticCurves" href="qsslconfiguration.html#supportedEllipticCurves" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="QList&lt;QSslEllipticCurve&gt;" signature="QList&lt;QSslEllipticCurve&gt; supportedEllipticCurves()"/>
            <function name="swap" fullname="QSslConfiguration::swap" href="qsslconfiguration.html#swap" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslConfiguration &amp;other)">
                <parameter type="QSslConfiguration &amp;" name="other" default=""/>
            </function>
            <function name="systemCaCertificates" fullname="QSslConfiguration::systemCaCertificates" href="qsslconfiguration.html#systemCaCertificates" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" static="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; systemCaCertificates()"/>
            <function name="testSslOption" fullname="QSslConfiguration::testSslOption" href="qsslconfiguration.html#testSslOption" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="plain" const="true" type="bool" signature="bool testSslOption(QSsl::SslOption option) const">
                <parameter type="QSsl::SslOption" name="option" default=""/>
            </function>
            <function name="~QSslConfiguration" fullname="QSslConfiguration::~QSslConfiguration" href="qsslconfiguration.html#dtor.QSslConfiguration" status="active" access="public" location="qsslconfiguration.h" documented="true" meta="destructor" noexcept="true" signature="~QSslConfiguration()"/>
            <enum name="NextProtocolNegotiationStatus" fullname="QSslConfiguration::NextProtocolNegotiationStatus" href="qsslconfiguration.html#NextProtocolNegotiationStatus-enum" status="active" access="public" location="qsslconfiguration.h" documented="true">
                <value name="NextProtocolNegotiationNone" value="0"/>
                <value name="NextProtocolNegotiationNegotiated" value="1"/>
                <value name="NextProtocolNegotiationUnsupported" value="2"/>
            </enum>
            <variable name="NextProtocolHttp1_1" fullname="QSslConfiguration::NextProtocolHttp1_1" href="qsslconfiguration.html#NextProtocolHttp1_1-var" status="active" access="public" location="qsslconfiguration.h" documented="true" type="const char[]" static="true" brief="Value used for negotiating HTTP 1.1 during the Next Protocol Negotiation"/>
        </class>
        <class threadsafety="reentrant" name="QSslDiffieHellmanParameters" href="qssldiffiehellmanparameters.html" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Interface for Diffie-Hellman parameters for servers">
            <function name="QSslDiffieHellmanParameters" fullname="QSslDiffieHellmanParameters::QSslDiffieHellmanParameters" href="qssldiffiehellmanparameters.html#QSslDiffieHellmanParameters" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="constructor" signature="QSslDiffieHellmanParameters()"/>
            <function name="QSslDiffieHellmanParameters" fullname="QSslDiffieHellmanParameters::QSslDiffieHellmanParameters" href="qssldiffiehellmanparameters.html#QSslDiffieHellmanParameters-1" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QSslDiffieHellmanParameters(const QSslDiffieHellmanParameters &amp;other)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="other" default=""/>
            </function>
            <function name="QSslDiffieHellmanParameters" fullname="QSslDiffieHellmanParameters::QSslDiffieHellmanParameters" href="qssldiffiehellmanparameters.html#QSslDiffieHellmanParameters-2" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="move-constructor" noexcept="true" overload="true" overload-number="2" signature="QSslDiffieHellmanParameters(QSslDiffieHellmanParameters &amp;&amp;other)">
                <parameter type="QSslDiffieHellmanParameters &amp;&amp;" name="other" default=""/>
            </function>
            <function name="defaultParameters" fullname="QSslDiffieHellmanParameters::defaultParameters" href="qssldiffiehellmanparameters.html#defaultParameters" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" static="true" type="QSslDiffieHellmanParameters" signature="QSslDiffieHellmanParameters defaultParameters()"/>
            <function name="error" fullname="QSslDiffieHellmanParameters::error" href="qssldiffiehellmanparameters.html#error" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" const="true" noexcept="true" type="QSslDiffieHellmanParameters::Error" signature="QSslDiffieHellmanParameters::Error error() const"/>
            <function name="errorString" fullname="QSslDiffieHellmanParameters::errorString" href="qssldiffiehellmanparameters.html#errorString" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" const="true" noexcept="true" type="QString" signature="QString errorString() const"/>
            <function name="fromEncoded" fullname="QSslDiffieHellmanParameters::fromEncoded" href="qssldiffiehellmanparameters.html#fromEncoded" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" static="true" type="QSslDiffieHellmanParameters" signature="QSslDiffieHellmanParameters fromEncoded(const QByteArray &amp;encoded, QSsl::EncodingFormat encoding)">
                <parameter type="const QByteArray &amp;" name="encoded" default=""/>
                <parameter type="QSsl::EncodingFormat" name="encoding" default="QSsl::Pem"/>
            </function>
            <function name="fromEncoded" fullname="QSslDiffieHellmanParameters::fromEncoded" href="qssldiffiehellmanparameters.html#fromEncoded-1" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" static="true" overload="true" overload-number="1" type="QSslDiffieHellmanParameters" signature="QSslDiffieHellmanParameters fromEncoded(QIODevice *device, QSsl::EncodingFormat encoding)">
                <parameter type="QIODevice *" name="device" default=""/>
                <parameter type="QSsl::EncodingFormat" name="encoding" default="QSsl::Pem"/>
            </function>
            <function name="isEmpty" fullname="QSslDiffieHellmanParameters::isEmpty" href="qssldiffiehellmanparameters.html#isEmpty" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" const="true" noexcept="true" type="bool" signature="bool isEmpty() const"/>
            <function name="isValid" fullname="QSslDiffieHellmanParameters::isValid" href="qssldiffiehellmanparameters.html#isValid" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" const="true" noexcept="true" type="bool" signature="bool isValid() const"/>
            <function name="operator!=" href="qssldiffiehellmanparameters.html#operator-not-eq" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="34" meta="plain" noexcept="true" type="bool" signature="bool operator!=(const QSslDiffieHellmanParameters &amp;lhs, const QSslDiffieHellmanParameters &amp;rhs)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="lhs" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="rhs" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qssldiffiehellmanparameters.html#operator-lt-lt" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="4" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, const QSslDiffieHellmanParameters &amp;dhparam)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator=" fullname="QSslDiffieHellmanParameters::operator=" href="qssldiffiehellmanparameters.html#operator-eq" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="copy-assign" type="QSslDiffieHellmanParameters &amp;" signature="QSslDiffieHellmanParameters &amp; operator=(const QSslDiffieHellmanParameters &amp;other)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslDiffieHellmanParameters::operator=" href="qssldiffiehellmanparameters.html#operator-eq-1" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QSslDiffieHellmanParameters &amp;" signature="QSslDiffieHellmanParameters &amp; operator=(QSslDiffieHellmanParameters &amp;&amp;other)">
                <parameter type="QSslDiffieHellmanParameters &amp;&amp;" name="other" default=""/>
            </function>
            <function name="operator==" href="qssldiffiehellmanparameters.html#operator-eq-eq" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="35" meta="plain" noexcept="true" type="bool" signature="bool operator==(const QSslDiffieHellmanParameters &amp;lhs, const QSslDiffieHellmanParameters &amp;rhs)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="lhs" default=""/>
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="rhs" default=""/>
            </function>
            <function name="qHash" href="qssldiffiehellmanparameters.html#qHash" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="36" meta="plain" noexcept="true" type="size_t" signature="size_t qHash(const QSslDiffieHellmanParameters &amp;dhparam, size_t seed)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-1" status="active" access="public" location="qocspresponse.h" documented="true" related="9" meta="plain" noexcept="true" overload="true" overload-number="1" type="size_t" signature="size_t qHash(const QOcspResponse &amp;response, size_t seed)">
                <parameter type="const QOcspResponse &amp;" name="response" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-2" status="active" access="public" location="qsslcertificate.h" documented="true" related="10" meta="plain" noexcept="true" overload="true" overload-number="2" type="size_t" signature="size_t qHash(const QSslCertificate &amp;key, size_t seed)">
                <parameter type="const QSslCertificate &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-3" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="11" meta="plain" constexpr="true" noexcept="true" overload="true" overload-number="3" type="size_t" signature="size_t qHash(QSslEllipticCurve curve, size_t seed)">
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-4" status="active" access="public" location="qsslerror.h" documented="true" related="12" meta="plain" noexcept="true" overload="true" overload-number="4" type="size_t" signature="size_t qHash(const QSslError &amp;key, size_t seed)">
                <parameter type="const QSslError &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="swap" fullname="QSslDiffieHellmanParameters::swap" href="qssldiffiehellmanparameters.html#swap" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslDiffieHellmanParameters &amp;other)">
                <parameter type="QSslDiffieHellmanParameters &amp;" name="other" default=""/>
            </function>
            <function name="~QSslDiffieHellmanParameters" fullname="QSslDiffieHellmanParameters::~QSslDiffieHellmanParameters" href="qssldiffiehellmanparameters.html#dtor.QSslDiffieHellmanParameters" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" meta="destructor" noexcept="true" signature="~QSslDiffieHellmanParameters()"/>
            <enum name="Error" fullname="QSslDiffieHellmanParameters::Error" href="qssldiffiehellmanparameters.html#Error-enum" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true">
                <value name="NoError" value="0"/>
                <value name="InvalidInputDataError" value="1"/>
                <value name="UnsafeParametersError" value="2"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QSslEllipticCurve" href="qsslellipticcurve.html" status="active" access="public" location="qsslellipticcurve.h" documented="true" groups="network,ssl" module="QtNetwork" brief="Represents an elliptic curve for use by elliptic-curve cipher algorithms">
            <function name="QSslEllipticCurve" fullname="QSslEllipticCurve::QSslEllipticCurve" href="qsslellipticcurve.html#QSslEllipticCurve" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="constructor" constexpr="true" noexcept="true" signature="QSslEllipticCurve()"/>
            <function name="fromLongName" fullname="QSslEllipticCurve::fromLongName" href="qsslellipticcurve.html#fromLongName" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" static="true" type="QSslEllipticCurve" signature="QSslEllipticCurve fromLongName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="fromShortName" fullname="QSslEllipticCurve::fromShortName" href="qsslellipticcurve.html#fromShortName" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" static="true" type="QSslEllipticCurve" signature="QSslEllipticCurve fromShortName(const QString &amp;name)">
                <parameter type="const QString &amp;" name="name" default=""/>
            </function>
            <function name="isTlsNamedCurve" fullname="QSslEllipticCurve::isTlsNamedCurve" href="qsslellipticcurve.html#isTlsNamedCurve" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" const="true" noexcept="true" type="bool" signature="bool isTlsNamedCurve() const"/>
            <function name="isValid" fullname="QSslEllipticCurve::isValid" href="qsslellipticcurve.html#isValid" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" const="true" constexpr="true" noexcept="true" type="bool" signature="bool isValid() const"/>
            <function name="longName" fullname="QSslEllipticCurve::longName" href="qsslellipticcurve.html#longName" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" const="true" type="QString" signature="QString longName() const"/>
            <function name="operator!=" href="qsslellipticcurve.html#operator-not-eq" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="37" meta="plain" constexpr="true" noexcept="true" type="bool" signature="bool operator!=(QSslEllipticCurve lhs, QSslEllipticCurve rhs)">
                <parameter type="QSslEllipticCurve" name="lhs" default=""/>
                <parameter type="QSslEllipticCurve" name="rhs" default=""/>
            </function>
            <function name="operator&lt;&lt;" href="qsslellipticcurve.html#operator-lt-lt" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="5" meta="plain" type="QDebug" signature="QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)">
                <parameter type="QDebug" name="debug" default=""/>
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
            </function>
            <function name="operator==" href="qsslellipticcurve.html#operator-eq-eq" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="38" meta="plain" constexpr="true" noexcept="true" type="bool" signature="bool operator==(QSslEllipticCurve lhs, QSslEllipticCurve rhs)">
                <parameter type="QSslEllipticCurve" name="lhs" default=""/>
                <parameter type="QSslEllipticCurve" name="rhs" default=""/>
            </function>
            <function name="shortName" fullname="QSslEllipticCurve::shortName" href="qsslellipticcurve.html#shortName" status="active" access="public" location="qsslellipticcurve.h" documented="true" meta="plain" const="true" type="QString" signature="QString shortName() const"/>
        </class>
        <class threadsafety="reentrant" name="QSslError" href="qsslerror.html" status="active" access="public" location="qsslerror.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="SSL error">
            <function name="QSslError" fullname="QSslError::QSslError" href="qsslerror.html#QSslError" status="active" access="public" location="qsslerror.h" documented="true" meta="constructor" signature="QSslError()"/>
            <function name="QSslError" fullname="QSslError::QSslError" href="qsslerror.html#QSslError-1" status="active" access="public" location="qsslerror.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="1" signature="QSslError(QSslError::SslError error)">
                <parameter type="QSslError::SslError" name="error" default=""/>
            </function>
            <function name="QSslError" fullname="QSslError::QSslError" href="qsslerror.html#QSslError-2" status="active" access="public" location="qsslerror.h" documented="true" meta="constructor" overload="true" overload-number="2" signature="QSslError(QSslError::SslError error, const QSslCertificate &amp;certificate)">
                <parameter type="QSslError::SslError" name="error" default=""/>
                <parameter type="const QSslCertificate &amp;" name="certificate" default=""/>
            </function>
            <function name="QSslError" fullname="QSslError::QSslError" href="qsslerror.html#QSslError-3" status="active" access="public" location="qsslerror.h" documented="true" meta="copy-constructor" overload="true" overload-number="3" signature="QSslError(const QSslError &amp;other)">
                <parameter type="const QSslError &amp;" name="other" default=""/>
            </function>
            <function name="certificate" fullname="QSslError::certificate" href="qsslerror.html#certificate" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate certificate() const"/>
            <function name="error" fullname="QSslError::error" href="qsslerror.html#error" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" const="true" type="QSslError::SslError" signature="QSslError::SslError error() const"/>
            <function name="errorString" fullname="QSslError::errorString" href="qsslerror.html#errorString" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" const="true" type="QString" signature="QString errorString() const"/>
            <function name="operator!=" fullname="QSslError::operator!=" href="qsslerror.html#operator-not-eq" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QSslError &amp;other) const">
                <parameter type="const QSslError &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslError::operator=" href="qsslerror.html#operator-eq-1" status="active" access="public" location="qsslerror.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslError &amp;" signature="QSslError &amp; operator=(const QSslError &amp;other)">
                <parameter type="const QSslError &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QSslError::operator==" href="qsslerror.html#operator-eq-eq" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QSslError &amp;other) const">
                <parameter type="const QSslError &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QSslError::swap" href="qsslerror.html#swap" status="active" access="public" location="qsslerror.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslError &amp;other)">
                <parameter type="QSslError &amp;" name="other" default=""/>
            </function>
            <function name="~QSslError" fullname="QSslError::~QSslError" href="qsslerror.html#dtor.QSslError" status="active" access="public" location="qsslerror.h" documented="true" meta="destructor" noexcept="true" signature="~QSslError()"/>
            <enum name="SslError" fullname="QSslError::SslError" href="qsslerror.html#SslError-enum" status="active" access="public" location="qsslerror.h" documented="true">
                <value name="NoError" value="0"/>
                <value name="UnableToGetIssuerCertificate" value="1"/>
                <value name="UnableToDecryptCertificateSignature" value="2"/>
                <value name="UnableToDecodeIssuerPublicKey" value="3"/>
                <value name="CertificateSignatureFailed" value="4"/>
                <value name="CertificateNotYetValid" value="5"/>
                <value name="CertificateExpired" value="6"/>
                <value name="InvalidNotBeforeField" value="7"/>
                <value name="InvalidNotAfterField" value="8"/>
                <value name="SelfSignedCertificate" value="9"/>
                <value name="SelfSignedCertificateInChain" value="10"/>
                <value name="UnableToGetLocalIssuerCertificate" value="11"/>
                <value name="UnableToVerifyFirstCertificate" value="12"/>
                <value name="CertificateRevoked" value="13"/>
                <value name="InvalidCaCertificate" value="14"/>
                <value name="PathLengthExceeded" value="15"/>
                <value name="InvalidPurpose" value="16"/>
                <value name="CertificateUntrusted" value="17"/>
                <value name="CertificateRejected" value="18"/>
                <value name="SubjectIssuerMismatch" value="19"/>
                <value name="AuthorityIssuerSerialNumberMismatch" value="20"/>
                <value name="NoPeerCertificate" value="21"/>
                <value name="HostNameMismatch" value="22"/>
                <value name="NoSslSupport" value="23"/>
                <value name="CertificateBlacklisted" value="24"/>
                <value name="CertificateStatusUnknown" value="25"/>
                <value name="OcspNoResponseFound" value="26"/>
                <value name="OcspMalformedRequest" value="27"/>
                <value name="OcspMalformedResponse" value="28"/>
                <value name="OcspInternalError" value="29"/>
                <value name="OcspTryLater" value="30"/>
                <value name="OcspSigRequred" value="31"/>
                <value name="OcspUnauthorized" value="32"/>
                <value name="OcspResponseCannotBeTrusted" value="33"/>
                <value name="OcspResponseCertIdUnknown" value="34"/>
                <value name="OcspResponseExpired" value="35"/>
                <value name="OcspStatusUnknown" value="36"/>
                <value name="UnspecifiedError" value="-1"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QSslKey" href="qsslkey.html" status="active" access="public" location="qsslkey.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Interface for private and public keys">
            <function name="QSslKey" fullname="QSslKey::QSslKey" href="qsslkey.html#QSslKey" status="active" access="public" location="qsslkey.h" documented="true" meta="constructor" signature="QSslKey()"/>
            <function name="QSslKey" fullname="QSslKey::QSslKey" href="qsslkey.html#QSslKey-1" status="active" access="public" location="qsslkey.h" documented="true" meta="constructor" overload="true" overload-number="1" signature="QSslKey(const QByteArray &amp;encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)">
                <parameter type="const QByteArray &amp;" name="encoded" default=""/>
                <parameter type="QSsl::KeyAlgorithm" name="algorithm" default=""/>
                <parameter type="QSsl::EncodingFormat" name="encoding" default="QSsl::Pem"/>
                <parameter type="QSsl::KeyType" name="type" default="QSsl::PrivateKey"/>
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="QSslKey" fullname="QSslKey::QSslKey" href="qsslkey.html#QSslKey-2" status="active" access="public" location="qsslkey.h" documented="true" meta="constructor" overload="true" overload-number="2" signature="QSslKey(QIODevice *device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)">
                <parameter type="QIODevice *" name="device" default=""/>
                <parameter type="QSsl::KeyAlgorithm" name="algorithm" default=""/>
                <parameter type="QSsl::EncodingFormat" name="encoding" default="QSsl::Pem"/>
                <parameter type="QSsl::KeyType" name="type" default="QSsl::PrivateKey"/>
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="QSslKey" fullname="QSslKey::QSslKey" href="qsslkey.html#QSslKey-3" status="active" access="public" location="qsslkey.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="3" signature="QSslKey(Qt::HANDLE handle, QSsl::KeyType type)">
                <parameter type="Qt::HANDLE" name="handle" default=""/>
                <parameter type="QSsl::KeyType" name="type" default="QSsl::PrivateKey"/>
            </function>
            <function name="QSslKey" fullname="QSslKey::QSslKey" href="qsslkey.html#QSslKey-4" status="active" access="public" location="qsslkey.h" documented="true" meta="copy-constructor" overload="true" overload-number="4" signature="QSslKey(const QSslKey &amp;other)">
                <parameter type="const QSslKey &amp;" name="other" default=""/>
            </function>
            <function name="algorithm" fullname="QSslKey::algorithm" href="qsslkey.html#algorithm" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="QSsl::KeyAlgorithm" signature="QSsl::KeyAlgorithm algorithm() const"/>
            <function name="clear" fullname="QSslKey::clear" href="qsslkey.html#clear" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" type="void" signature="void clear()"/>
            <function name="handle" fullname="QSslKey::handle" href="qsslkey.html#handle" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="Qt::HANDLE" signature="Qt::HANDLE handle() const"/>
            <function name="isNull" fullname="QSslKey::isNull" href="qsslkey.html#isNull" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="bool" signature="bool isNull() const"/>
            <function name="length" fullname="QSslKey::length" href="qsslkey.html#length" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="int" signature="int length() const"/>
            <function name="operator!=" fullname="QSslKey::operator!=" href="qsslkey.html#operator-not-eq" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator!=(const QSslKey &amp;other) const">
                <parameter type="const QSslKey &amp;" name="other" default=""/>
            </function>
            <function name="operator=" fullname="QSslKey::operator=" href="qsslkey.html#operator-eq-1" status="active" access="public" location="qsslkey.h" documented="true" meta="copy-assign" overload="true" overload-number="1" type="QSslKey &amp;" signature="QSslKey &amp; operator=(const QSslKey &amp;other)">
                <parameter type="const QSslKey &amp;" name="other" default=""/>
            </function>
            <function name="operator==" fullname="QSslKey::operator==" href="qsslkey.html#operator-eq-eq" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="bool" signature="bool operator==(const QSslKey &amp;other) const">
                <parameter type="const QSslKey &amp;" name="other" default=""/>
            </function>
            <function name="swap" fullname="QSslKey::swap" href="qsslkey.html#swap" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslKey &amp;other)">
                <parameter type="QSslKey &amp;" name="other" default=""/>
            </function>
            <function name="toDer" fullname="QSslKey::toDer" href="qsslkey.html#toDer" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray toDer(const QByteArray &amp;passPhrase) const">
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="toPem" fullname="QSslKey::toPem" href="qsslkey.html#toPem" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray toPem(const QByteArray &amp;passPhrase) const">
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="type" fullname="QSslKey::type" href="qsslkey.html#type" status="active" access="public" location="qsslkey.h" documented="true" meta="plain" const="true" type="QSsl::KeyType" signature="QSsl::KeyType type() const"/>
            <function name="~QSslKey" fullname="QSslKey::~QSslKey" href="qsslkey.html#dtor.QSslKey" status="active" access="public" location="qsslkey.h" documented="true" meta="destructor" noexcept="true" signature="~QSslKey()"/>
        </class>
        <class threadsafety="reentrant" name="QSslPreSharedKeyAuthenticator" href="qsslpresharedkeyauthenticator.html" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" groups="network,shared,ssl" module="QtNetwork" brief="Authentication data for pre shared keys (PSK) ciphersuites">
            <function name="QSslPreSharedKeyAuthenticator" fullname="QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator" href="qsslpresharedkeyauthenticator.html#QSslPreSharedKeyAuthenticator" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="constructor" signature="QSslPreSharedKeyAuthenticator()"/>
            <function name="QSslPreSharedKeyAuthenticator" fullname="QSslPreSharedKeyAuthenticator::QSslPreSharedKeyAuthenticator" href="qsslpresharedkeyauthenticator.html#QSslPreSharedKeyAuthenticator-1" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="copy-constructor" overload="true" overload-number="1" signature="QSslPreSharedKeyAuthenticator(const QSslPreSharedKeyAuthenticator &amp;authenticator)">
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="authenticator" default=""/>
            </function>
            <function name="identity" fullname="QSslPreSharedKeyAuthenticator::identity" href="qsslpresharedkeyauthenticator.html#identity" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray identity() const"/>
            <function name="identityHint" fullname="QSslPreSharedKeyAuthenticator::identityHint" href="qsslpresharedkeyauthenticator.html#identityHint" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray identityHint() const"/>
            <function name="maximumIdentityLength" fullname="QSslPreSharedKeyAuthenticator::maximumIdentityLength" href="qsslpresharedkeyauthenticator.html#maximumIdentityLength" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" const="true" type="int" signature="int maximumIdentityLength() const"/>
            <function name="maximumPreSharedKeyLength" fullname="QSslPreSharedKeyAuthenticator::maximumPreSharedKeyLength" href="qsslpresharedkeyauthenticator.html#maximumPreSharedKeyLength" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" const="true" type="int" signature="int maximumPreSharedKeyLength() const"/>
            <function name="operator!=" href="qsslpresharedkeyauthenticator.html#operator-not-eq" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" related="39" meta="plain" type="bool" signature="bool operator!=(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)">
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="lhs" default=""/>
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="rhs" default=""/>
            </function>
            <function name="operator=" fullname="QSslPreSharedKeyAuthenticator::operator=" href="qsslpresharedkeyauthenticator.html#operator-eq" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="copy-assign" type="QSslPreSharedKeyAuthenticator &amp;" signature="QSslPreSharedKeyAuthenticator &amp; operator=(const QSslPreSharedKeyAuthenticator &amp;authenticator)">
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="authenticator" default=""/>
            </function>
            <function name="operator=" fullname="QSslPreSharedKeyAuthenticator::operator=" href="qsslpresharedkeyauthenticator.html#operator-eq-1" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="move-assign" noexcept="true" overload="true" overload-number="1" type="QSslPreSharedKeyAuthenticator &amp;" signature="QSslPreSharedKeyAuthenticator &amp; operator=(QSslPreSharedKeyAuthenticator &amp;&amp;authenticator)">
                <parameter type="QSslPreSharedKeyAuthenticator &amp;&amp;" name="authenticator" default=""/>
            </function>
            <function name="operator==" href="qsslpresharedkeyauthenticator.html#operator-eq-eq" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" related="40" meta="plain" type="bool" signature="bool operator==(const QSslPreSharedKeyAuthenticator &amp;lhs, const QSslPreSharedKeyAuthenticator &amp;rhs)">
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="lhs" default=""/>
                <parameter type="const QSslPreSharedKeyAuthenticator &amp;" name="rhs" default=""/>
            </function>
            <function name="preSharedKey" fullname="QSslPreSharedKeyAuthenticator::preSharedKey" href="qsslpresharedkeyauthenticator.html#preSharedKey" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" const="true" type="QByteArray" signature="QByteArray preSharedKey() const"/>
            <function name="setIdentity" fullname="QSslPreSharedKeyAuthenticator::setIdentity" href="qsslpresharedkeyauthenticator.html#setIdentity" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" type="void" signature="void setIdentity(const QByteArray &amp;identity)">
                <parameter type="const QByteArray &amp;" name="identity" default=""/>
            </function>
            <function name="setPreSharedKey" fullname="QSslPreSharedKeyAuthenticator::setPreSharedKey" href="qsslpresharedkeyauthenticator.html#setPreSharedKey" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" type="void" signature="void setPreSharedKey(const QByteArray &amp;preSharedKey)">
                <parameter type="const QByteArray &amp;" name="preSharedKey" default=""/>
            </function>
            <function name="swap" fullname="QSslPreSharedKeyAuthenticator::swap" href="qsslpresharedkeyauthenticator.html#swap" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="plain" noexcept="true" type="void" signature="void swap(QSslPreSharedKeyAuthenticator &amp;authenticator)">
                <parameter type="QSslPreSharedKeyAuthenticator &amp;" name="authenticator" default=""/>
            </function>
            <function name="~QSslPreSharedKeyAuthenticator" fullname="QSslPreSharedKeyAuthenticator::~QSslPreSharedKeyAuthenticator" href="qsslpresharedkeyauthenticator.html#dtor.QSslPreSharedKeyAuthenticator" status="active" access="public" location="qsslpresharedkeyauthenticator.h" documented="true" meta="destructor" noexcept="true" signature="~QSslPreSharedKeyAuthenticator()"/>
        </class>
        <class name="QSslServer" href="qsslserver.html" status="active" access="public" location="qsslserver.h" since="6.4" documented="true" groups="network,ssl" bases="QTcpServer" module="QtNetwork" brief="Implements an encrypted, secure TCP server over TLS">
            <function name="QSslServer" fullname="QSslServer::QSslServer" href="qsslserver.html#QSslServer-2" status="active" access="public" location="qsslserver.h" documented="true" meta="constructor" explicit="true" overload="true" overload-number="2" signature="QSslServer(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="alertReceived" fullname="QSslServer::alertReceived" href="qsslserver.html#alertReceived" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void alertReceived(QSslSocket *socket, QSsl::AlertLevel level, QSsl::AlertType type, const QString &amp;description)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="QSsl::AlertLevel" name="level" default=""/>
                <parameter type="QSsl::AlertType" name="type" default=""/>
                <parameter type="const QString &amp;" name="description" default=""/>
            </function>
            <function name="alertSent" fullname="QSslServer::alertSent" href="qsslserver.html#alertSent" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void alertSent(QSslSocket *socket, QSsl::AlertLevel level, QSsl::AlertType type, const QString &amp;description)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="QSsl::AlertLevel" name="level" default=""/>
                <parameter type="QSsl::AlertType" name="type" default=""/>
                <parameter type="const QString &amp;" name="description" default=""/>
            </function>
            <function name="errorOccurred" fullname="QSslServer::errorOccurred" href="qsslserver.html#errorOccurred" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void errorOccurred(QSslSocket *socket, QAbstractSocket::SocketError socketError)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="QAbstractSocket::SocketError" name="socketError" default=""/>
            </function>
            <function name="handshakeInterruptedOnError" fullname="QSslServer::handshakeInterruptedOnError" href="qsslserver.html#handshakeInterruptedOnError" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void handshakeInterruptedOnError(QSslSocket *socket, const QSslError &amp;error)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="const QSslError &amp;" name="error" default=""/>
            </function>
            <function name="handshakeTimeout" fullname="QSslServer::handshakeTimeout" href="qsslserver.html#handshakeTimeout" status="active" access="public" location="qsslserver.h" documented="true" meta="plain" const="true" type="int" signature="int handshakeTimeout() const"/>
            <function name="incomingConnection" fullname="QSslServer::incomingConnection" href="qsslserver.html#incomingConnection" status="active" access="protected" location="qsslserver.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void incomingConnection(qintptr socket) override">
                <parameter type="qintptr" name="socket" default=""/>
            </function>
            <function name="peerVerifyError" fullname="QSslServer::peerVerifyError" href="qsslserver.html#peerVerifyError" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void peerVerifyError(QSslSocket *socket, const QSslError &amp;error)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="const QSslError &amp;" name="error" default=""/>
            </function>
            <function name="preSharedKeyAuthenticationRequired" fullname="QSslServer::preSharedKeyAuthenticationRequired" href="qsslserver.html#preSharedKeyAuthenticationRequired" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void preSharedKeyAuthenticationRequired(QSslSocket *socket, QSslPreSharedKeyAuthenticator *authenticator)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="QSslPreSharedKeyAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="setHandshakeTimeout" fullname="QSslServer::setHandshakeTimeout" href="qsslserver.html#setHandshakeTimeout" status="active" access="public" location="qsslserver.h" documented="true" meta="plain" type="void" signature="void setHandshakeTimeout(int timeout)">
                <parameter type="int" name="timeout" default=""/>
            </function>
            <function name="setSslConfiguration" fullname="QSslServer::setSslConfiguration" href="qsslserver.html#setSslConfiguration" status="active" access="public" location="qsslserver.h" documented="true" meta="plain" type="void" signature="void setSslConfiguration(const QSslConfiguration &amp;sslConfiguration)">
                <parameter type="const QSslConfiguration &amp;" name="sslConfiguration" default=""/>
            </function>
            <function name="sslConfiguration" fullname="QSslServer::sslConfiguration" href="qsslserver.html#sslConfiguration" status="active" access="public" location="qsslserver.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration sslConfiguration() const"/>
            <function name="sslErrors" fullname="QSslServer::sslErrors" href="qsslserver.html#sslErrors" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void sslErrors(QSslSocket *socket, const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="QSslSocket *" name="socket" default=""/>
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="startedEncryptionHandshake" fullname="QSslServer::startedEncryptionHandshake" href="qsslserver.html#startedEncryptionHandshake" status="active" access="public" location="qsslserver.h" documented="true" meta="signal" type="void" signature="void startedEncryptionHandshake(QSslSocket *socket)">
                <parameter type="QSslSocket *" name="socket" default=""/>
            </function>
            <function name="~QSslServer" fullname="QSslServer::~QSslServer" href="qsslserver.html#dtor.QSslServer" status="active" access="public" location="qsslserver.h" documented="true" meta="destructor" virtual="virtual" override="true" noexcept="true" signature="~QSslServer() override"/>
        </class>
        <class threadsafety="reentrant" name="QSslSocket" href="qsslsocket.html" status="active" access="public" location="qsslsocket.h" documented="true" groups="network,ssl" bases="QTcpSocket" module="QtNetwork" brief="SSL encrypted socket for both clients and servers">
            <function name="QSslSocket" fullname="QSslSocket::QSslSocket" href="qsslsocket.html#QSslSocket" status="active" access="public" location="qsslsocket.h" documented="true" meta="constructor" explicit="true" signature="QSslSocket(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="activeBackend" fullname="QSslSocket::activeBackend" href="qsslsocket.html#activeBackend" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="QString" signature="QString activeBackend()"/>
            <function name="alertReceived" fullname="QSslSocket::alertReceived" href="qsslsocket.html#alertReceived" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void alertReceived(QSsl::AlertLevel level, QSsl::AlertType type, const QString &amp;description)">
                <parameter type="QSsl::AlertLevel" name="level" default=""/>
                <parameter type="QSsl::AlertType" name="type" default=""/>
                <parameter type="const QString &amp;" name="description" default=""/>
            </function>
            <function name="alertSent" fullname="QSslSocket::alertSent" href="qsslsocket.html#alertSent" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void alertSent(QSsl::AlertLevel level, QSsl::AlertType type, const QString &amp;description)">
                <parameter type="QSsl::AlertLevel" name="level" default=""/>
                <parameter type="QSsl::AlertType" name="type" default=""/>
                <parameter type="const QString &amp;" name="description" default=""/>
            </function>
            <function name="atEnd" fullname="QSslSocket::atEnd" href="qsslsocket.html#atEnd" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="bool" signature="bool atEnd() const override"/>
            <function name="availableBackends" fullname="QSslSocket::availableBackends" href="qsslsocket.html#availableBackends" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="QList&lt;QString&gt;" signature="QList&lt;QString&gt; availableBackends()"/>
            <function name="bytesAvailable" fullname="QSslSocket::bytesAvailable" href="qsslsocket.html#bytesAvailable" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesAvailable() const override"/>
            <function name="bytesToWrite" fullname="QSslSocket::bytesToWrite" href="qsslsocket.html#bytesToWrite" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="qint64" signature="qint64 bytesToWrite() const override"/>
            <function name="canReadLine" fullname="QSslSocket::canReadLine" href="qsslsocket.html#canReadLine" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" const="true" override="true" type="bool" signature="bool canReadLine() const override"/>
            <function name="close" fullname="QSslSocket::close" href="qsslsocket.html#close" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void close() override"/>
            <function name="connectToHostEncrypted" fullname="QSslSocket::connectToHostEncrypted" href="qsslsocket.html#connectToHostEncrypted" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void connectToHostEncrypted(const QString &amp;hostName, quint16 port, QIODeviceBase::OpenMode mode, QAbstractSocket::NetworkLayerProtocol protocol)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="QIODeviceBase::OpenMode" name="mode" default="ReadWrite"/>
                <parameter type="QAbstractSocket::NetworkLayerProtocol" name="protocol" default="AnyIPProtocol"/>
            </function>
            <function name="connectToHostEncrypted" fullname="QSslSocket::connectToHostEncrypted" href="qsslsocket.html#connectToHostEncrypted-1" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void connectToHostEncrypted(const QString &amp;hostName, quint16 port, const QString &amp;sslPeerName, QIODeviceBase::OpenMode mode, QAbstractSocket::NetworkLayerProtocol protocol)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
                <parameter type="quint16" name="port" default=""/>
                <parameter type="const QString &amp;" name="sslPeerName" default=""/>
                <parameter type="QIODeviceBase::OpenMode" name="mode" default="ReadWrite"/>
                <parameter type="QAbstractSocket::NetworkLayerProtocol" name="protocol" default="AnyIPProtocol"/>
            </function>
            <function name="continueInterruptedHandshake" fullname="QSslSocket::continueInterruptedHandshake" href="qsslsocket.html#continueInterruptedHandshake" status="active" access="public" location="qsslsocket.h" documented="true" since="6.0" meta="plain" type="void" signature="void continueInterruptedHandshake()"/>
            <function name="encrypted" fullname="QSslSocket::encrypted" href="qsslsocket.html#encrypted" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void encrypted()"/>
            <function name="encryptedBytesAvailable" fullname="QSslSocket::encryptedBytesAvailable" href="qsslsocket.html#encryptedBytesAvailable" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 encryptedBytesAvailable() const"/>
            <function name="encryptedBytesToWrite" fullname="QSslSocket::encryptedBytesToWrite" href="qsslsocket.html#encryptedBytesToWrite" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 encryptedBytesToWrite() const"/>
            <function name="encryptedBytesWritten" fullname="QSslSocket::encryptedBytesWritten" href="qsslsocket.html#encryptedBytesWritten" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void encryptedBytesWritten(qint64 written)">
                <parameter type="qint64" name="written" default=""/>
            </function>
            <function name="handshakeInterruptedOnError" fullname="QSslSocket::handshakeInterruptedOnError" href="qsslsocket.html#handshakeInterruptedOnError" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void handshakeInterruptedOnError(const QSslError &amp;error)">
                <parameter type="const QSslError &amp;" name="error" default=""/>
            </function>
            <function name="ignoreSslErrors" fullname="QSslSocket::ignoreSslErrors" href="qsslsocket.html#ignoreSslErrors" status="active" access="public" location="qsslsocket.h" documented="true" meta="slot" type="void" signature="void ignoreSslErrors()"/>
            <function name="ignoreSslErrors" fullname="QSslSocket::ignoreSslErrors" href="qsslsocket.html#ignoreSslErrors-1" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void ignoreSslErrors(const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="implementedClasses" fullname="QSslSocket::implementedClasses" href="qsslsocket.html#implementedClasses" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="QList&lt;QSsl::ImplementedClass&gt;" signature="QList&lt;QSsl::ImplementedClass&gt; implementedClasses(const QString &amp;backendName)">
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="isClassImplemented" fullname="QSslSocket::isClassImplemented" href="qsslsocket.html#isClassImplemented" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="bool" signature="bool isClassImplemented(QSsl::ImplementedClass cl, const QString &amp;backendName)">
                <parameter type="QSsl::ImplementedClass" name="cl" default=""/>
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="isEncrypted" fullname="QSslSocket::isEncrypted" href="qsslsocket.html#isEncrypted" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="bool" signature="bool isEncrypted() const"/>
            <function name="isFeatureSupported" fullname="QSslSocket::isFeatureSupported" href="qsslsocket.html#isFeatureSupported" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="bool" signature="bool isFeatureSupported(QSsl::SupportedFeature ft, const QString &amp;backendName)">
                <parameter type="QSsl::SupportedFeature" name="ft" default=""/>
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="isProtocolSupported" fullname="QSslSocket::isProtocolSupported" href="qsslsocket.html#isProtocolSupported" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="bool" signature="bool isProtocolSupported(QSsl::SslProtocol protocol, const QString &amp;backendName)">
                <parameter type="QSsl::SslProtocol" name="protocol" default=""/>
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="localCertificate" fullname="QSslSocket::localCertificate" href="qsslsocket.html#localCertificate" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate localCertificate() const"/>
            <function name="localCertificateChain" fullname="QSslSocket::localCertificateChain" href="qsslsocket.html#localCertificateChain" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; localCertificateChain() const"/>
            <function name="mode" fullname="QSslSocket::mode" href="qsslsocket.html#mode" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslSocket::SslMode" signature="QSslSocket::SslMode mode() const"/>
            <function name="modeChanged" fullname="QSslSocket::modeChanged" href="qsslsocket.html#modeChanged" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void modeChanged(QSslSocket::SslMode mode)">
                <parameter type="QSslSocket::SslMode" name="mode" default=""/>
            </function>
            <function name="newSessionTicketReceived" fullname="QSslSocket::newSessionTicketReceived" href="qsslsocket.html#newSessionTicketReceived" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void newSessionTicketReceived()"/>
            <function name="ocspResponses" fullname="QSslSocket::ocspResponses" href="qsslsocket.html#ocspResponses" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QList&lt;QOcspResponse&gt;" signature="QList&lt;QOcspResponse&gt; ocspResponses() const"/>
            <function name="peerCertificate" fullname="QSslSocket::peerCertificate" href="qsslsocket.html#peerCertificate" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslCertificate" signature="QSslCertificate peerCertificate() const"/>
            <function name="peerCertificateChain" fullname="QSslSocket::peerCertificateChain" href="qsslsocket.html#peerCertificateChain" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QList&lt;QSslCertificate&gt;" signature="QList&lt;QSslCertificate&gt; peerCertificateChain() const"/>
            <function name="peerVerifyDepth" fullname="QSslSocket::peerVerifyDepth" href="qsslsocket.html#peerVerifyDepth" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="int" signature="int peerVerifyDepth() const"/>
            <function name="peerVerifyError" fullname="QSslSocket::peerVerifyError" href="qsslsocket.html#peerVerifyError" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void peerVerifyError(const QSslError &amp;error)">
                <parameter type="const QSslError &amp;" name="error" default=""/>
            </function>
            <function name="peerVerifyMode" fullname="QSslSocket::peerVerifyMode" href="qsslsocket.html#peerVerifyMode" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslSocket::PeerVerifyMode" signature="QSslSocket::PeerVerifyMode peerVerifyMode() const"/>
            <function name="peerVerifyName" fullname="QSslSocket::peerVerifyName" href="qsslsocket.html#peerVerifyName" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QString" signature="QString peerVerifyName() const"/>
            <function name="preSharedKeyAuthenticationRequired" fullname="QSslSocket::preSharedKeyAuthenticationRequired" href="qsslsocket.html#preSharedKeyAuthenticationRequired" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void preSharedKeyAuthenticationRequired(QSslPreSharedKeyAuthenticator *authenticator)">
                <parameter type="QSslPreSharedKeyAuthenticator *" name="authenticator" default=""/>
            </function>
            <function name="privateKey" fullname="QSslSocket::privateKey" href="qsslsocket.html#privateKey" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslKey" signature="QSslKey privateKey() const"/>
            <function name="protocol" fullname="QSslSocket::protocol" href="qsslsocket.html#protocol" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol protocol() const"/>
            <function name="readData" fullname="QSslSocket::readData" href="qsslsocket.html#readData" status="active" access="protected" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 readData(char *data, qint64 maxlen) override">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxlen" default=""/>
            </function>
            <function name="resume" fullname="QSslSocket::resume" href="qsslsocket.html#resume" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void resume() override"/>
            <function name="sessionCipher" fullname="QSslSocket::sessionCipher" href="qsslsocket.html#sessionCipher" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslCipher" signature="QSslCipher sessionCipher() const"/>
            <function name="sessionProtocol" fullname="QSslSocket::sessionProtocol" href="qsslsocket.html#sessionProtocol" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSsl::SslProtocol" signature="QSsl::SslProtocol sessionProtocol() const"/>
            <function name="setActiveBackend" fullname="QSslSocket::setActiveBackend" href="qsslsocket.html#setActiveBackend" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="bool" signature="bool setActiveBackend(const QString &amp;backendName)">
                <parameter type="const QString &amp;" name="backendName" default=""/>
            </function>
            <function name="setLocalCertificate" fullname="QSslSocket::setLocalCertificate" href="qsslsocket.html#setLocalCertificate" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setLocalCertificate(const QSslCertificate &amp;certificate)">
                <parameter type="const QSslCertificate &amp;" name="certificate" default=""/>
            </function>
            <function name="setLocalCertificate" fullname="QSslSocket::setLocalCertificate" href="qsslsocket.html#setLocalCertificate-1" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void setLocalCertificate(const QString &amp;path, QSsl::EncodingFormat format)">
                <parameter type="const QString &amp;" name="path" default=""/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
            </function>
            <function name="setLocalCertificateChain" fullname="QSslSocket::setLocalCertificateChain" href="qsslsocket.html#setLocalCertificateChain" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setLocalCertificateChain(const QList&lt;QSslCertificate&gt; &amp;localChain)">
                <parameter type="const QList&lt;QSslCertificate&gt; &amp;" name="localChain" default=""/>
            </function>
            <function name="setPeerVerifyDepth" fullname="QSslSocket::setPeerVerifyDepth" href="qsslsocket.html#setPeerVerifyDepth" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyDepth(int depth)">
                <parameter type="int" name="depth" default=""/>
            </function>
            <function name="setPeerVerifyMode" fullname="QSslSocket::setPeerVerifyMode" href="qsslsocket.html#setPeerVerifyMode" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode)">
                <parameter type="QSslSocket::PeerVerifyMode" name="mode" default=""/>
            </function>
            <function name="setPeerVerifyName" fullname="QSslSocket::setPeerVerifyName" href="qsslsocket.html#setPeerVerifyName" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setPeerVerifyName(const QString &amp;hostName)">
                <parameter type="const QString &amp;" name="hostName" default=""/>
            </function>
            <function name="setPrivateKey" fullname="QSslSocket::setPrivateKey" href="qsslsocket.html#setPrivateKey" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setPrivateKey(const QSslKey &amp;key)">
                <parameter type="const QSslKey &amp;" name="key" default=""/>
            </function>
            <function name="setPrivateKey" fullname="QSslSocket::setPrivateKey" href="qsslsocket.html#setPrivateKey-1" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="void" signature="void setPrivateKey(const QString &amp;fileName, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat format, const QByteArray &amp;passPhrase)">
                <parameter type="const QString &amp;" name="fileName" default=""/>
                <parameter type="QSsl::KeyAlgorithm" name="algorithm" default="QSsl::Rsa"/>
                <parameter type="QSsl::EncodingFormat" name="format" default="QSsl::Pem"/>
                <parameter type="const QByteArray &amp;" name="passPhrase" default="QByteArray()"/>
            </function>
            <function name="setProtocol" fullname="QSslSocket::setProtocol" href="qsslsocket.html#setProtocol" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setProtocol(QSsl::SslProtocol protocol)">
                <parameter type="QSsl::SslProtocol" name="protocol" default=""/>
            </function>
            <function name="setReadBufferSize" fullname="QSslSocket::setReadBufferSize" href="qsslsocket.html#setReadBufferSize" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void setReadBufferSize(qint64 size) override">
                <parameter type="qint64" name="size" default=""/>
            </function>
            <function name="setSocketDescriptor" fullname="QSslSocket::setSocketDescriptor" href="qsslsocket.html#setSocketDescriptor" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState state, QIODeviceBase::OpenMode openMode) override">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
                <parameter type="QAbstractSocket::SocketState" name="state" default="ConnectedState"/>
                <parameter type="QIODeviceBase::OpenMode" name="openMode" default="ReadWrite"/>
            </function>
            <function name="setSocketOption" fullname="QSslSocket::setSocketOption" href="qsslsocket.html#setSocketOption" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="void" signature="void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &amp;value) override">
                <parameter type="QAbstractSocket::SocketOption" name="option" default=""/>
                <parameter type="const QVariant &amp;" name="value" default=""/>
            </function>
            <function name="setSslConfiguration" fullname="QSslSocket::setSslConfiguration" href="qsslsocket.html#setSslConfiguration" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="void" signature="void setSslConfiguration(const QSslConfiguration &amp;configuration)">
                <parameter type="const QSslConfiguration &amp;" name="configuration" default=""/>
            </function>
            <function name="skipData" fullname="QSslSocket::skipData" href="qsslsocket.html#skipData" status="active" access="protected" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 skipData(qint64 maxSize) override">
                <parameter type="qint64" name="maxSize" default=""/>
            </function>
            <function name="socketOption" fullname="QSslSocket::socketOption" href="qsslsocket.html#socketOption" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="QVariant" signature="QVariant socketOption(QAbstractSocket::SocketOption option) override">
                <parameter type="QAbstractSocket::SocketOption" name="option" default=""/>
            </function>
            <function name="sslConfiguration" fullname="QSslSocket::sslConfiguration" href="qsslsocket.html#sslConfiguration" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QSslConfiguration" signature="QSslConfiguration sslConfiguration() const"/>
            <function name="sslErrors" fullname="QSslSocket::sslErrors" href="qsslsocket.html#sslErrors" status="active" access="public" location="qsslsocket.h" documented="true" meta="signal" type="void" signature="void sslErrors(const QList&lt;QSslError&gt; &amp;errors)">
                <parameter type="const QList&lt;QSslError&gt; &amp;" name="errors" default=""/>
            </function>
            <function name="sslHandshakeErrors" fullname="QSslSocket::sslHandshakeErrors" href="qsslsocket.html#sslHandshakeErrors" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" const="true" type="QList&lt;QSslError&gt;" signature="QList&lt;QSslError&gt; sslHandshakeErrors() const"/>
            <function name="sslLibraryBuildVersionNumber" fullname="QSslSocket::sslLibraryBuildVersionNumber" href="qsslsocket.html#sslLibraryBuildVersionNumber" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" static="true" type="long" signature="long sslLibraryBuildVersionNumber()"/>
            <function name="sslLibraryBuildVersionString" fullname="QSslSocket::sslLibraryBuildVersionString" href="qsslsocket.html#sslLibraryBuildVersionString" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" static="true" type="QString" signature="QString sslLibraryBuildVersionString()"/>
            <function name="sslLibraryVersionNumber" fullname="QSslSocket::sslLibraryVersionNumber" href="qsslsocket.html#sslLibraryVersionNumber" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" static="true" type="long" signature="long sslLibraryVersionNumber()"/>
            <function name="sslLibraryVersionString" fullname="QSslSocket::sslLibraryVersionString" href="qsslsocket.html#sslLibraryVersionString" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" static="true" type="QString" signature="QString sslLibraryVersionString()"/>
            <function name="startClientEncryption" fullname="QSslSocket::startClientEncryption" href="qsslsocket.html#startClientEncryption" status="active" access="public" location="qsslsocket.h" documented="true" meta="slot" type="void" signature="void startClientEncryption()"/>
            <function name="startServerEncryption" fullname="QSslSocket::startServerEncryption" href="qsslsocket.html#startServerEncryption" status="active" access="public" location="qsslsocket.h" documented="true" meta="slot" type="void" signature="void startServerEncryption()"/>
            <function name="supportedFeatures" fullname="QSslSocket::supportedFeatures" href="qsslsocket.html#supportedFeatures" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="QList&lt;QSsl::SupportedFeature&gt;" signature="QList&lt;QSsl::SupportedFeature&gt; supportedFeatures(const QString &amp;backendName)">
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="supportedProtocols" fullname="QSslSocket::supportedProtocols" href="qsslsocket.html#supportedProtocols" status="active" access="public" location="qsslsocket.h" documented="true" since="6.1" meta="plain" static="true" type="QList&lt;QSsl::SslProtocol&gt;" signature="QList&lt;QSsl::SslProtocol&gt; supportedProtocols(const QString &amp;backendName)">
                <parameter type="const QString &amp;" name="backendName" default="{}"/>
            </function>
            <function name="supportsSsl" fullname="QSslSocket::supportsSsl" href="qsslsocket.html#supportsSsl" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" static="true" type="bool" signature="bool supportsSsl()"/>
            <function name="waitForBytesWritten" fullname="QSslSocket::waitForBytesWritten" href="qsslsocket.html#waitForBytesWritten" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForBytesWritten(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForConnected" fullname="QSslSocket::waitForConnected" href="qsslsocket.html#waitForConnected" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForConnected(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForDisconnected" fullname="QSslSocket::waitForDisconnected" href="qsslsocket.html#waitForDisconnected" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForDisconnected(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForEncrypted" fullname="QSslSocket::waitForEncrypted" href="qsslsocket.html#waitForEncrypted" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" type="bool" signature="bool waitForEncrypted(int msecs)">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="waitForReadyRead" fullname="QSslSocket::waitForReadyRead" href="qsslsocket.html#waitForReadyRead" status="active" access="public" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="bool" signature="bool waitForReadyRead(int msecs) override">
                <parameter type="int" name="msecs" default="30000"/>
            </function>
            <function name="writeData" fullname="QSslSocket::writeData" href="qsslsocket.html#writeData" status="active" access="protected" location="qsslsocket.h" documented="true" meta="plain" virtual="virtual" override="true" type="qint64" signature="qint64 writeData(const char *data, qint64 len) override">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="qint64" name="len" default=""/>
            </function>
            <function name="~QSslSocket" fullname="QSslSocket::~QSslSocket" href="qsslsocket.html#dtor.QSslSocket" status="active" access="public" location="qsslsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QSslSocket()"/>
            <enum name="AlertLevel" href="qsslsocket.html#AlertLevel-enum" status="active" access="public" location="qssl.h" related="30" since="6.0" documented="true" groups="network,ssl" scoped="true">
                <value name="Warning" value="0"/>
                <value name="Fatal" value="1"/>
                <value name="Unknown" value="2"/>
            </enum>
            <enum name="AlertType" href="qsslsocket.html#AlertType-enum" status="active" access="public" location="qssl.h" related="31" since="6.0" documented="true" groups="network,ssl" scoped="true">
                <value name="CloseNotify" value="0"/>
                <value name="UnexpectedMessage" value="10"/>
                <value name="BadRecordMac" value="20"/>
                <value name="RecordOverflow" value="22"/>
                <value name="DecompressionFailure" value="30"/>
                <value name="HandshakeFailure" value="40"/>
                <value name="NoCertificate" value="41"/>
                <value name="BadCertificate" value="42"/>
                <value name="UnsupportedCertificate" value="43"/>
                <value name="CertificateRevoked" value="44"/>
                <value name="CertificateExpired" value="45"/>
                <value name="CertificateUnknown" value="46"/>
                <value name="IllegalParameter" value="47"/>
                <value name="UnknownCa" value="48"/>
                <value name="AccessDenied" value="49"/>
                <value name="DecodeError" value="50"/>
                <value name="DecryptError" value="51"/>
                <value name="ExportRestriction" value="60"/>
                <value name="ProtocolVersion" value="70"/>
                <value name="InsufficientSecurity" value="71"/>
                <value name="InternalError" value="80"/>
                <value name="InappropriateFallback" value="86"/>
                <value name="UserCancelled" value="90"/>
                <value name="NoRenegotiation" value="100"/>
                <value name="MissingExtension" value="109"/>
                <value name="UnsupportedExtension" value="110"/>
                <value name="CertificateUnobtainable" value="111"/>
                <value name="UnrecognizedName" value="112"/>
                <value name="BadCertificateStatusResponse" value="113"/>
                <value name="BadCertificateHashValue" value="114"/>
                <value name="UnknownPskIdentity" value="115"/>
                <value name="CertificateRequired" value="116"/>
                <value name="NoApplicationProtocol" value="120"/>
                <value name="UnknownAlertMessage" value="255"/>
            </enum>
            <enum name="ImplementedClass" href="qsslsocket.html#ImplementedClass-enum" status="active" access="public" location="qssl.h" related="32" since="6.1" documented="true" groups="network,ssl" scoped="true">
                <value name="Key" value="0"/>
                <value name="Certificate" value="1"/>
                <value name="Socket" value="2"/>
                <value name="DiffieHellman" value="3"/>
                <value name="EllipticCurve" value="4"/>
                <value name="Dtls" value="5"/>
                <value name="DtlsCookie" value="6"/>
            </enum>
            <enum name="PeerVerifyMode" fullname="QSslSocket::PeerVerifyMode" href="qsslsocket.html#PeerVerifyMode-enum" status="active" access="public" location="qsslsocket.h" documented="true">
                <value name="VerifyNone" value="0"/>
                <value name="QueryPeer" value="1"/>
                <value name="VerifyPeer" value="2"/>
                <value name="AutoVerifyPeer" value="3"/>
            </enum>
            <enum name="SslMode" fullname="QSslSocket::SslMode" href="qsslsocket.html#SslMode-enum" status="active" access="public" location="qsslsocket.h" documented="true">
                <value name="UnencryptedMode" value="0"/>
                <value name="SslClientMode" value="1"/>
                <value name="SslServerMode" value="2"/>
            </enum>
            <enum name="SupportedFeature" href="qsslsocket.html#SupportedFeature-enum" status="active" access="public" location="qssl.h" related="33" since="6.1" documented="true" groups="network,ssl" scoped="true">
                <value name="CertificateVerification" value="0"/>
                <value name="ClientSideAlpn" value="1"/>
                <value name="ServerSideAlpn" value="2"/>
                <value name="Ocsp" value="3"/>
                <value name="Psk" value="4"/>
                <value name="SessionTicket" value="5"/>
                <value name="Alerts" value="6"/>
            </enum>
        </class>
        <class threadsafety="reentrant" name="QTcpServer" href="qtcpserver.html" status="active" access="public" location="qtcpserver.h" documented="true" groups="network" bases="QObject" module="QtNetwork" brief="TCP-based server">
            <function name="QTcpServer" fullname="QTcpServer::QTcpServer" href="qtcpserver.html#QTcpServer" status="active" access="public" location="qtcpserver.h" documented="true" meta="constructor" explicit="true" signature="QTcpServer(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="acceptError" fullname="QTcpServer::acceptError" href="qtcpserver.html#acceptError" status="active" access="public" location="qtcpserver.h" documented="true" meta="signal" type="void" signature="void acceptError(QAbstractSocket::SocketError socketError)">
                <parameter type="QAbstractSocket::SocketError" name="socketError" default=""/>
            </function>
            <function name="addPendingConnection" fullname="QTcpServer::addPendingConnection" href="qtcpserver.html#addPendingConnection" status="active" access="protected" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void addPendingConnection(QTcpSocket *socket)">
                <parameter type="QTcpSocket *" name="socket" default=""/>
            </function>
            <function name="close" fullname="QTcpServer::close" href="qtcpserver.html#close" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void close()"/>
            <function name="errorString" fullname="QTcpServer::errorString" href="qtcpserver.html#errorString" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="QString" signature="QString errorString() const"/>
            <function name="hasPendingConnections" fullname="QTcpServer::hasPendingConnections" href="qtcpserver.html#hasPendingConnections" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" virtual="virtual" const="true" type="bool" signature="bool hasPendingConnections() const"/>
            <function name="incomingConnection" fullname="QTcpServer::incomingConnection" href="qtcpserver.html#incomingConnection" status="active" access="protected" location="qtcpserver.h" documented="true" meta="plain" virtual="virtual" type="void" signature="void incomingConnection(qintptr socketDescriptor)">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
            </function>
            <function name="isListening" fullname="QTcpServer::isListening" href="qtcpserver.html#isListening" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="bool" signature="bool isListening() const"/>
            <function name="listen" fullname="QTcpServer::listen" href="qtcpserver.html#listen" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="bool" signature="bool listen(const QHostAddress &amp;address, quint16 port)">
                <parameter type="const QHostAddress &amp;" name="address" default="QHostAddress::Any"/>
                <parameter type="quint16" name="port" default="0"/>
            </function>
            <function name="listenBacklogSize" fullname="QTcpServer::listenBacklogSize" href="qtcpserver.html#listenBacklogSize" status="active" access="public" location="qtcpserver.h" documented="true" since="6.3" meta="plain" const="true" type="int" signature="int listenBacklogSize() const"/>
            <function name="maxPendingConnections" fullname="QTcpServer::maxPendingConnections" href="qtcpserver.html#maxPendingConnections" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="int" signature="int maxPendingConnections() const"/>
            <function name="newConnection" fullname="QTcpServer::newConnection" href="qtcpserver.html#newConnection" status="active" access="public" location="qtcpserver.h" documented="true" meta="signal" type="void" signature="void newConnection()"/>
            <function name="nextPendingConnection" fullname="QTcpServer::nextPendingConnection" href="qtcpserver.html#nextPendingConnection" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" virtual="virtual" type="QTcpSocket *" signature="QTcpSocket * nextPendingConnection()"/>
            <function name="pauseAccepting" fullname="QTcpServer::pauseAccepting" href="qtcpserver.html#pauseAccepting" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void pauseAccepting()"/>
            <function name="pendingConnectionAvailable" fullname="QTcpServer::pendingConnectionAvailable" href="qtcpserver.html#pendingConnectionAvailable" status="active" access="public" location="qtcpserver.h" documented="true" since="6.4" meta="signal" type="void" signature="void pendingConnectionAvailable()"/>
            <function name="proxy" fullname="QTcpServer::proxy" href="qtcpserver.html#proxy" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="QNetworkProxy" signature="QNetworkProxy proxy() const"/>
            <function name="resumeAccepting" fullname="QTcpServer::resumeAccepting" href="qtcpserver.html#resumeAccepting" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void resumeAccepting()"/>
            <function name="serverAddress" fullname="QTcpServer::serverAddress" href="qtcpserver.html#serverAddress" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="QHostAddress" signature="QHostAddress serverAddress() const"/>
            <function name="serverError" fullname="QTcpServer::serverError" href="qtcpserver.html#serverError" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="QAbstractSocket::SocketError" signature="QAbstractSocket::SocketError serverError() const"/>
            <function name="serverPort" fullname="QTcpServer::serverPort" href="qtcpserver.html#serverPort" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="quint16" signature="quint16 serverPort() const"/>
            <function name="setListenBacklogSize" fullname="QTcpServer::setListenBacklogSize" href="qtcpserver.html#setListenBacklogSize" status="active" access="public" location="qtcpserver.h" documented="true" since="6.3" meta="plain" type="void" signature="void setListenBacklogSize(int size)">
                <parameter type="int" name="size" default=""/>
            </function>
            <function name="setMaxPendingConnections" fullname="QTcpServer::setMaxPendingConnections" href="qtcpserver.html#setMaxPendingConnections" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void setMaxPendingConnections(int numConnections)">
                <parameter type="int" name="numConnections" default=""/>
            </function>
            <function name="setProxy" fullname="QTcpServer::setProxy" href="qtcpserver.html#setProxy" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="void" signature="void setProxy(const QNetworkProxy &amp;networkProxy)">
                <parameter type="const QNetworkProxy &amp;" name="networkProxy" default=""/>
            </function>
            <function name="setSocketDescriptor" fullname="QTcpServer::setSocketDescriptor" href="qtcpserver.html#setSocketDescriptor" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="bool" signature="bool setSocketDescriptor(qintptr socketDescriptor)">
                <parameter type="qintptr" name="socketDescriptor" default=""/>
            </function>
            <function name="socketDescriptor" fullname="QTcpServer::socketDescriptor" href="qtcpserver.html#socketDescriptor" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" const="true" type="qintptr" signature="qintptr socketDescriptor() const"/>
            <function name="waitForNewConnection" fullname="QTcpServer::waitForNewConnection" href="qtcpserver.html#waitForNewConnection" status="active" access="public" location="qtcpserver.h" documented="true" meta="plain" type="bool" signature="bool waitForNewConnection(int msec, bool *timedOut)">
                <parameter type="int" name="msec" default="0"/>
                <parameter type="bool *" name="timedOut" default="nullptr"/>
            </function>
            <function name="~QTcpServer" fullname="QTcpServer::~QTcpServer" href="qtcpserver.html#dtor.QTcpServer" status="active" access="public" location="qtcpserver.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QTcpServer()"/>
        </class>
        <class threadsafety="reentrant" name="QTcpSocket" href="qtcpsocket.html" status="active" access="public" location="qtcpsocket.h" documented="true" groups="network" bases="QAbstractSocket" module="QtNetwork" brief="TCP socket">
            <function name="QTcpSocket" fullname="QTcpSocket::QTcpSocket" href="qtcpsocket.html#QTcpSocket" status="active" access="public" location="qtcpsocket.h" documented="true" meta="constructor" explicit="true" signature="QTcpSocket(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="~QTcpSocket" fullname="QTcpSocket::~QTcpSocket" href="qtcpsocket.html#dtor.QTcpSocket" status="active" access="public" location="qtcpsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QTcpSocket()"/>
        </class>
        <class name="QTypeInfo" href="qtypeinfo.html" status="ignored" access="public" location="qnetworkrequest.h"/>
        <class threadsafety="reentrant" name="QUdpSocket" href="qudpsocket.html" status="active" access="public" location="qudpsocket.h" documented="true" groups="network" bases="QAbstractSocket" module="QtNetwork" brief="UDP socket">
            <function name="QUdpSocket" fullname="QUdpSocket::QUdpSocket" href="qudpsocket.html#QUdpSocket" status="active" access="public" location="qudpsocket.h" documented="true" meta="constructor" explicit="true" signature="QUdpSocket(QObject *parent)">
                <parameter type="QObject *" name="parent" default="nullptr"/>
            </function>
            <function name="hasPendingDatagrams" fullname="QUdpSocket::hasPendingDatagrams" href="qudpsocket.html#hasPendingDatagrams" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" const="true" type="bool" signature="bool hasPendingDatagrams() const"/>
            <function name="joinMulticastGroup" fullname="QUdpSocket::joinMulticastGroup" href="qudpsocket.html#joinMulticastGroup" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="bool" signature="bool joinMulticastGroup(const QHostAddress &amp;groupAddress)">
                <parameter type="const QHostAddress &amp;" name="groupAddress" default=""/>
            </function>
            <function name="joinMulticastGroup" fullname="QUdpSocket::joinMulticastGroup" href="qudpsocket.html#joinMulticastGroup-1" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool joinMulticastGroup(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)">
                <parameter type="const QHostAddress &amp;" name="groupAddress" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="iface" default=""/>
            </function>
            <function name="leaveMulticastGroup" fullname="QUdpSocket::leaveMulticastGroup" href="qudpsocket.html#leaveMulticastGroup" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="bool" signature="bool leaveMulticastGroup(const QHostAddress &amp;groupAddress)">
                <parameter type="const QHostAddress &amp;" name="groupAddress" default=""/>
            </function>
            <function name="leaveMulticastGroup" fullname="QUdpSocket::leaveMulticastGroup" href="qudpsocket.html#leaveMulticastGroup-1" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="bool" signature="bool leaveMulticastGroup(const QHostAddress &amp;groupAddress, const QNetworkInterface &amp;iface)">
                <parameter type="const QHostAddress &amp;" name="groupAddress" default=""/>
                <parameter type="const QNetworkInterface &amp;" name="iface" default=""/>
            </function>
            <function name="multicastInterface" fullname="QUdpSocket::multicastInterface" href="qudpsocket.html#multicastInterface" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" const="true" type="QNetworkInterface" signature="QNetworkInterface multicastInterface() const"/>
            <function name="pendingDatagramSize" fullname="QUdpSocket::pendingDatagramSize" href="qudpsocket.html#pendingDatagramSize" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" const="true" type="qint64" signature="qint64 pendingDatagramSize() const"/>
            <function name="readDatagram" fullname="QUdpSocket::readDatagram" href="qudpsocket.html#readDatagram" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="qint64" signature="qint64 readDatagram(char *data, qint64 maxSize, QHostAddress *address, quint16 *port)">
                <parameter type="char *" name="data" default=""/>
                <parameter type="qint64" name="maxSize" default=""/>
                <parameter type="QHostAddress *" name="address" default="nullptr"/>
                <parameter type="quint16 *" name="port" default="nullptr"/>
            </function>
            <function name="receiveDatagram" fullname="QUdpSocket::receiveDatagram" href="qudpsocket.html#receiveDatagram" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="QNetworkDatagram" signature="QNetworkDatagram receiveDatagram(qint64 maxSize)">
                <parameter type="qint64" name="maxSize" default="-1"/>
            </function>
            <function name="setMulticastInterface" fullname="QUdpSocket::setMulticastInterface" href="qudpsocket.html#setMulticastInterface" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="void" signature="void setMulticastInterface(const QNetworkInterface &amp;iface)">
                <parameter type="const QNetworkInterface &amp;" name="iface" default=""/>
            </function>
            <function name="writeDatagram" fullname="QUdpSocket::writeDatagram" href="qudpsocket.html#writeDatagram" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" type="qint64" signature="qint64 writeDatagram(const char *data, qint64 size, const QHostAddress &amp;address, quint16 port)">
                <parameter type="const char *" name="data" default=""/>
                <parameter type="qint64" name="size" default=""/>
                <parameter type="const QHostAddress &amp;" name="address" default=""/>
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="writeDatagram" fullname="QUdpSocket::writeDatagram" href="qudpsocket.html#writeDatagram-1" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" overload="true" overload-number="1" type="qint64" signature="qint64 writeDatagram(const QNetworkDatagram &amp;datagram)">
                <parameter type="const QNetworkDatagram &amp;" name="datagram" default=""/>
            </function>
            <function name="writeDatagram" fullname="QUdpSocket::writeDatagram" href="qudpsocket.html#writeDatagram-2" status="active" access="public" location="qudpsocket.h" documented="true" meta="plain" overload="true" overload-number="2" type="qint64" signature="qint64 writeDatagram(const QByteArray &amp;datagram, const QHostAddress &amp;host, quint16 port)">
                <parameter type="const QByteArray &amp;" name="datagram" default=""/>
                <parameter type="const QHostAddress &amp;" name="host" default=""/>
                <parameter type="quint16" name="port" default=""/>
            </function>
            <function name="~QUdpSocket" fullname="QUdpSocket::~QUdpSocket" href="qudpsocket.html#dtor.QUdpSocket" status="active" access="public" location="qudpsocket.h" documented="true" meta="destructor" virtual="virtual" noexcept="true" signature="~QUdpSocket()"/>
        </class>
        <page name="qtnetwork-index.html" href="qtnetwork-index.html" status="active" location="qtnetwork.qdoc" documented="true" subtype="page" title="Qt Network" fulltitle="Qt Network" subtitle="" brief="Provides networking capabilities">
            <contents name="using-the-module" title="Using the Module" level="1"/>
            <contents name="building-with-cmake" title="Building with CMake" level="2"/>
            <contents name="building-with-qmake" title="Building with qmake" level="2"/>
            <contents name="articles-and-guides" title="Articles and Guides" level="1"/>
            <contents name="api-reference" title="API Reference" level="1"/>
            <contents name="module-evolution" title="Module Evolution" level="1"/>
            <contents name="licenses-and-attributions" title="Licenses and Attributions" level="1"/>
        </page>
        <page name="ssl.html" href="ssl.html" status="active" location="ssl.qdoc" documented="true" subtype="page" title="Secure Sockets Layer (SSL) Classes" fulltitle="Secure Sockets Layer (SSL) Classes" subtitle="" brief="Classes for secure communication over network sockets">
            <keyword name="ssl" title="SSL"/>
            <contents name="enabling-and-disabling-ssl-support-when-building-qt-from-source" title="Enabling and Disabling SSL Support when Building Qt from Source" level="1"/>
            <contents name="considerations-while-packaging-your-application" title="Considerations While Packaging Your Application" level="1"/>
            <contents name="datagram-transport-layer-security" title="Datagram Transport Layer Security" level="1"/>
            <contents name="import-and-export-restrictions" title="Import and Export Restrictions" level="1"/>
        </page>
        <page name="qtnetwork-attribution-psl-data.html" href="qtnetwork-attribution-psl-data.html" status="active" location="codeattributions.qdoc" documented="true" groups="attributions-libs,attributions-qtnetwork,attributions-qtnetwork-libs" subtype="attribution" title="The Public Suffix List, version 883ced078a83f9d79a98933145425c221a5e51f0, fetched on 2024-01-25" fulltitle="The Public Suffix List, version 883ced078a83f9d79a98933145425c221a5e51f0, fetched on 2024-01-25" subtitle="" brief="Mozilla Public License 2.0">
            <target name="psl-data"/>
        </page>
        <page name="qtnetwork-attribution-libpsl.html" href="qtnetwork-attribution-libpsl.html" status="active" location="codeattributions.qdoc" documented="true" groups="attributions-libs,attributions-qtnetwork,attributions-qtnetwork-libs" subtype="attribution" title="libpsl - C library to handle the Public Suffix List, version 664f3dc85259ec65e30248a61fa1c45b7b0e4c3f" fulltitle="libpsl - C library to handle the Public Suffix List, version 664f3dc85259ec65e30248a61fa1c45b7b0e4c3f" subtitle="" brief="BSD 3-clause &quot;New&quot; or &quot;Revised&quot; License">
            <target name="libpsl"/>
        </page>
        <enum name="QDtlsError" href="qdtls.html#QDtlsError-enum" status="active" access="public" location="qdtls.h" related="13" documented="true" groups="network,ssl" scoped="true">
            <value name="NoError" value="0"/>
            <value name="InvalidInputParameters" value="1"/>
            <value name="InvalidOperation" value="2"/>
            <value name="UnderlyingSocketError" value="3"/>
            <value name="RemoteClosedConnectionError" value="4"/>
            <value name="PeerVerificationError" value="5"/>
            <value name="TlsInitializationError" value="6"/>
            <value name="TlsFatalError" value="7"/>
            <value name="TlsNonFatalError" value="8"/>
        </enum>
        <enum name="QOcspCertificateStatus" href="qocspresponse.html#QOcspCertificateStatus-enum" status="active" access="public" location="qocspresponse.h" related="27" documented="true" groups="network,ssl" scoped="true">
            <value name="Good" value="0"/>
            <value name="Revoked" value="1"/>
            <value name="Unknown" value="2"/>
        </enum>
        <enum name="QOcspRevocationReason" href="qocspresponse.html#QOcspRevocationReason-enum" status="active" access="public" location="qocspresponse.h" related="28" documented="true" groups="network,ssl" scoped="true">
            <value name="None" value="-1"/>
            <value name="Unspecified" value="0"/>
            <value name="KeyCompromise" value="1"/>
            <value name="CACompromise" value="2"/>
            <value name="AffiliationChanged" value="3"/>
            <value name="Superseded" value="4"/>
            <value name="CessationOfOperation" value="5"/>
            <value name="CertificateHold" value="6"/>
            <value name="RemoveFromCRL" value="7"/>
        </enum>
        <page name="rsslisting" href="qtnetwork-rsslisting-example.html" status="active" location="rsslisting.qdoc" documented="true" groups="category Networking" subtype="example" title="A minimal RSS listing application" fulltitle="A minimal RSS listing application" subtitle="" brief="A demonstration of how to fetch and display a network resource">
            <contents name="the-rsslisting-class" title="The RSSListing class" level="1"/>
            <contents name="construction" title="Construction" level="2"/>
            <contents name="the-slots" title="The slots" level="2"/>
            <contents name="the-get-method" title="The get() method" level="2"/>
            <contents name="the-parsexml-method" title="The parseXml() method" level="2"/>
            <page name="rsslisting/rsslisting.cpp" href="qtnetwork-rsslisting-rsslisting-cpp.html" status="active" subtype="file" title="" fulltitle="rsslisting.cpp Example File" subtitle="rsslisting/rsslisting.cpp"/>
            <page name="rsslisting/rsslisting.h" href="qtnetwork-rsslisting-rsslisting-h.html" status="active" subtype="file" title="" fulltitle="rsslisting.h Example File" subtitle="rsslisting/rsslisting.h"/>
            <page name="rsslisting/main.cpp" href="qtnetwork-rsslisting-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="rsslisting/main.cpp"/>
            <page name="rsslisting/CMakeLists.txt" href="qtnetwork-rsslisting-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="rsslisting/CMakeLists.txt"/>
            <page name="rsslisting/rsslisting.pro" href="qtnetwork-rsslisting-rsslisting-pro.html" status="active" subtype="file" title="" fulltitle="rsslisting.pro Example File" subtitle="rsslisting/rsslisting.pro"/>
        </page>
        <page name="blockingfortuneclient" href="qtnetwork-blockingfortuneclient-example.html" status="active" location="blockingfortuneclient.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Blocking Fortune Client" fulltitle="Blocking Fortune Client" subtitle="" brief="Demonstrates how to create a client for a network service">
            <page name="blockingfortuneclient/blockingclient.cpp" href="qtnetwork-blockingfortuneclient-blockingclient-cpp.html" status="active" subtype="file" title="" fulltitle="blockingclient.cpp Example File" subtitle="blockingfortuneclient/blockingclient.cpp"/>
            <page name="blockingfortuneclient/blockingclient.h" href="qtnetwork-blockingfortuneclient-blockingclient-h.html" status="active" subtype="file" title="" fulltitle="blockingclient.h Example File" subtitle="blockingfortuneclient/blockingclient.h"/>
            <page name="blockingfortuneclient/fortunethread.cpp" href="qtnetwork-blockingfortuneclient-fortunethread-cpp.html" status="active" subtype="file" title="" fulltitle="fortunethread.cpp Example File" subtitle="blockingfortuneclient/fortunethread.cpp"/>
            <page name="blockingfortuneclient/fortunethread.h" href="qtnetwork-blockingfortuneclient-fortunethread-h.html" status="active" subtype="file" title="" fulltitle="fortunethread.h Example File" subtitle="blockingfortuneclient/fortunethread.h"/>
            <page name="blockingfortuneclient/main.cpp" href="qtnetwork-blockingfortuneclient-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="blockingfortuneclient/main.cpp"/>
            <page name="blockingfortuneclient/CMakeLists.txt" href="qtnetwork-blockingfortuneclient-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="blockingfortuneclient/CMakeLists.txt"/>
            <page name="blockingfortuneclient/blockingfortuneclient.pro" href="qtnetwork-blockingfortuneclient-blockingfortuneclient-pro.html" status="active" subtype="file" title="" fulltitle="blockingfortuneclient.pro Example File" subtitle="blockingfortuneclient/blockingfortuneclient.pro"/>
        </page>
        <page name="broadcastreceiver" href="qtnetwork-broadcastreceiver-example.html" status="active" location="broadcastreceiver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Broadcast Receiver" fulltitle="Broadcast Receiver" subtitle="" brief="Demonstrates how to receive information broadcasted over a local network">
            <page name="broadcastreceiver/receiver.cpp" href="qtnetwork-broadcastreceiver-receiver-cpp.html" status="active" subtype="file" title="" fulltitle="receiver.cpp Example File" subtitle="broadcastreceiver/receiver.cpp"/>
            <page name="broadcastreceiver/receiver.h" href="qtnetwork-broadcastreceiver-receiver-h.html" status="active" subtype="file" title="" fulltitle="receiver.h Example File" subtitle="broadcastreceiver/receiver.h"/>
            <page name="broadcastreceiver/main.cpp" href="qtnetwork-broadcastreceiver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="broadcastreceiver/main.cpp"/>
            <page name="broadcastreceiver/CMakeLists.txt" href="qtnetwork-broadcastreceiver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="broadcastreceiver/CMakeLists.txt"/>
            <page name="broadcastreceiver/broadcastreceiver.pro" href="qtnetwork-broadcastreceiver-broadcastreceiver-pro.html" status="active" subtype="file" title="" fulltitle="broadcastreceiver.pro Example File" subtitle="broadcastreceiver/broadcastreceiver.pro"/>
        </page>
        <page name="broadcastsender" href="qtnetwork-broadcastsender-example.html" status="active" location="broadcastsender.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Broadcast Sender" fulltitle="Broadcast Sender" subtitle="" brief="Demonstrates how to broadcast information to multiple clients on a local network">
            <page name="broadcastsender/sender.cpp" href="qtnetwork-broadcastsender-sender-cpp.html" status="active" subtype="file" title="" fulltitle="sender.cpp Example File" subtitle="broadcastsender/sender.cpp"/>
            <page name="broadcastsender/sender.h" href="qtnetwork-broadcastsender-sender-h.html" status="active" subtype="file" title="" fulltitle="sender.h Example File" subtitle="broadcastsender/sender.h"/>
            <page name="broadcastsender/main.cpp" href="qtnetwork-broadcastsender-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="broadcastsender/main.cpp"/>
            <page name="broadcastsender/CMakeLists.txt" href="qtnetwork-broadcastsender-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="broadcastsender/CMakeLists.txt"/>
            <page name="broadcastsender/broadcastsender.pro" href="qtnetwork-broadcastsender-broadcastsender-pro.html" status="active" subtype="file" title="" fulltitle="broadcastsender.pro Example File" subtitle="broadcastsender/broadcastsender.pro"/>
        </page>
        <page name="dnslookup" href="qtnetwork-dnslookup-example.html" status="active" location="dnslookup.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="DNS lookup" fulltitle="DNS lookup" subtitle="" brief="Demonstrates how to lookup a host name using QDnsLookup">
            <page name="dnslookup/dnslookup.cpp" href="qtnetwork-dnslookup-dnslookup-cpp.html" status="active" subtype="file" title="" fulltitle="dnslookup.cpp Example File" subtitle="dnslookup/dnslookup.cpp"/>
            <page name="dnslookup/dnslookup.h" href="qtnetwork-dnslookup-dnslookup-h.html" status="active" subtype="file" title="" fulltitle="dnslookup.h Example File" subtitle="dnslookup/dnslookup.h"/>
            <page name="dnslookup/CMakeLists.txt" href="qtnetwork-dnslookup-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="dnslookup/CMakeLists.txt"/>
            <page name="dnslookup/dnslookup.pro" href="qtnetwork-dnslookup-dnslookup-pro.html" status="active" subtype="file" title="" fulltitle="dnslookup.pro Example File" subtitle="dnslookup/dnslookup.pro"/>
        </page>
        <page name="secureudpclient" href="qtnetwork-secureudpclient-example.html" status="active" location="secureudpclient.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="DTLS client" fulltitle="DTLS client" subtitle="" brief="This example demonstrates how to implement client-side DTLS connections">
            <page name="secureudpclient/addressdialog.cpp" href="qtnetwork-secureudpclient-addressdialog-cpp.html" status="active" subtype="file" title="" fulltitle="addressdialog.cpp Example File" subtitle="secureudpclient/addressdialog.cpp"/>
            <page name="secureudpclient/addressdialog.h" href="qtnetwork-secureudpclient-addressdialog-h.html" status="active" subtype="file" title="" fulltitle="addressdialog.h Example File" subtitle="secureudpclient/addressdialog.h"/>
            <page name="secureudpclient/addressdialog.ui" href="qtnetwork-secureudpclient-addressdialog-ui.html" status="active" subtype="file" title="" fulltitle="addressdialog.ui Example File" subtitle="secureudpclient/addressdialog.ui"/>
            <page name="secureudpclient/association.cpp" href="qtnetwork-secureudpclient-association-cpp.html" status="active" subtype="file" title="" fulltitle="association.cpp Example File" subtitle="secureudpclient/association.cpp"/>
            <page name="secureudpclient/association.h" href="qtnetwork-secureudpclient-association-h.html" status="active" subtype="file" title="" fulltitle="association.h Example File" subtitle="secureudpclient/association.h"/>
            <page name="secureudpclient/mainwindow.cpp" href="qtnetwork-secureudpclient-mainwindow-cpp.html" status="active" subtype="file" title="" fulltitle="mainwindow.cpp Example File" subtitle="secureudpclient/mainwindow.cpp"/>
            <page name="secureudpclient/mainwindow.h" href="qtnetwork-secureudpclient-mainwindow-h.html" status="active" subtype="file" title="" fulltitle="mainwindow.h Example File" subtitle="secureudpclient/mainwindow.h"/>
            <page name="secureudpclient/mainwindow.ui" href="qtnetwork-secureudpclient-mainwindow-ui.html" status="active" subtype="file" title="" fulltitle="mainwindow.ui Example File" subtitle="secureudpclient/mainwindow.ui"/>
            <page name="secureudpclient/main.cpp" href="qtnetwork-secureudpclient-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="secureudpclient/main.cpp"/>
            <page name="secureudpclient/CMakeLists.txt" href="qtnetwork-secureudpclient-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="secureudpclient/CMakeLists.txt"/>
            <page name="secureudpclient/secureudpclient.pro" href="qtnetwork-secureudpclient-secureudpclient-pro.html" status="active" subtype="file" title="" fulltitle="secureudpclient.pro Example File" subtitle="secureudpclient/secureudpclient.pro"/>
        </page>
        <page name="secureudpserver" href="qtnetwork-secureudpserver-example.html" status="active" location="secureudpserver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="DTLS server" fulltitle="DTLS server" subtitle="" brief="This examples demonstrates how to implement a simple DTLS server">
            <page name="secureudpserver/mainwindow.cpp" href="qtnetwork-secureudpserver-mainwindow-cpp.html" status="active" subtype="file" title="" fulltitle="mainwindow.cpp Example File" subtitle="secureudpserver/mainwindow.cpp"/>
            <page name="secureudpserver/mainwindow.h" href="qtnetwork-secureudpserver-mainwindow-h.html" status="active" subtype="file" title="" fulltitle="mainwindow.h Example File" subtitle="secureudpserver/mainwindow.h"/>
            <page name="secureudpserver/mainwindow.ui" href="qtnetwork-secureudpserver-mainwindow-ui.html" status="active" subtype="file" title="" fulltitle="mainwindow.ui Example File" subtitle="secureudpserver/mainwindow.ui"/>
            <page name="secureudpserver/nicselector.cpp" href="qtnetwork-secureudpserver-nicselector-cpp.html" status="active" subtype="file" title="" fulltitle="nicselector.cpp Example File" subtitle="secureudpserver/nicselector.cpp"/>
            <page name="secureudpserver/nicselector.h" href="qtnetwork-secureudpserver-nicselector-h.html" status="active" subtype="file" title="" fulltitle="nicselector.h Example File" subtitle="secureudpserver/nicselector.h"/>
            <page name="secureudpserver/nicselector.ui" href="qtnetwork-secureudpserver-nicselector-ui.html" status="active" subtype="file" title="" fulltitle="nicselector.ui Example File" subtitle="secureudpserver/nicselector.ui"/>
            <page name="secureudpserver/server.cpp" href="qtnetwork-secureudpserver-server-cpp.html" status="active" subtype="file" title="" fulltitle="server.cpp Example File" subtitle="secureudpserver/server.cpp"/>
            <page name="secureudpserver/server.h" href="qtnetwork-secureudpserver-server-h.html" status="active" subtype="file" title="" fulltitle="server.h Example File" subtitle="secureudpserver/server.h"/>
            <page name="secureudpserver/main.cpp" href="qtnetwork-secureudpserver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="secureudpserver/main.cpp"/>
            <page name="secureudpserver/CMakeLists.txt" href="qtnetwork-secureudpserver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="secureudpserver/CMakeLists.txt"/>
            <page name="secureudpserver/secureudpserver.pro" href="qtnetwork-secureudpserver-secureudpserver-pro.html" status="active" subtype="file" title="" fulltitle="secureudpserver.pro Example File" subtitle="secureudpserver/secureudpserver.pro"/>
        </page>
        <page name="fortuneclient" href="qtnetwork-fortuneclient-example.html" status="active" location="fortuneclient.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Fortune Client" fulltitle="Fortune Client" subtitle="" brief="Demonstrates how to create a client for a network service">
            <page name="fortuneclient/client.cpp" href="qtnetwork-fortuneclient-client-cpp.html" status="active" subtype="file" title="" fulltitle="client.cpp Example File" subtitle="fortuneclient/client.cpp"/>
            <page name="fortuneclient/client.h" href="qtnetwork-fortuneclient-client-h.html" status="active" subtype="file" title="" fulltitle="client.h Example File" subtitle="fortuneclient/client.h"/>
            <page name="fortuneclient/main.cpp" href="qtnetwork-fortuneclient-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="fortuneclient/main.cpp"/>
            <page name="fortuneclient/CMakeLists.txt" href="qtnetwork-fortuneclient-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="fortuneclient/CMakeLists.txt"/>
            <page name="fortuneclient/fortuneclient.pro" href="qtnetwork-fortuneclient-fortuneclient-pro.html" status="active" subtype="file" title="" fulltitle="fortuneclient.pro Example File" subtitle="fortuneclient/fortuneclient.pro"/>
        </page>
        <page name="fortuneserver" href="qtnetwork-fortuneserver-example.html" status="active" location="fortuneserver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Fortune Server" fulltitle="Fortune Server" subtitle="" brief="Demonstrates how to create a server for a network service">
            <page name="fortuneserver/server.cpp" href="qtnetwork-fortuneserver-server-cpp.html" status="active" subtype="file" title="" fulltitle="server.cpp Example File" subtitle="fortuneserver/server.cpp"/>
            <page name="fortuneserver/server.h" href="qtnetwork-fortuneserver-server-h.html" status="active" subtype="file" title="" fulltitle="server.h Example File" subtitle="fortuneserver/server.h"/>
            <page name="fortuneserver/main.cpp" href="qtnetwork-fortuneserver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="fortuneserver/main.cpp"/>
            <page name="fortuneserver/CMakeLists.txt" href="qtnetwork-fortuneserver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="fortuneserver/CMakeLists.txt"/>
            <page name="fortuneserver/fortuneserver.pro" href="qtnetwork-fortuneserver-fortuneserver-pro.html" status="active" subtype="file" title="" fulltitle="fortuneserver.pro Example File" subtitle="fortuneserver/fortuneserver.pro"/>
        </page>
        <page name="http" href="qtnetwork-http-example.html" status="active" location="http.qdoc" documented="true" groups="category Networking,category Web Technologies,examples-network" subtype="example" title="HTTP Client" fulltitle="HTTP Client" subtitle="" brief="Demonstrates a simple HTTP client">
            <page name="http/authenticationdialog.ui" href="qtnetwork-http-authenticationdialog-ui.html" status="active" subtype="file" title="" fulltitle="authenticationdialog.ui Example File" subtitle="http/authenticationdialog.ui"/>
            <page name="http/httpwindow.cpp" href="qtnetwork-http-httpwindow-cpp.html" status="active" subtype="file" title="" fulltitle="httpwindow.cpp Example File" subtitle="http/httpwindow.cpp"/>
            <page name="http/httpwindow.h" href="qtnetwork-http-httpwindow-h.html" status="active" subtype="file" title="" fulltitle="httpwindow.h Example File" subtitle="http/httpwindow.h"/>
            <page name="http/main.cpp" href="qtnetwork-http-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="http/main.cpp"/>
            <page name="http/CMakeLists.txt" href="qtnetwork-http-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="http/CMakeLists.txt"/>
            <page name="http/http.pro" href="qtnetwork-http-http-pro.html" status="active" subtype="file" title="" fulltitle="http.pro Example File" subtitle="http/http.pro"/>
        </page>
        <page name="multistreamclient" href="qtnetwork-multistreamclient-example.html" status="active" location="multistreamclient.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Multi-stream Client" fulltitle="Multi-stream Client" subtitle="" brief="Demonstrates how to use SCTP on the client side">
            <page name="multistreamclient/chatconsumer.cpp" href="qtnetwork-multistreamclient-chatconsumer-cpp.html" status="active" subtype="file" title="" fulltitle="chatconsumer.cpp Example File" subtitle="multistreamclient/chatconsumer.cpp"/>
            <page name="multistreamclient/chatconsumer.h" href="qtnetwork-multistreamclient-chatconsumer-h.html" status="active" subtype="file" title="" fulltitle="chatconsumer.h Example File" subtitle="multistreamclient/chatconsumer.h"/>
            <page name="multistreamclient/client.cpp" href="qtnetwork-multistreamclient-client-cpp.html" status="active" subtype="file" title="" fulltitle="client.cpp Example File" subtitle="multistreamclient/client.cpp"/>
            <page name="multistreamclient/client.h" href="qtnetwork-multistreamclient-client-h.html" status="active" subtype="file" title="" fulltitle="client.h Example File" subtitle="multistreamclient/client.h"/>
            <page name="multistreamclient/consumer.h" href="qtnetwork-multistreamclient-consumer-h.html" status="active" subtype="file" title="" fulltitle="consumer.h Example File" subtitle="multistreamclient/consumer.h"/>
            <page name="multistreamclient/movieconsumer.cpp" href="qtnetwork-multistreamclient-movieconsumer-cpp.html" status="active" subtype="file" title="" fulltitle="movieconsumer.cpp Example File" subtitle="multistreamclient/movieconsumer.cpp"/>
            <page name="multistreamclient/movieconsumer.h" href="qtnetwork-multistreamclient-movieconsumer-h.html" status="active" subtype="file" title="" fulltitle="movieconsumer.h Example File" subtitle="multistreamclient/movieconsumer.h"/>
            <page name="multistreamclient/timeconsumer.cpp" href="qtnetwork-multistreamclient-timeconsumer-cpp.html" status="active" subtype="file" title="" fulltitle="timeconsumer.cpp Example File" subtitle="multistreamclient/timeconsumer.cpp"/>
            <page name="multistreamclient/timeconsumer.h" href="qtnetwork-multistreamclient-timeconsumer-h.html" status="active" subtype="file" title="" fulltitle="timeconsumer.h Example File" subtitle="multistreamclient/timeconsumer.h"/>
            <page name="multistreamclient/main.cpp" href="qtnetwork-multistreamclient-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="multistreamclient/main.cpp"/>
            <page name="multistreamclient/CMakeLists.txt" href="qtnetwork-multistreamclient-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="multistreamclient/CMakeLists.txt"/>
            <page name="multistreamclient/multistreamclient.pro" href="qtnetwork-multistreamclient-multistreamclient-pro.html" status="active" subtype="file" title="" fulltitle="multistreamclient.pro Example File" subtitle="multistreamclient/multistreamclient.pro"/>
        </page>
        <page name="multistreamserver" href="qtnetwork-multistreamserver-example.html" status="active" location="multistreamserver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Multi-stream Server" fulltitle="Multi-stream Server" subtitle="" brief="Demonstrates how to use SCTP on the server side">
            <page name="multistreamserver/chatprovider.cpp" href="qtnetwork-multistreamserver-chatprovider-cpp.html" status="active" subtype="file" title="" fulltitle="chatprovider.cpp Example File" subtitle="multistreamserver/chatprovider.cpp"/>
            <page name="multistreamserver/chatprovider.h" href="qtnetwork-multistreamserver-chatprovider-h.html" status="active" subtype="file" title="" fulltitle="chatprovider.h Example File" subtitle="multistreamserver/chatprovider.h"/>
            <page name="multistreamserver/movieprovider.cpp" href="qtnetwork-multistreamserver-movieprovider-cpp.html" status="active" subtype="file" title="" fulltitle="movieprovider.cpp Example File" subtitle="multistreamserver/movieprovider.cpp"/>
            <page name="multistreamserver/movieprovider.h" href="qtnetwork-multistreamserver-movieprovider-h.html" status="active" subtype="file" title="" fulltitle="movieprovider.h Example File" subtitle="multistreamserver/movieprovider.h"/>
            <page name="multistreamserver/provider.h" href="qtnetwork-multistreamserver-provider-h.html" status="active" subtype="file" title="" fulltitle="provider.h Example File" subtitle="multistreamserver/provider.h"/>
            <page name="multistreamserver/server.cpp" href="qtnetwork-multistreamserver-server-cpp.html" status="active" subtype="file" title="" fulltitle="server.cpp Example File" subtitle="multistreamserver/server.cpp"/>
            <page name="multistreamserver/server.h" href="qtnetwork-multistreamserver-server-h.html" status="active" subtype="file" title="" fulltitle="server.h Example File" subtitle="multistreamserver/server.h"/>
            <page name="multistreamserver/timeprovider.cpp" href="qtnetwork-multistreamserver-timeprovider-cpp.html" status="active" subtype="file" title="" fulltitle="timeprovider.cpp Example File" subtitle="multistreamserver/timeprovider.cpp"/>
            <page name="multistreamserver/timeprovider.h" href="qtnetwork-multistreamserver-timeprovider-h.html" status="active" subtype="file" title="" fulltitle="timeprovider.h Example File" subtitle="multistreamserver/timeprovider.h"/>
            <page name="multistreamserver/main.cpp" href="qtnetwork-multistreamserver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="multistreamserver/main.cpp"/>
            <page name="multistreamserver/CMakeLists.txt" href="qtnetwork-multistreamserver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="multistreamserver/CMakeLists.txt"/>
            <page name="multistreamserver/multistreamserver.pro" href="qtnetwork-multistreamserver-multistreamserver-pro.html" status="active" subtype="file" title="" fulltitle="multistreamserver.pro Example File" subtitle="multistreamserver/multistreamserver.pro"/>
            <page name="multistreamserver/animation.gif" href="qtnetwork-multistreamserver-animation-gif.html" status="active" subtype="image" title="" fulltitle="animation.gif Image File" subtitle="multistreamserver/animation.gif"/>
        </page>
        <page name="multicastreceiver" href="qtnetwork-multicastreceiver-example.html" status="active" location="multicastreceiver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Multicast Receiver" fulltitle="Multicast Receiver" subtitle="" brief="Demonstrates how to receive information sent to a multicast group">
            <page name="multicastreceiver/receiver.cpp" href="qtnetwork-multicastreceiver-receiver-cpp.html" status="active" subtype="file" title="" fulltitle="receiver.cpp Example File" subtitle="multicastreceiver/receiver.cpp"/>
            <page name="multicastreceiver/receiver.h" href="qtnetwork-multicastreceiver-receiver-h.html" status="active" subtype="file" title="" fulltitle="receiver.h Example File" subtitle="multicastreceiver/receiver.h"/>
            <page name="multicastreceiver/main.cpp" href="qtnetwork-multicastreceiver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="multicastreceiver/main.cpp"/>
            <page name="multicastreceiver/CMakeLists.txt" href="qtnetwork-multicastreceiver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="multicastreceiver/CMakeLists.txt"/>
            <page name="multicastreceiver/multicastreceiver.pro" href="qtnetwork-multicastreceiver-multicastreceiver-pro.html" status="active" subtype="file" title="" fulltitle="multicastreceiver.pro Example File" subtitle="multicastreceiver/multicastreceiver.pro"/>
        </page>
        <page name="multicastsender" href="qtnetwork-multicastsender-example.html" status="active" location="multicastsender.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Multicast Sender" fulltitle="Multicast Sender" subtitle="" brief="Demonstrates how to send messages to a multicast group">
            <page name="multicastsender/sender.cpp" href="qtnetwork-multicastsender-sender-cpp.html" status="active" subtype="file" title="" fulltitle="sender.cpp Example File" subtitle="multicastsender/sender.cpp"/>
            <page name="multicastsender/sender.h" href="qtnetwork-multicastsender-sender-h.html" status="active" subtype="file" title="" fulltitle="sender.h Example File" subtitle="multicastsender/sender.h"/>
            <page name="multicastsender/main.cpp" href="qtnetwork-multicastsender-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="multicastsender/main.cpp"/>
            <page name="multicastsender/CMakeLists.txt" href="qtnetwork-multicastsender-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="multicastsender/CMakeLists.txt"/>
            <page name="multicastsender/multicastsender.pro" href="qtnetwork-multicastsender-multicastsender-pro.html" status="active" subtype="file" title="" fulltitle="multicastsender.pro Example File" subtitle="multicastsender/multicastsender.pro"/>
        </page>
        <page name="network-chat" href="qtnetwork-network-chat-example.html" status="active" location="network-chat.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Network Chat" fulltitle="Network Chat" subtitle="" brief="Demonstrates a stateful peer-to-peer Chat client">
            <page name="network-chat/chatdialog.cpp" href="qtnetwork-network-chat-chatdialog-cpp.html" status="active" subtype="file" title="" fulltitle="chatdialog.cpp Example File" subtitle="network-chat/chatdialog.cpp"/>
            <page name="network-chat/chatdialog.h" href="qtnetwork-network-chat-chatdialog-h.html" status="active" subtype="file" title="" fulltitle="chatdialog.h Example File" subtitle="network-chat/chatdialog.h"/>
            <page name="network-chat/chatdialog.ui" href="qtnetwork-network-chat-chatdialog-ui.html" status="active" subtype="file" title="" fulltitle="chatdialog.ui Example File" subtitle="network-chat/chatdialog.ui"/>
            <page name="network-chat/client.cpp" href="qtnetwork-network-chat-client-cpp.html" status="active" subtype="file" title="" fulltitle="client.cpp Example File" subtitle="network-chat/client.cpp"/>
            <page name="network-chat/client.h" href="qtnetwork-network-chat-client-h.html" status="active" subtype="file" title="" fulltitle="client.h Example File" subtitle="network-chat/client.h"/>
            <page name="network-chat/connection.cpp" href="qtnetwork-network-chat-connection-cpp.html" status="active" subtype="file" title="" fulltitle="connection.cpp Example File" subtitle="network-chat/connection.cpp"/>
            <page name="network-chat/connection.h" href="qtnetwork-network-chat-connection-h.html" status="active" subtype="file" title="" fulltitle="connection.h Example File" subtitle="network-chat/connection.h"/>
            <page name="network-chat/peermanager.cpp" href="qtnetwork-network-chat-peermanager-cpp.html" status="active" subtype="file" title="" fulltitle="peermanager.cpp Example File" subtitle="network-chat/peermanager.cpp"/>
            <page name="network-chat/peermanager.h" href="qtnetwork-network-chat-peermanager-h.html" status="active" subtype="file" title="" fulltitle="peermanager.h Example File" subtitle="network-chat/peermanager.h"/>
            <page name="network-chat/server.cpp" href="qtnetwork-network-chat-server-cpp.html" status="active" subtype="file" title="" fulltitle="server.cpp Example File" subtitle="network-chat/server.cpp"/>
            <page name="network-chat/server.h" href="qtnetwork-network-chat-server-h.html" status="active" subtype="file" title="" fulltitle="server.h Example File" subtitle="network-chat/server.h"/>
            <page name="network-chat/main.cpp" href="qtnetwork-network-chat-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="network-chat/main.cpp"/>
            <page name="network-chat/CMakeLists.txt" href="qtnetwork-network-chat-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="network-chat/CMakeLists.txt"/>
            <page name="network-chat/network-chat.pro" href="qtnetwork-network-chat-network-chat-pro.html" status="active" subtype="file" title="" fulltitle="network-chat.pro Example File" subtitle="network-chat/network-chat.pro"/>
        </page>
        <page name="https://www.openssl.org/source/license.html" href="https://www.openssl.org/source/license.html" status="active" location="external-resources.qdoc" documented="true" subtype="externalpage" title="OpenSSL License" fulltitle="OpenSSL License" subtitle=""/>
        <page name="https://www.openssl.org/" href="https://www.openssl.org/" status="active" location="external-resources.qdoc" documented="true" subtype="externalpage" title="OpenSSL Toolkit" fulltitle="OpenSSL Toolkit" subtitle=""/>
        <proxy name="QHash" href="qhash-qtnetwork-proxy.html" status="active" access="public">
            <function name="qHash" href="qssldiffiehellmanparameters.html#qHash" status="active" access="public" location="qssldiffiehellmanparameters.h" documented="true" related="36" meta="plain" noexcept="true" type="size_t" signature="size_t qHash(const QSslDiffieHellmanParameters &amp;dhparam, size_t seed)">
                <parameter type="const QSslDiffieHellmanParameters &amp;" name="dhparam" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-1" status="active" access="public" location="qocspresponse.h" documented="true" related="9" meta="plain" noexcept="true" overload="true" overload-number="1" type="size_t" signature="size_t qHash(const QOcspResponse &amp;response, size_t seed)">
                <parameter type="const QOcspResponse &amp;" name="response" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-2" status="active" access="public" location="qsslcertificate.h" documented="true" related="10" meta="plain" noexcept="true" overload="true" overload-number="2" type="size_t" signature="size_t qHash(const QSslCertificate &amp;key, size_t seed)">
                <parameter type="const QSslCertificate &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-3" status="active" access="public" location="qsslellipticcurve.h" documented="true" related="11" meta="plain" constexpr="true" noexcept="true" overload="true" overload-number="3" type="size_t" signature="size_t qHash(QSslEllipticCurve curve, size_t seed)">
                <parameter type="QSslEllipticCurve" name="curve" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
            <function name="qHash" href="qhash-qtnetwork-proxy.html#qHash-4" status="active" access="public" location="qsslerror.h" documented="true" related="12" meta="plain" noexcept="true" overload="true" overload-number="4" type="size_t" signature="size_t qHash(const QSslError &amp;key, size_t seed)">
                <parameter type="const QSslError &amp;" name="key" default=""/>
                <parameter type="size_t" name="seed" default="0"/>
            </function>
        </proxy>
        <page name="securesocketclient" href="qtnetwork-securesocketclient-example.html" status="active" location="securesocketclient.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Secure Socket Client" fulltitle="Secure Socket Client" subtitle="" brief="Demonstrates how to communicate over an encrypted (SSL) connection">
            <page name="securesocketclient/certificateinfo.cpp" href="qtnetwork-securesocketclient-certificateinfo-cpp.html" status="active" subtype="file" title="" fulltitle="certificateinfo.cpp Example File" subtitle="securesocketclient/certificateinfo.cpp"/>
            <page name="securesocketclient/certificateinfo.h" href="qtnetwork-securesocketclient-certificateinfo-h.html" status="active" subtype="file" title="" fulltitle="certificateinfo.h Example File" subtitle="securesocketclient/certificateinfo.h"/>
            <page name="securesocketclient/certificateinfo.ui" href="qtnetwork-securesocketclient-certificateinfo-ui.html" status="active" subtype="file" title="" fulltitle="certificateinfo.ui Example File" subtitle="securesocketclient/certificateinfo.ui"/>
            <page name="securesocketclient/sslclient.cpp" href="qtnetwork-securesocketclient-sslclient-cpp.html" status="active" subtype="file" title="" fulltitle="sslclient.cpp Example File" subtitle="securesocketclient/sslclient.cpp"/>
            <page name="securesocketclient/sslclient.h" href="qtnetwork-securesocketclient-sslclient-h.html" status="active" subtype="file" title="" fulltitle="sslclient.h Example File" subtitle="securesocketclient/sslclient.h"/>
            <page name="securesocketclient/sslclient.ui" href="qtnetwork-securesocketclient-sslclient-ui.html" status="active" subtype="file" title="" fulltitle="sslclient.ui Example File" subtitle="securesocketclient/sslclient.ui"/>
            <page name="securesocketclient/sslerrors.ui" href="qtnetwork-securesocketclient-sslerrors-ui.html" status="active" subtype="file" title="" fulltitle="sslerrors.ui Example File" subtitle="securesocketclient/sslerrors.ui"/>
            <page name="securesocketclient/main.cpp" href="qtnetwork-securesocketclient-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="securesocketclient/main.cpp"/>
            <page name="securesocketclient/CMakeLists.txt" href="qtnetwork-securesocketclient-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="securesocketclient/CMakeLists.txt"/>
            <page name="securesocketclient/securesocketclient.pro" href="qtnetwork-securesocketclient-securesocketclient-pro.html" status="active" subtype="file" title="" fulltitle="securesocketclient.pro Example File" subtitle="securesocketclient/securesocketclient.pro"/>
            <page name="securesocketclient/securesocketclient.qrc" href="qtnetwork-securesocketclient-securesocketclient-qrc.html" status="active" subtype="file" title="" fulltitle="securesocketclient.qrc Example File" subtitle="securesocketclient/securesocketclient.qrc"/>
            <page name="securesocketclient/encrypted.png" href="qtnetwork-securesocketclient-encrypted-png.html" status="active" subtype="image" title="" fulltitle="encrypted.png Image File" subtitle="securesocketclient/encrypted.png"/>
        </page>
        <page name="threadedfortuneserver" href="qtnetwork-threadedfortuneserver-example.html" status="active" location="threadedfortuneserver.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Threaded Fortune Server" fulltitle="Threaded Fortune Server" subtitle="" brief="Threaded Fortune Server example shows how to create a server for a simple network service that uses threads to handle requests from different clients. It is intended to be run alongside the Fortune Client example">
            <page name="threadedfortuneserver/dialog.cpp" href="qtnetwork-threadedfortuneserver-dialog-cpp.html" status="active" subtype="file" title="" fulltitle="dialog.cpp Example File" subtitle="threadedfortuneserver/dialog.cpp"/>
            <page name="threadedfortuneserver/dialog.h" href="qtnetwork-threadedfortuneserver-dialog-h.html" status="active" subtype="file" title="" fulltitle="dialog.h Example File" subtitle="threadedfortuneserver/dialog.h"/>
            <page name="threadedfortuneserver/fortuneserver.cpp" href="qtnetwork-threadedfortuneserver-fortuneserver-cpp.html" status="active" subtype="file" title="" fulltitle="fortuneserver.cpp Example File" subtitle="threadedfortuneserver/fortuneserver.cpp"/>
            <page name="threadedfortuneserver/fortuneserver.h" href="qtnetwork-threadedfortuneserver-fortuneserver-h.html" status="active" subtype="file" title="" fulltitle="fortuneserver.h Example File" subtitle="threadedfortuneserver/fortuneserver.h"/>
            <page name="threadedfortuneserver/fortunethread.cpp" href="qtnetwork-threadedfortuneserver-fortunethread-cpp.html" status="active" subtype="file" title="" fulltitle="fortunethread.cpp Example File" subtitle="threadedfortuneserver/fortunethread.cpp"/>
            <page name="threadedfortuneserver/fortunethread.h" href="qtnetwork-threadedfortuneserver-fortunethread-h.html" status="active" subtype="file" title="" fulltitle="fortunethread.h Example File" subtitle="threadedfortuneserver/fortunethread.h"/>
            <page name="threadedfortuneserver/main.cpp" href="qtnetwork-threadedfortuneserver-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="threadedfortuneserver/main.cpp"/>
            <page name="threadedfortuneserver/CMakeLists.txt" href="qtnetwork-threadedfortuneserver-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="threadedfortuneserver/CMakeLists.txt"/>
            <page name="threadedfortuneserver/threadedfortuneserver.pro" href="qtnetwork-threadedfortuneserver-threadedfortuneserver-pro.html" status="active" subtype="file" title="" fulltitle="threadedfortuneserver.pro Example File" subtitle="threadedfortuneserver/threadedfortuneserver.pro"/>
        </page>
        <page name="torrent" href="qtnetwork-torrent-example.html" status="active" location="torrent.qdoc" documented="true" groups="category Networking,examples-network" subtype="example" title="Torrent Example" fulltitle="Torrent Example" subtitle="" brief="Demonstrates complex TCP/IP operations">
            <page name="torrent/addtorrentdialog.cpp" href="qtnetwork-torrent-addtorrentdialog-cpp.html" status="active" subtype="file" title="" fulltitle="addtorrentdialog.cpp Example File" subtitle="torrent/addtorrentdialog.cpp"/>
            <page name="torrent/addtorrentdialog.h" href="qtnetwork-torrent-addtorrentdialog-h.html" status="active" subtype="file" title="" fulltitle="addtorrentdialog.h Example File" subtitle="torrent/addtorrentdialog.h"/>
            <page name="torrent/addtorrentform.ui" href="qtnetwork-torrent-addtorrentform-ui.html" status="active" subtype="file" title="" fulltitle="addtorrentform.ui Example File" subtitle="torrent/addtorrentform.ui"/>
            <page name="torrent/bencodeparser.cpp" href="qtnetwork-torrent-bencodeparser-cpp.html" status="active" subtype="file" title="" fulltitle="bencodeparser.cpp Example File" subtitle="torrent/bencodeparser.cpp"/>
            <page name="torrent/bencodeparser.h" href="qtnetwork-torrent-bencodeparser-h.html" status="active" subtype="file" title="" fulltitle="bencodeparser.h Example File" subtitle="torrent/bencodeparser.h"/>
            <page name="torrent/connectionmanager.cpp" href="qtnetwork-torrent-connectionmanager-cpp.html" status="active" subtype="file" title="" fulltitle="connectionmanager.cpp Example File" subtitle="torrent/connectionmanager.cpp"/>
            <page name="torrent/connectionmanager.h" href="qtnetwork-torrent-connectionmanager-h.html" status="active" subtype="file" title="" fulltitle="connectionmanager.h Example File" subtitle="torrent/connectionmanager.h"/>
            <page name="torrent/filemanager.cpp" href="qtnetwork-torrent-filemanager-cpp.html" status="active" subtype="file" title="" fulltitle="filemanager.cpp Example File" subtitle="torrent/filemanager.cpp"/>
            <page name="torrent/filemanager.h" href="qtnetwork-torrent-filemanager-h.html" status="active" subtype="file" title="" fulltitle="filemanager.h Example File" subtitle="torrent/filemanager.h"/>
            <page name="torrent/mainwindow.cpp" href="qtnetwork-torrent-mainwindow-cpp.html" status="active" subtype="file" title="" fulltitle="mainwindow.cpp Example File" subtitle="torrent/mainwindow.cpp"/>
            <page name="torrent/mainwindow.h" href="qtnetwork-torrent-mainwindow-h.html" status="active" subtype="file" title="" fulltitle="mainwindow.h Example File" subtitle="torrent/mainwindow.h"/>
            <page name="torrent/metainfo.cpp" href="qtnetwork-torrent-metainfo-cpp.html" status="active" subtype="file" title="" fulltitle="metainfo.cpp Example File" subtitle="torrent/metainfo.cpp"/>
            <page name="torrent/metainfo.h" href="qtnetwork-torrent-metainfo-h.html" status="active" subtype="file" title="" fulltitle="metainfo.h Example File" subtitle="torrent/metainfo.h"/>
            <page name="torrent/peerwireclient.cpp" href="qtnetwork-torrent-peerwireclient-cpp.html" status="active" subtype="file" title="" fulltitle="peerwireclient.cpp Example File" subtitle="torrent/peerwireclient.cpp"/>
            <page name="torrent/peerwireclient.h" href="qtnetwork-torrent-peerwireclient-h.html" status="active" subtype="file" title="" fulltitle="peerwireclient.h Example File" subtitle="torrent/peerwireclient.h"/>
            <page name="torrent/ratecontroller.cpp" href="qtnetwork-torrent-ratecontroller-cpp.html" status="active" subtype="file" title="" fulltitle="ratecontroller.cpp Example File" subtitle="torrent/ratecontroller.cpp"/>
            <page name="torrent/ratecontroller.h" href="qtnetwork-torrent-ratecontroller-h.html" status="active" subtype="file" title="" fulltitle="ratecontroller.h Example File" subtitle="torrent/ratecontroller.h"/>
            <page name="torrent/torrentclient.cpp" href="qtnetwork-torrent-torrentclient-cpp.html" status="active" subtype="file" title="" fulltitle="torrentclient.cpp Example File" subtitle="torrent/torrentclient.cpp"/>
            <page name="torrent/torrentclient.h" href="qtnetwork-torrent-torrentclient-h.html" status="active" subtype="file" title="" fulltitle="torrentclient.h Example File" subtitle="torrent/torrentclient.h"/>
            <page name="torrent/torrentserver.cpp" href="qtnetwork-torrent-torrentserver-cpp.html" status="active" subtype="file" title="" fulltitle="torrentserver.cpp Example File" subtitle="torrent/torrentserver.cpp"/>
            <page name="torrent/torrentserver.h" href="qtnetwork-torrent-torrentserver-h.html" status="active" subtype="file" title="" fulltitle="torrentserver.h Example File" subtitle="torrent/torrentserver.h"/>
            <page name="torrent/trackerclient.cpp" href="qtnetwork-torrent-trackerclient-cpp.html" status="active" subtype="file" title="" fulltitle="trackerclient.cpp Example File" subtitle="torrent/trackerclient.cpp"/>
            <page name="torrent/trackerclient.h" href="qtnetwork-torrent-trackerclient-h.html" status="active" subtype="file" title="" fulltitle="trackerclient.h Example File" subtitle="torrent/trackerclient.h"/>
            <page name="torrent/icons/1downarrow.svg" href="qtnetwork-torrent-icons-1downarrow-svg.html" status="active" subtype="file" title="" fulltitle="1downarrow.svg Example File" subtitle="torrent/icons/1downarrow.svg"/>
            <page name="torrent/icons/1uparrow.svg" href="qtnetwork-torrent-icons-1uparrow-svg.html" status="active" subtype="file" title="" fulltitle="1uparrow.svg Example File" subtitle="torrent/icons/1uparrow.svg"/>
            <page name="torrent/icons/about.svg" href="qtnetwork-torrent-icons-about-svg.html" status="active" subtype="file" title="" fulltitle="about.svg Example File" subtitle="torrent/icons/about.svg"/>
            <page name="torrent/icons/bottom.svg" href="qtnetwork-torrent-icons-bottom-svg.html" status="active" subtype="file" title="" fulltitle="bottom.svg Example File" subtitle="torrent/icons/bottom.svg"/>
            <page name="torrent/icons/edit_add.svg" href="qtnetwork-torrent-icons-edit-add-svg.html" status="active" subtype="file" title="" fulltitle="edit_add.svg Example File" subtitle="torrent/icons/edit_add.svg"/>
            <page name="torrent/icons/edit_remove.svg" href="qtnetwork-torrent-icons-edit-remove-svg.html" status="active" subtype="file" title="" fulltitle="edit_remove.svg Example File" subtitle="torrent/icons/edit_remove.svg"/>
            <page name="torrent/icons/exit.svg" href="qtnetwork-torrent-icons-exit-svg.html" status="active" subtype="file" title="" fulltitle="exit.svg Example File" subtitle="torrent/icons/exit.svg"/>
            <page name="torrent/icons/peertopeer.svg" href="qtnetwork-torrent-icons-peertopeer-svg.html" status="active" subtype="file" title="" fulltitle="peertopeer.svg Example File" subtitle="torrent/icons/peertopeer.svg"/>
            <page name="torrent/icons/player_pause.svg" href="qtnetwork-torrent-icons-player-pause-svg.html" status="active" subtype="file" title="" fulltitle="player_pause.svg Example File" subtitle="torrent/icons/player_pause.svg"/>
            <page name="torrent/icons/player_play.svg" href="qtnetwork-torrent-icons-player-play-svg.html" status="active" subtype="file" title="" fulltitle="player_play.svg Example File" subtitle="torrent/icons/player_play.svg"/>
            <page name="torrent/icons/player_stop.svg" href="qtnetwork-torrent-icons-player-stop-svg.html" status="active" subtype="file" title="" fulltitle="player_stop.svg Example File" subtitle="torrent/icons/player_stop.svg"/>
            <page name="torrent/main.cpp" href="qtnetwork-torrent-main-cpp.html" status="active" subtype="file" title="" fulltitle="main.cpp Example File" subtitle="torrent/main.cpp"/>
            <page name="torrent/CMakeLists.txt" href="qtnetwork-torrent-cmakelists-txt.html" status="active" subtype="file" title="" fulltitle="CMakeLists.txt Example File" subtitle="torrent/CMakeLists.txt"/>
            <page name="torrent/icons.qrc" href="qtnetwork-torrent-icons-qrc.html" status="active" subtype="file" title="" fulltitle="icons.qrc Example File" subtitle="torrent/icons.qrc"/>
            <page name="torrent/torrent.pro" href="qtnetwork-torrent-torrent-pro.html" status="active" subtype="file" title="" fulltitle="torrent.pro Example File" subtitle="torrent/torrent.pro"/>
        </page>
        <group name="all-examples" href="all-examples.html" status="internal" seen="false" title=""/>
        <group name="attributions-libs" href="attributions-libs.html" status="internal" seen="false" title=""/>
        <group name="attributions-qtnetwork" href="attributions-qtnetwork.html" status="internal" seen="false" title=""/>
        <group name="attributions-qtnetwork-libs" href="attributions-qtnetwork-libs.html" status="internal" seen="false" title=""/>
        <group name="category Networking" href="category-networking.html" status="internal" seen="false" title=""/>
        <group name="category Web Technologies" href="category-web-technologies.html" status="internal" seen="false" title=""/>
        <group name="changes-qt-5-to-6" href="changes-qt-5-to-6.html" status="internal" seen="false" title=""/>
        <group name="examples-network" href="examples-network.html" status="active" location="examples.qdoc" documented="true" groups="all-examples" seen="true" title="Network Examples" brief="How to do network programming in Qt"/>
        <group name="groups" href="groups.html" status="internal" seen="false" title=""/>
        <group name="modules" href="modules.html" status="internal" seen="false" title=""/>
        <group name="network" href="network.html" status="active" location="network-programming.qdoc" documented="true" groups="groups" seen="true" title="Network Programming API" brief="Classes for Network Programming"/>
        <group name="shared" href="shared.html" status="internal" seen="false" title=""/>
        <group name="ssl" href="ssl.html" status="internal" seen="false" title=""/>
        <module name="QtNetwork" href="qtnetwork-module.html" status="active" location="qtnetwork.qdoc" documented="true" groups="modules" seen="true" title="Qt Network C++ Classes" brief="Provides classes to make network programming easier and portable"/>
    </namespace>
</INDEX>
