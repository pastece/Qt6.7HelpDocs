<?xml version="1.0" encoding="UTF-8"?>
<instructionals module="QtWaylandCompositor">
    <examples>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-custom-extension-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/custom-extension.png" name="Custom Extension" projectPath="wayland/custom-extension/CMakeLists.txt">
            <description><![CDATA[Custom Extension shows how to implement a custom Wayland extension.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/custom-extension/compositor/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/custom-extension/qml-client/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-custom-shell-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/custom-shell.jpg" name="Custom Shell" projectPath="wayland/custom-shell/CMakeLists.txt">
            <description><![CDATA[Custom Shell shows how to implement a custom shell extension.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/custom-shell/client-plugin/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/custom-shell/compositor/qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-fancy-compositor-example.html" imageUrl="qthelp://org.qt-project.qtdoc.670/qtdoc/images/qt-codesample.png" name="Fancy Compositor" projectPath="wayland/fancy-compositor/CMakeLists.txt">
            <description><![CDATA[Fancy Compositor is an example that demonstrates how to write a fancy Wayland compositor in pure QML.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/fancy-compositor/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/fancy-compositor/qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-ivi-compositor-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/ivi-compositor-1.png" isHighlighted="true" name="IVI Compositor" projectPath="wayland/ivi-compositor/CMakeLists.txt">
            <description><![CDATA[IVI Compositor is an example that demonstrates how to use the IviApplication extension.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/ivi-compositor/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/ivi-compositor/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-minimal-cpp-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/minimal-cpp.jpg" name="Minimal CPP" projectPath="wayland/minimal-cpp/CMakeLists.txt">
            <description><![CDATA[Minimal CPP is an example that demonstrates how to write a Wayland compositor in C++.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen mainFile="true">wayland/minimal-cpp/main.cpp</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-minimal-qml-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/minimal-qml.png" isHighlighted="true" name="Minimal QML" projectPath="wayland/minimal-qml/CMakeLists.txt">
            <description><![CDATA[Minimal QML is a simple example that demonstrates how to write a Wayland compositor in QML.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/minimal-qml/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/minimal-qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-multi-output-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/multi-output.jpg" name="Multi Output" projectPath="wayland/multi-output/CMakeLists.txt">
            <description><![CDATA[Multi Output is an example that demonstrates a compositor with multiple outputs.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/multi-output/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/multi-output/qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-multi-screen-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/multi-screen.jpg" name="Multi Screen" projectPath="wayland/multi-screen/CMakeLists.txt">
            <description><![CDATA[Multi Screen is a desktop-style Wayland compositor for multiple screens.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/multi-screen/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/multi-screen/qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-overview-compositor-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/overview-compositor.jpg" name="Overview Compositor" projectPath="wayland/overview-compositor/CMakeLists.txt">
            <description><![CDATA[Overview Compositor shows how to switch between clients in a grid.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/overview-compositor/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/overview-compositor/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-qtshell-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/qtshell.jpg" name="QtShell Compositor" projectPath="wayland/qtshell/CMakeLists.txt">
            <description><![CDATA[QtShell Compositor shows how to use the QtShell shell extension.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/qtshell/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/qtshell/qml/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-server-side-decoration-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/server-side-decoration.png" name="Server Side Decoration Compositor" projectPath="wayland/server-side-decoration/CMakeLists.txt">
            <description><![CDATA[Server Side Decoration Compositor is a simple example that demonstrates server side window decorations on xdg-shell.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/server-side-decoration/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/server-side-decoration/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
        <example docUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/qtwaylandcompositor-spanning-screens-example.html" imageUrl="qthelp://org.qt-project.qtwaylandcompositor.670/qtwaylandcompositor/images/spanning-screens.jpg" name="Spanning Screens" projectPath="wayland/spanning-screens/CMakeLists.txt">
            <description><![CDATA[Spanning Screens is an example that demonstrates how to let Wayland clients span multiple screens.]]></description>
            <tags>waylandcompositor</tags>
            <fileToOpen>wayland/spanning-screens/main.cpp</fileToOpen>
            <fileToOpen mainFile="true">wayland/spanning-screens/main.qml</fileToOpen>
            <meta>
                <entry name="category">Embedded</entry>
            </meta>
        </example>
    </examples>
</instructionals>
